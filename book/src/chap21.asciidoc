[[chap21]]
== Depuración

Al depurar, es necesario distinguir entre los diferentes tipos de errores para rastrearlos más rápidamente:

* Los errores de sintaxis se descubren cuando el intérprete traduce el código fuente a código de bytes. Estos errores indican que hay una falla en la estructura del programa. Por ejemplo, omitir la palabra reservada +end+ al final de un bloque de funciones genera el mensaje +ERROR: LoadError: syntax: incomplete: function requires end+.
(((error de sintaxis)))

* Los errores en tiempo de ejecución se presentan si algo falla mientras se ejecuta el programa. La mayoría de los mensajes de error en tiempo de ejecución indican dónde ocurrió el error y qué funciones se estaban ejecutando. Ejemplo: Una recursión infinita eventualmente causa el error en tiempo de ejecución +ERROR: StackOverflowError+.
(((error en tiempo de ejecución)))

* Los errores semánticos ocurren cuando un programa se ejecuta sin generar mensajes de error pero no hace lo que debería. Por ejemplo: una expresión puede no evaluarse en el orden esperado, generando un resultado incorrecto.
(((error semántico)))

El primer paso en la depuración es averiguar el tipo de error al que se enfrenta. Aunque las siguientes secciones están organizadas por tipo de error, algunas técnicas son aplicables en más de una situación.


=== Errores de Sintaxis

Los errores de sintaxis suelen ser fáciles de corregir una vez se descubre cuáles son. Desafortunadamente, muchas veces los mensajes de error no son útiles. Los mensajes más comunes son 

+ERROR: LoadError: syntax: incomplete: premature end of input+ 

y 

+ERROR: LoadError: syntax: unexpected "="+, 

los cuales no son muy informativos.

Por otro lado, el mensaje indica en qué parte del programa se produjo el problema. En realidad, indica dónde Julia notó que había un problema, que no es necesariamente dónde está el error. A veces, el error es anterior a la ubicación del mensaje de error, generalmente en la línea anterior.

Si está programando incrementalmente, el usuario debería tener casi localizado el error ya que estará en la última línea que agregó.

Si está copiando código de un libro, comience comparando su código con el código del libro y verifique cada letra. Al mismo tiempo, recuerde que el libro puede contener errores, por lo que si ve algo que parece un error de sintaxis, es posible que lo sea.

Aquí hay algunas formas de evitar los errores de sintaxis más comunes:

. Asegúrese de no estar usando una palabra reservada de Julia en un nombre de variable.

. Compruebe que tiene la palabra reservada +end+ al final de cada sentencia compuesta, incluyendo los bloques +for+, +while+, +if+ y +function+.

. Asegúrese de que las cadenas tengan su par de comillas de apertura y cierre. Asegúrese de que todas las comillas sean "comillas rectas", y no otro tipo de "comillas".

. Si tiene cadenas que ocupan varias líneas con triples comillas, asegúrese de que ha terminado la cadena correctamente. Una cadena sin terminar puede provocar un error _invalid token_ al final de su programa, o puede hacer que la siguiente parte del programa sea tratada como una cadena hasta llegar a la siguiente cadena. ¡El segundo caso podría no presentar mensaje de error!

. Un paréntesis sin cerrar —+(+, +{+, or +[+— hace que Julia continúe con la línea siguiente como parte de la sentencia actual. Generalmente, se produce un error casi inmediatamente en la siguiente línea.

. Verifique el clásico error que se produce al ocupar +=+ en lugar de +==+ dentro de un condicional.

. Si tiene caracteres que no son ASCII en el código (incluidas cadenas y comentarios), esto podría causar un problema, aunque Julia generalmente maneja caracteres no ASCII. Tenga cuidado si pega texto de una página web u otra fuente.

Si nada funciona, pase a la siguiente sección ...


==== Sigo haciendo cambios y no hay diferencia

Si el REPL dice que hay un error y usted no lo ve, podría deberse a que usted y el REPL no están viendo el mismo código. Verifique su entorno de programación para asegurarse de que el programa que está editando es el que Julia está tratando de ejecutar.

Si no está seguro, intente poner un error de sintaxis obvio y deliberado al comienzo del programa. Ahora ejecútelo de nuevo. Si REPL no encuentra el nuevo error, no está ejecutando el nuevo código.

Estas son algunas de las posibles razones:

* Editó el archivo y olvidó guardar los cambios antes de ejecutarlo nuevamente. Algunos entornos de programación hacen esto por usted, pero otros no.

* Cambió el nombre del archivo, pero aún está ejecutando el archivo con el nombre anterior.

* Algo en su entorno de desarrollo está configurado incorrectamente.

* Si está escribiendo un módulo y está usando +using+, asegúrese de no darle a su módulo el mismo nombre que uno de los módulos estándar de Julia.

* Si está usando +using+ para importar un módulo, recuerde que debe reiniciar REPL cuando modifique el código en el módulo. Si vuelve a importar el módulo, no ocurre nada.

Si se queda atascado y no puede darse cuenta de lo que está sucediendo, un enfoque es comenzar de nuevo con un nuevo programa como "¡Hola, Mundo!" y asegurarse de que puede ejecutar este programa ya conocido. Luego, puede agregar gradualmente las piezas del programa original al nuevo.


=== Errores en Tiempo de Ejecución

Una vez que su programa es sintácticamente correcto, Julia puede leerlo y al menos comenzar a ejecutarlo. ¿Qué podría salir mal?

==== Mi programa no hace absolutamente nada

Este problema es común cuando su archivo consta de funciones y clases, pero en realidad no llama a ninguna función para iniciar la ejecución. Esto puede ser intencional si sólo se busca importar este módulo para suministrar clases y funciones.

Si no es intencional, asegúrese de que haya una llamada a la función en el programa, y asegúrese de que el flujo de ejecución pase por esta llamada (vea <<flow_of_execution>>).
(((flujo de ejecución)))


==== Mi programa se congela

Si un programa se detiene y parece no estar haciendo nada, está "congelado". Generalmente eso significa que está atrapado en un bucle infinito o en una recursión infinita.

* Si hay un bucle en particular que le resulta sospechoso de poder provocar el problema, agregue una sentencia de impresión justo antes del bucle que diga "entrando al bucle" y otra inmediatamente posterior que diga "saliendo del bucle".
+
Ejecute el programa. Si recibe el primer mensaje y no el segundo, tiene un bucle infinito. Vea <<infinite_loop>>.
(((bucle infinito)))

* La mayoría de las veces, una recursión infinita hará que el programa se ejecute por un rato y luego produzca un error +ERROR: LoadError: StackOverflowError+. Si eso sucede, vea <<infinite_recursion>>.
+
Si no obtiene este error pero sospecha que hay un problema con un método o función recursiva, igual puede utilizar las técnicas de <<infinite_recursion>>.
(((recursión infinita)))

* Si ninguno de esos pasos funciona, comience a probar otros bucles, y otras funciones y métodos recursivos.

* Si esto no funciona, quizás es porque usted no entiende el flujo de ejecución de su programa. Vea <<flow_of_execution>>.


[[infinite_loop]]
===== Bucle Infinito

Si cree tener un bucle infinito y cree saber cuál es, añada una sentencia de impresión que imprima los valores de las variables de la condición al final del bucle junto con el valor de la condición.

Por ejemplo:

[source,julia]
----
while x > 0 && y < 0
    # hacer algo con x
    # hacer algo con y
    @debug "variables" x y
    @debug "condicion" x > 0 && y < 0
end
----

Ahora, cuando ejecute el programa en modo de depuración, verá el valor de las variables y la condición en cada iteración. En la última iteración, la condición debe ser +false+. Si el ciclo continúa, podrá ver los valores de +x+ e +y+, y podrá averiguar por qué no se actualizan correctamente.

[[infinite_recursion]]
===== Recursión Infinita

La mayoría de las veces, una recursión infinita hace que el programa se ejecute durante un tiempo y luego produzca un error 

+ERROR: LoadError: StackOverflowError+.
(((StackOverflowError)))

Si sospecha que una función o un método está causando una recursión infinita, comience por asegurarse de que hay un caso base. En otras palabras, debería haber una condición que haga que la función devuelva un valor sin hacer otra llamada recursiva. Si no, necesita revisar el algoritmo y encontrar ese caso base.

Si hay un caso base pero el programa no parece llegar hasta él, añada una sentencia de impresión al inicio de la función que imprima los parámetros. Ahora, cuando ejecute el programa, verá el valor de los parámetros cada vez que se llame la función. Si los parámetros no se acercan al caso base, eso le dará alguna idea de por qué no lo hace.

[[flow_of_execution]]
===== Flujo de Ejecución

Si no está seguro del flujo de ejecución en su programa, añada sentencias de impresión al principio de cada función con mensajes como “entrando a la función fun”, donde fun sea el nombre de la función.

Ahora, cuando ejecute el programa, se imprimirá una mensaje en cada función a medida que estas sean llamadas.

==== Cuando ejecuto el programa recibo una excepción.

Si algo sale mal durante la ejecución, Julia imprime un mensaje que incluye el nombre de la excepción, la línea del programa donde sucedió el problema y un trazado inverso.

El trazado inverso identifica la función que se está ejecutando y la función que la llamó, y luego la función que llamó a esa, y así sucesivamente. En otras palabras, traza la ruta de las llamadas a las funciones que le llevaron a donde se encuentra. También incluye los números de las líneas de su archivo dónde suceden todas esas llamadas.

El primer paso es examinar el lugar del programa donde ocurrió el error y ver si puede adivinar lo que sucedió. Estos son algunos de los errores en tiempo de ejecución más comunes:

ArgumentError:: 
Uno de los argumentos para llamar a una función no tiene la forma esperada.
(((ArgumentError)))

BoundsError::
Se está tratando de acceder a un elemento de un arreglo fuera de los límites de indexación.
(((BoundsError)))

DomainError::
El argumento de una función o constructor no pertenece al dominio válido.
(((DomainError)))((("error", "Core", "DomainError", see="DomainError")))

DivideError:: 
Se intentó dividir un entero por 0.
(((DivideError)))((("error", "Core", "DivideError", see="DivideError")))

EOFError:: 
No había más datos disponibles para leer desde un archivo o stream.
(((EOFError)))((("error", "Base", "EOFError", see="EOFError")))

InexactError::
No se puede convertir a un tipo.
(((InexactError)))((("error", "Core", "InexactError", see="InexactError")))

KeyError::
Se está tratando de acceder o eliminar un elemento inexistente de un objeto +AbstractDict+ (+Dict+) o +Set+.
(((KeyError)))

MethodError:: 
No existe un método con la especificación de tipo requerida en la función genérica dada. Alternativamente, no existe un método único más específico.
(((MethodError)))

OutOfMemoryError:: 
Una operación asignó demasiada memoria para que el sistema o el recolector de basura opere correctamente.
(((OutOfMemoryError)))((("error", "Core", "OutOfMemoryError", see="OutOfMemoryError")))

OverflowError:: 
El resultado de una expresión es demasiado grande para el tipo especificado y se produce un desbordamiento.
(((OverflowError)))((("error", "Core", "OverflowError", see="OverflowError")))

StackOverflowError:: 
Una llamada a función trata de usar más espacio que el que está disponible en la pila de llamadas. Esto generalmente ocurre cuando una llamada se repite infinitamente.
(((StackOverflowError)))

StringIndexError::
Se produjo un error al intentar acceder a un índice inválido de una cadena.
(((StringIndexError)))

SystemError::
Falló una llamada al sistema, y se muestra un mensaje de error.
(((SystemError)))

TypeError::
Error de aserción de tipo, o error producido al llamar a una función integrada con un tipo de argumento incorrecto.
(((TypeError)))

UndefVarError:: 
Un símbolo en el entorno (o ámbito) actual no está definido.
(((UndefVarError)))

==== Puse tantas sentencias de impresión que me ahogo en información

Uno de los problemas de usar sentencias print en la depuración es que puede terminar ahogado por tanta información. Hay dos formas de resolver esto: simplificar la salida o simplificar el programa.

Para simplificar la salida, puede eliminar o comentar (convertir en comentarios no evaluados cómo órdenes del programa) las sentencias print que no sean útiles o combinarlas. También puede dar a la salida un formato que la haga más comprensible.

Para simplificar el programa puede hacer varias cosas. Primero, puede reducir la escala del problema en el que está trabajando el programa. Por ejemplo, si está buscando algo en una lista, búsquelo en una lista pequeña. Si el programa acepta entradas del usuario, ingrese la entrada más simple que provoque el problema.

Segundo, puede "limpiar" el programa. Elimine el código muerto y reorganice el programa para hacerlo tan legible como sea posible. Por ejemplo, si sospecha que el problema está en una parte del programa con un anidamiento (nesting) muy profundo, pruebe a reescribir esa parte con una estructura más simple. Si sospecha de una función muy larga, trate de dividirla en funciones más pequeñas y pruébelas separadamente.
(((código muerto)))

Generalmente, el proceso de encontrar el caso de prueba mínimo lleva el usuario a encontrar el error. Si encuentra que un programa funciona en una situación pero no en otra, eso le dará una pista sobre lo que está sucediendo.

De forma parecida, reescribir una porción de código puede ayudarle a encontrar errores sutiles. Si realiza un cambio que cree que no debería afectar el programa, pero lo hace, entonces eso puede darle una pista.


=== Errores Semánticos 

En cierto modo, los errores semánticos son los más difíciles de corregir, ya que el intérprete no entrega información sobre lo que está mal. Sólo usted sabe lo que se supone que debe hacer el programa.

El primer paso es hacer una conexión entre el código y el comportamiento que está viendo. Necesita una hipótesis sobre lo que realmente está haciendo el programa. Una de las dificultades que nos encontramos es la alta velocidad de los computadores.

A menudo sería deseable ralentizar el programa a una velocidad humana. El tiempo que lleva colocar unas sentencias print en los lugares adecuados suele ser menor que el que lleva configurar un depurador, poner y quitar puntos de interrupción y “hacer avanzar” al programa hasta donde se produce el error.


==== Mi programa no funciona

Debería hacerse estas preguntas:

* ¿Hay algo que se supone que debería hacer el programa pero que no sucede? Busque la sección del código que realiza esa función y asegúrese de que se ejecuta cuando debería.

* ¿Ocurre algo que no debería? Busque el código en su programa que realiza esa función y vea si se ejecuta cuando no debe.

* ¿Hay alguna sección del código que cause un efecto que no esperaba? Asegúrese de que entiende el código en cuestión, especialmente si incluye funciones o métodos de otros módulos de Julia. Lea la documentación de las funciones a las que llama. Pruébelas escribiendo casos de prueba simples y comprobando sus resultados.

Para programar necesitará tener un modelo mental de cómo funcionan los programas. Si escribe un programa que no hace lo que esperaba de él, muchas veces el problema no estará en el programa, sino en su modelo mental.
(((modelo mental)))

La mejor manera de corregir su modelo mental es dividiendo el programa en sus componentes (normalmente en funciones y métodos) y probando cada componente de forma independiente. Una vez que encuentre la discrepancia entre su modelo y la realidad, podrá solucionar el problema.

Por supuesto, debería ir haciendo y probando componentes a medida que desarrolla el programa. Si encuentra un problema, sólo habría que revisar una pequeña cantidad de código nuevo.

==== Tengo una expresión grande y peliaguda y no hace lo que espero.

Está bien escribir expresiones complejas mientras sean legibles, pero pueden ser difíciles de depurar. Suele ser una buena idea dividir una expresión compleja en una serie de asignaciones de variables temporales.

Por ejamplo:

[source,julia]
----
agregarcarta(juego.manos[i], sacarcarta(juego.manos[encontrarvecino(juego, i)]))
----

Puede reescribirse como:

[source,julia]
----
vecino = encontrarvecino(juego, i)
cartaseleccionada = sacarcarta(juego.manos[vecino])
agregarcarta(juego.manos[i], cartaseleccionada)
----

La versión explícita es más fácil de leer porque los nombres de variables nos entregan documentación adicional y es más fácil de depurar porque se pueden comprobar los tipos de las variables intermedias y mostrar sus valores.

Otro problema que puede suceder con las expresiones grandes es que el orden de evaluación puede no ser el que usted esperaba. Por ejemplo, si está traduciendo la expresión latexmath:[\frac{x}{2\pi}] a Julia, podría escribir:

[source,julia]
----
y = x / 2 * π
----

Esto no es correcto, ya que la multiplicación y la división tienen la misma precedencia, y se evalúan de izquierda a derecha. De este modo, la anterior expresión calcula latexmath:[\frac{x\pi}{2}].

Una buena forma de depurar expresiones es añadir paréntesis para que sea explícito el orden de evaluación:

[source,julia]
----
y = x / (2 * π)
----

Siempre que no esté seguro del orden de evaluación, utilice paréntesis. El programa no sólo será correcto (en el sentido de que hace lo que usted quiere), sino que además será más legible para otras personas que no hayan memorizado las reglas de precedencia y que lean el código.

==== Tengo una función que no devuelve lo que esperaba.

Si tiene una sentencia return con una expresión compleja, no tendrá la oportunidad de imprimir el valor de retorno antes de retornar. De nuevo, puede usar una variable temporal. Por ejemplo, en lugar de:
(((variable temporal)))

[source,julia]
----
return sacarpares(juego.manos[i])
----

podría escribir:

[source,julia]
----
contar = sacarpares(juego.manos[i])
return contar
----

Ahora ya tiene la oportunidad de mostrar el valor de +count+ antes de retornar.

==== Estoy atascado de verdad y necesito ayuda.

Primero, intente alejarse del computador durante unos minutos. Trabajar con un computador puede provocar estos efectos: 

* Frustración y/o furia.

* Creencias supersticiosas (“el computador me odia”) y pensamiento mágico (“el programa sólo funciona cuando me pongo la gorra hacia atrás”).

* Programar dando palos de ciego (el empeño de programar escribiendo todos los programas posibles y eligiendo el que hace lo correcto).

Si se encuentra afectado por alguno de estos síntomas, levántese y dé un paseo. Cuando esté calmado, piense en el programa. ¿Qué es lo que hace? ¿Cuáles pueden ser las causas de tal comportamiento? ¿Cuándo fue la última vez que su programa funcionaba y qué fue lo siguiente que hizo?

A veces lleva tiempo encontrar un error. Muchas veces encontramos errores cuando estamos lejos del computador y divagamos. Algunos de los mejores lugares para encontrar errores son los trenes, las duchas y la cama, justo antes de quedarse dormido.

==== No, de verdad necesito ayuda

Sucede. Incluso los mejores programadores se atascan de vez en cuando. A veces trabaja durante tanto tiempo en un programa que no puede ver el error. Lo que necesita es un par de ojos nuevos.

Antes de llamar a alguien, asegúrese de estar preparado. Su programa debería ser tan simple como sea posible, y usted debería estar trabajando con la entrada mínima que provoca el error. Debería tener sentencias print en los lugares adecuados (y lo que dicen debería ser comprensible) y debería también entender el problema lo bastante bien como para describirlo de manera concisa.

Cuando llame a alguien para que le ayude, asegúrese de darle la información que necesitan:

* Si hay un mensaje de error, ¿cuál es y qué parte del programa señala?

* ¿Qué fue lo último que hizo antes de que apareciera el error? ¿Cuáles son las últimas líneas de código que escribió o cuál es el nuevo caso de prueba que falla?

* ¿Qué ha intentado hasta ahora y qué ha averiguado?

Cuando encuentre el error, tómese un momento para pensar acerca de lo que podría haber hecho para encontrarlo más rápido. La siguiente vez que vea algo parecido, será capaz de encontrar el error antes.

Recuerde, el objetivo no es solo hacer que el programa funcione. El objetivo es aprender cómo hacer funcionar el programa.
