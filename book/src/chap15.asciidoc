[[chap15]]
== Estructuras y Objetos

A esta altura, ya debe saber cómo usar funciones para tener un código más organizado, y cómo usar los tipos integrados de Julia para organizar sus datos. El siguiente paso es aprender a construir sus propios tipos para organizar tanto el código como los datos. Este es un gran tema, y por lo tanto tomará un par de capítulos abarcar todo.

=== Tipos Compuestos

Hemos utilizado muchos tipos integrados en Julia; ahora vamos a definir un nuevo tipo. A modo de ejemplo, crearemos un tipo llamado +Punto+ que represente un punto en un espacio bidimensional.
(((tipo)))(((Punto)))((("tipo", "definida por el programador", "Punto", see="Punto")))

En notación matemática, los puntos suelen escribirse entre paréntesis con una coma que separa las coordenadas. Por ejemplo, latexmath:[\left(0,0\right)] representa el origen, y latexmath:[\left(x,y\right)] representa el punto localizado latexmath:[x] unidades a la derecha y latexmath:[y] unidades hacia arriba del origen.

Hay varias formas en que podríamos representar puntos del plano cartesiano en Julia:

* Podríamos almacenar las coordenadas por separado en dos variables, +x+ e +y+.

* Podríamos almacenar las coordenadas como elementos de un arreglo o tupla.

* Podríamos crear un nuevo tipo para representar puntos como objetos.

Crear un nuevo tipo exige un poco más de esfuerzo que las otras opciones, pero tiene algunas ventajas que veremos pronto.

Un _tipo compuesto_ definido por el programador también se denomina _estructura_ (struct en inglés). La definición de +estructura+ de un punto se ve así:
(((tipo compuesto)))(((struct)))((("palabra reservada", "struct", see="struct")))(((end)))

[source,@julia-setup chap15]
----
struct Punto
    x
    y
end
----

El encabezado indica que la nueva estructura se llama +Punto+. El cuerpo define los _atributos_ o _campos_ de la estructura. La estructura de +Punto+ tiene dos campos: +x+ e +y+.
(((atributo)))((("campo", see="atributo")))

Una estructura es como una fábrica que crea objetos. Para crear un punto, debes llamar a +Punto+ como si fuera una función que tiene como argumentos los valores de los campos. Cuando +Punto+ se usa como una función, se llama _constructor_.
(((constructor)))

[source,@julia-repl-test chap15]
----
julia> p = Punto(3.0, 4.0)
Punto(3.0, 4.0)
----

El valor de retorno es una referencia a un objeto +Punto+, el cual asignamos a +p+.
(((referencia)))

La creación de un nuevo objeto se llama _instanciación_, y el objeto creado es una _instancia_ del tipo.
(((instanciación)))(((instancia)))

Cuando imprimes una instancia, Julia te dice a qué tipo pertenece y cuáles son los valores de los atributos.

Cada objeto es una instancia de algún tipo, por lo que "objeto" e "instancia" son intercambiables. Pero en este capítulo se utiliza "instancia" para indicar que hablamos de un tipo definido por el programador.

Un diagrama de estado que muestra un objeto y sus atributos se denomina _diagrama de objeto_; ver <<fig15-1>>.
(((diagrama de objeto)))((("diagrama", "objeto", see="diagrama de objeto")))

[[fig15-1]]
.Diagrama de objeto
image::images/fig151.svg[]


=== Las Estructuras son Inmutables

Puede obtener los valores de los campos utilizando la notación +.+:
(((.)))((("notación de punto", see=".")))

[source,@julia-repl-test chap15]
----
julia> x = p.x
3.0
julia> p.y
4.0
----

La expresión +p.x+ significa: "Ve al objeto al que se apunta +p+ y obtén el valor de +x+". En el ejemplo, asignamos ese valor a una variable llamada +x+. No hay conflicto entre la variable +x+ y el atributo +x+.

Puede usar esa notación de punto como parte de cualquier expresión. Por ejemplo:

[source,@julia-repl-test chap15]
----
julia> distancia = sqrt(p.x^2 + p.y^2)
5.0
----

Sin embargo, las estructuras son inmutables por defecto, después de la construcción los campos no pueden cambiar su valor:
(((immutable)))

[source,@julia-repl-test chap15]
----
julia> p.y = 1.0
ERROR: setfield! immutable struct of type Punto cannot be changed
----

Esto puede parecer extraño al principio, pero tiene varias ventajas:

* Puede ser más eficiente.

* No es posible violar las invariantes (requisitos que deberían cumplirse en todos los objetos, en todo momento) de los constructores de un tipo compuesto (ver <<constructor>>).

* El código que usa objetos inmutables puede ser más fácil de entender.


=== Estructuras Mutables

De ser necesario, se pueden declarar tipos compuestos mutables con la palabra reservada +mutable struct+. A continuación se muestra la definición de un punto mutable:
(((tipo compuesto mutable)))(((mutable struct)))((("palabra reservada", "mutable struct", see="mutable struct")))(((MPunto)))((("tipo", "definida por el programador", "MPunto", see="MPunto")))

[source,@julia-setup chap15]
----
mutable struct MPunto
    x
    y
end
----

Puede asignar valores a una instancia de una estructura mutable utilizando notación de punto (.):
(((.)))

[source,@julia-repl-test chap15]
----
julia> blanco = MPunto(0.0, 0.0)
MPunto(0.0, 0.0)
julia> blanco.x = 3.0
3.0
julia> blanco.y = 4.0
4.0
----


=== Rectángulos

A veces, decidir cuáles deberían ser los campos de un objeto es fácil, pero en otros casos no. Por ejemplo, imagine que queremos un tipo que represente un rectángulo. ¿Qué campos usarías para especificar la ubicación y el tamaño de un rectángulo? Puedes ignorar el ángulo. Para simplificar las cosas, supongamos que el rectángulo es vertical u horizontal.

Hay al menos dos posibilidades:

* Puede especificar una esquina del rectángulo (o el centro), el ancho y la altura.

* Podría especificar dos esquinas opuestas.

Es difícil decir que una opción es mejor que la otra, por lo que implementaremos la primera, a modo de ejemplo.
(((Rectangulo)))((("tipo", "definida por el programador", "Rectangulo", see="Rectangulo")))

[source,@julia-setup chap15]
----
"""
Representa un rectángulo.

atributos: ancho, alto, esquina. 
"""
struct Rectangulo
    ancho
    alto
    esquina
end
----

El texto escrito entre comillas triples es llamado cadena de documentación (o docstring), y permite documentar. La documentación es el acto de comentar convenientemente cada una de las partes que tiene el programa.

En este ejemplo, la cadena de documentación (o docstring) enumera los atributos. Los atributos ancho y alto son números, y esquina es un objeto +Punto+ que especifica la esquina inferior izquierda.
(((docstring)))

Para representar un rectángulo, debe crear una instancia del tipo +Rectangulo+:

[source,@julia-repl-test chap15]
----
julia> origen = MPunto(0.0, 0.0)
MPunto(0.0, 0.0)
julia> caja = Rectangulo(100.0, 200.0, origen)
Rectangulo(100.0, 200.0, MPunto(0.0, 0.0))
----

<<fig15-2>> muestra el estado de este objeto. Un objeto es _embebido_ si es atributo de otro objeto. Debido a que el atributo +esquina+ se refiere a un objeto mutable, se dibuja fuera del objeto +Rectangulo+.
(((embebido)))(((diagrama de objeto)))

[[fig15-2]]
.Diagrama de objeto
image::images/fig152.svg[]


=== Instancias como Argumentos

Podemos pasar una instancia como argumento de la manera habitual. Por ejemplo:
(((imprimirpunto)))((("función", "definida por el programador", "imprimirpunto", see="imprimirpunto")))

[source,@julia-setup chap15]
----
function imprimirpunto(p)
    println("($(p.x), $(p.y))")
end
----

+imprimirpunto+ toma un +Punto+ como argumento y lo muestra en notación matemática. Puede llamar a imprimirpunto con un argumento +p+:

[source,@julia-repl-test chap15]
----
julia> imprimirpunto(blanco)
(3.0, 4.0)
----

==== Ejercicio 15-1

Escriba una función llamada +distanciaentrepuntos+ que tome dos puntos como argumentos y devuelva la distancia entre ellos.
(((distanciaentrepuntos)))((("función", "definida por el programador", "distanciaentrepuntos", see="distanciaentrepuntos")))

Si un objeto de estructura mutable se pasa a una función como argumento, la función puede modificar los campos del objeto. Por ejemplo, +moverpunto!+ toma un objeto mutable +Punto+ y dos números, +dx+ y +dy+, los cuales suma a los atributos +x+ e +y+ de +Punto+, respectivamente:
(((moverpunto!)))((("función", "definida por el programador", "moverpunto!", see="moverpunto!")))

[source,@julia-setup chap15]
----
function moverpunto!(p, dx, dy)
    p.x += dx
    p.y += dy
    nothing
end
----

Aquí hay un ejemplo que muestra como funciona:

[source,@julia-repl-test chap15]
----
julia> origen = MPunto(0.0, 0.0)
MPunto(0.0, 0.0)
julia> moverpunto!(origen, 1.0, 2.0)

julia> origen
MPunto(1.0, 2.0)
----

Dentro de la función, +p+ es un alias de +origen+, por lo que cuando la función modifica +p+, +origen+ también cambia.
(((alias)))

Al pasar un objeto inmutable +Punto+ a +moverpunto!+ se produce un error:

[source,@julia-repl-test chap15]
----
julia> moverpunto!(p, 1.0, 2.0)
ERROR: setfield! immutable struct of type Punto cannot be changed
----

Sin embargo, puede modificar el valor de un atributo mutable de un objeto inmutable. Por ejemplo, +moverrectangulo!+ tiene como argumentos un objeto +Rectangulo+ y dos números, +dx+ y +dy+. Esta función usa +moverpunto!+ para mover la esquina del rectángulo:

[source,@julia-setup chap15]
----
function moverrectangulo!(rect, dx, dy)
  moverpunto!(rect.esquina, dx, dy)
end
----

Ahora +p+ en +moverpunto!+ es un alias para +rect.esquina+, por lo que cuando +p+ se modifica, +rect.esquina+ también cambia:

Now +p+ in +movepoint!+ is an alias for +rect.corner+, so when +p+ is modified, +rect.corner+ changes also:

[source,@julia-repl-test chap15]
----
julia> caja
Rectangulo(100.0, 200.0, MPunto(0.0, 0.0))
julia> moverrectangulo!(caja, 1.0, 2.0)

julia> caja
Rectangulo(100.0, 200.0, MPunto(1.0, 2.0))
----

[WARNING]
====
No puede reasignar un atributo mutable de un objeto inmutable:
(((reasignación)))

[source,@julia-repl-test chap15]
----
julia> caja.esquina = MPunto(1.0, 2.0)
ERROR: setfield! immutable struct of type Rectangulo cannot be changed
----
====

=== Instancias como Valores de Retorno

Las funciones pueden devolver instancias. Por ejemplo, +encontrarcentro+ toma un +Rectangulo+ como argumento y devuelve un +Punto+ que contiene las coordenadas del centro del rectángulo:
(((encontrarcentro)))((("función", "definida por el programador", "encontrarcentro", see="encontrarcentro")))

[source,@julia-setup chap15]
----
function encontrarcentro(rect)
    Punto(rect.esquina.x + rect.ancho / 2, rect.esquina.y + rect.alto / 2)
end
----

La expresión +rect.corner.x+ significa, “Ve al objeto al que +rect+ apunta y seleccione el atributo llamado +esquina+; luego vaya a ese objeto y seleccione el atributo llamado +x+".

A continución vemos un ejemplo que toma +caja+ como argumento y asigna el +Punto+ resultante a +centro+:

[source,@julia-repl-test chap15]
----
julia> centro = encontrarcentro(caja)
Punto(51.0, 102.0)
----


=== Copiado

El uso de alias puede hacer que un programa sea difícil de leer, ya que los cambios hechos en un lugar pueden tener efectos inesperados en otro lugar. Es difícil estar al tanto de todas las variables a las que puede apuntar un objeto dado.
(((alias)))

Copiar un objeto es, muchas veces, una alternativa a la creación de un alias. Julia provee una función llamada copy que puede duplicar cualquier objeto:
(((copiar)))(((deepcopy)))((("función", "Base", "deepcopy", see="deepcopy")))(((deep copy)))

[source,@julia-repl-test chap15]
----
julia> p1 = MPunto(3.0, 4.0)
MPunto(3.0, 4.0)
julia> p2 = deepcopy(p1)
MPunto(3.0, 4.0)
julia> p1 ≡ p2
false
julia> p1 == p2
false
----

El operador +≡+ indica que +p1+ y +p2+ no son el mismo objeto, lo cual es esperable. Lo que no es del todo esperable es que +==+ no devuelva +true+, aunque estos puntos contengan los mismos datos. Resulta que para los objetos mutables, el comportamiento predeterminado del operador +==+ es el mismo que el operador +===+, es decir, comprueba la identidad del objeto, no la equivalencia del objeto. Esto se debe a que Julia no sabe qué debería considerarse equivalente para los tipos compuestos mutables. Al menos no todavía.
(((==)))(((≡)))

==== Ejercicio 15-2

Cree una instancia de +Punto+, haga una copia y verifique la equivalencia y la igualdad de ambas. El resultado puede sorprenderlo, pero explica por qué el alias no es un problema para un objeto inmutable.


=== Depuración

Al comenzar a trabajar con objetos, es probable que encuentre algunas excepciones nuevas. Si intenta acceder a un campo que no existe, obtendrá:
(((depuración)))

[source,@julia-repl-test chap15]
----
julia> p = Punto(3.0, 4.0)
Punto(3.0, 4.0)
julia> p.z = 1.0
ERROR: type Punto has no field z
----

Si no está seguro del tipo de un objeto, puede saberlo de la siguiente manera:
(((typeof)))

[source,@julia-repl-test chap15]
----
julia> typeof(p)
Punto
----

También puede usar +isa+ para verificar si un objeto es una instancia de un tipo específico:
(((isa)))((("operador", "Base", "isa", see="isa")))

[source,@julia-repl-test chap15]
----
julia> p isa Punto
true
----

Si no está seguro de si un objeto tiene un atributo particular, puede usar la función +fieldnames+:
(((deepcopy)))((("función", "Base", "deepcopy", see="deepcopy")))

[source,@julia-repl-test chap15]
----
julia> fieldnames(Punto)
(:x, :y)
----

o la función +isdefined+:
(((isdefined)))((("función", "Base", "isdefined", see="isdefined")))

[source,@julia-repl-test chap15]
----
julia> isdefined(p, :x)
true
julia> isdefined(p, :z)
false
----

El primer argumento puede ser cualquier objeto; el segundo argumento es el símbolo +:+ seguido del nombre del atributo.
(((:)))(((Symbol)))((("tipo", "Base", "Symbol", see="Symbol")))

=== Glosario

estructura::
Un tipo compuesto.
(((struct)))

constructor::
Una función con el mismo nombre que un tipo, que crea instancias de este tipo.
(((constructor)))

instancia::
Un objeto que pertenece a un tipo.
(((instancia)))

instanciar::
Crear un nuevo objeto.
(((instanciar)))

atributo o campo::
Un valor con nombre asociado un objeto.
(((atributo)))

objeto embebido::
Un objeto que se almacena como atributo de otro objeto.
(((objeto embebido)))

deep copy o copia profunda::
Copiar el contenido de un objeto, y cualquier objeto embebido en él, y a su vez, cualquier objeto embebido en ellos, y así sucesivamente. Implementado por la función +deepcopy+.
(((deep copy)))

diagrama de objeto::
Un diagrama que muestra objetos, sus atributos y valores de atributos.
(((diagrama de objeto)))


=== Ejercicios

[[ex15-1]]
==== Ejercicio 15-3

. Escriba una definición de un tipo llamado +Circulo+, que tenga atributos +centro+ y +radio+, donde +centro+ es un objeto +Punto+ y +radio+ es un número.
(((Circulo)))((("tipo", "definida por el programador", "Circulo", see="Circulo")))

. Crear instancia de un objeto circulo, que represente a un círculo con centro en latexmath:[\left(150, 100\right)] y radio 75.

. Escriba una función llamada +puntoencirculo+ que tome un objeto +Circulo+ y un objeto +Punto+, y devuelva +true+ si el punto se encuentra dentro o en el límite del círculo.
(((puntoencirculo)))((("función", "definida por el programador", "puntoencirculo", see="puntoencirculo")))

. Escriba una función llamada +rectencirculo+ que tome un objeto +Circulo+ y un objeto +Rectangulo+ y devuelva +true+ si el rectángulo se encuentra completamente dentro o en el límite del círculo.
(((rectencirculo)))((("función", "definida por el programador", "rectencirculo", see="rectencirculo")))

. Escriba una función llamada +sobreposicionrectcirc+ que tome un objeto +Circulo+ y un objeto +Rectangulo+ y devuelva +true+ si alguna de las esquinas del rectángulo cae dentro del círculo. Una versión más desafiante es escribir una función que devuelva +true+ si alguna parte del rectángulo (no necesariamente una esquina) cae dentro del círculo.
(((sobreposicionrectcirc)))((("función", "definida por el programador", "sobreposicionrectcirc", see="sobreposicionrectcirc")))

[[ex15-2]]
==== Ejercicio 15-4

. Escriba una función llamada +dibujarrect+ que tome como argumentos un objeto turtle y un objeto +Rectángulo+, y use turtle para dibujar el rectángulo. Consulte el Capítulo 4 para ver ejemplos que usen objetos +Turtle+.
(((dibujarrect)))((("función", "definida por el programador", "dibujarrect", see="dibujarrect")))

. Escriba una función llamada +dibujarcirculo+ que tome como argumentos un objeto +Turtle+ y un objeto +Circulo+, y dibuje el círculo.
(((dibujarcirculo)))((("función", "definida por el programador", "dibujarcirculo", see="dibujarcirculo")))

