[[chap05]]
== Condicionales y recursividad

El tema principal de este capítulo es la sentencia +if+, la cual permite ejecutar diferentes acciones dependiendo del estado del programa. Inicialmente se presentan dos nuevos operadores: división entera de tipo piso y módulo.


=== División entera de tipo piso y Módulo

El operador _división entera de tipo piso_, +÷+ (*+\div TAB+*), divide dos números y redondea hacia abajo el resultado. Por ejemplo, suponga que la duración de una película es de 105 minutos. Es posible que desee saber la duración en horas. La división convencional devuelve un número de punto flotante:
(((operador de división entera de tipo piso))) ((("operador", "Base", "÷", see = "operador división entera de tipo piso"))) ((("÷", see="operador división entera de tipo piso")))

[source,@julia-repl-test chap05]
----
julia> minutos = 105
105
julia> minutos / 60
1.75
----

No obstante, las horas no se suelen escribir con decimales. La división entera de tipo piso devuelve el número entero de horas, redondeado hacia abajo:

[source,@julia-repl-test chap05]
----
julia> horas = minutos ÷ 60
1
----

Para obtener el resto de la división, se puede restar una hora (en minutos) a la duración total de la película:

[source,@julia-repl-test chap05]
----
julia> resto = minutos - horas * 60
45
----

Otra alternativa es usar el _operador módulo_, +%+, que divide dos números y devuelve el resto.
(((operador módulo)))((("operador", "Base", "%", see="operador módulo")))((("%", see="operador módulo")))

[source,@julia-repl-test chap05]
----
julia> resto = minutos % 60
45
----

[TIP]
====
El operador módulo es más útil de lo que parece. Permite verificar, por ejemplo, si un número es divisible por otro: si +x%y+ es cero, entonces +x+ es divisible por +y+.

Además, puede extraer el (o los) dígito(s) más a la derecha de un número. Por ejemplo, +x%10+ devuelve el dígito más a la derecha de un entero +x+ (en base 10). Del mismo modo, +x%100+ devuelve los dos últimos dígitos.

====

=== Expresiones booleanas

Una _expresión booleana_ es una expresión que es verdadera o falsa. Los siguientes ejemplos usan el operador +==+, que compara dos operandos, y devuelve el valor +true+ (verdadero en español) si son iguales, y el valor +false+ (falso) de lo contrario.
(((expresión booleana)))(((true)))(((false)))

[source,@julia-repl-test]
----
julia> 5 == 5
true
julia> 5 == 6
false
----

+true+ y +false+ son valores especiales que pertenecen al tipo +Bool+, no son cadenas:
(((Bool)))((("tipo", "Base", "Bool", see="Bool")))

[source,@julia-repl-test]
----
julia> typeof(true)
Bool
julia> typeof(false)
Bool
----

El operador +==+ es un operador relacional. El resto de operadores relacionales son:
(((operador relacional)))(((==)))((("operador", "Base", "==", see="==")))

[source,julia]
----
      x != y               # x no es igual a y
      x ≠ y                # (\ne TAB)
      x > y                # x es mayor que y
      x < y                # x es menor que y
      x >= y               # x es mayor o igual que y
      x ≥ y                # (\ge TAB)
      x <= y               # x es menor o igual que y
      x ≤ y                # (\le TAB)
----

[WARNING]
====
Aunque estas operaciones probablemente le sean familiares, los símbolos de Julia son diferentes de los símbolos matemáticos. Un error común es usar un solo signo igual (+=+) en vez de un doble signo igual (+==+. Recuerde que +=+ es un operador de asignación y +==+ es un operador relacional. No existe +=<+ o +pass:[=>]+.
(((≠)))((("operador", "Base", "≠", see="≠")))((("!=", see="≠")))((("operador", "Base", "!=", see="≠")))(((>)))((("operador", "Base", ">", see=">")))(((<)))((("operador", "Base", "<", see="<")))(((≥)))((("operador", "Base", "≥", see="≥")))(((">=", see="≥")))((("operador", "Base", ">=", see="≥")))(((≤)))((("operador", "Base", "≤", see="≤")))((("pass:[&lt;=]", see="≤")))((("operador", "Base", "pass:[&lt;=]", see="≤")))
====


=== Operadores Lógicos

Hay tres operadores lógicos: +&&+ (y), +||+ (o) y +!+ (no). La semántica (significado) de estos operadores es similar a su significado en español. Por ejemplo, +x>0 && x<10+ es verdadero solo si +x+ es mayor que +0+ _y_ menor que +10+.
(((operador lógico)))(((&&)))(((||)))(((!)))

+n%2==0 || n%3 == 0+ es verdadero si _una o ambas_ condiciones son verdaderas, es decir, si el número es divisible por 2 _o_ por 3.

Tanto +&&+ como +||+ se asocian en primer lugar con el objeto a su derecha, pero +&&+ tiene preferencia por sobre +||+.

Finalmente, el operador +!+ niega una expresión booleana, entonces +!(x>y)+ es verdadero si +x>y+ es falso, es decir, si +x+ es menor o igual que +y+.

=== Ejecución Condicional

Para escribir programas útiles, generalmente se necesita verificar condiciones y cambiar el comportamiento del programa acorde a ellas. Las sentencias condicionales permiten llevar esto a cabo. La forma más simple es la sentencia +if+ ("si" en inglés):
(((sentencia condicional)))(((if)))((("palabra reservada", "if", see="if")))(((sentencia if)))((("sentencia", "if", see="sentencia if")))

[source,julia]
----
if x > 0
    println("x es positivo")
end
----

La expresión booleana después de +if+ se llama _condición_. Si es verdadera, se ejecuta la instrucción con sangría. Si no, nada ocurre.
(((condition)))

Las sentencias +if+ tienen la misma estructura que las definiciones de función: un encabezado seguido del cuerpo, terminado con la palabra reservada +end+ (en español "fin"). Las sentencias como esta se denominan _sentencias compuestas_.
(((sentencia compuesta)))(((end)))

No hay límite en el número de sentencias que pueden aparecer en el cuerpo. A veces es útil tener un cuerpo sin sentencias (por lo general, como un marcador de posición para el código que aún no se ha escrito).

[source,julia]
----
if x < 0
    # TODO: se necesita realizar alguna acción con los valores negativos!
end
----


=== Ejecución alternativa

Una segunda forma de la sentencia +if+ es la "ejecución alternativa", en la que hay dos posibilidades y la condición determina cuál se ejecuta. La sintaxis se ve así:
(((ejecución alternativa)))(((else)))((("keyword", "else", see="else")))

[source,julia]
----
if x % 2 == 0
    println("x es par")
else
    println("x es impar")
end
----
Si el resto de +x+ dividido por 2 es 0, entonces +x+ es par y el programa muestra un mensaje acorde. Si la condición es falsa, se ejecuta el segundo conjunto de sentencias. Como la condición debe ser verdadera o falsa, se ejecutará exactamente una de las alternativas. Las alternativas se llaman _ramas_, porque son ramas en el flujo de ejecución.
(((rama)))

=== Condicionales encadenadas

A veces hay más de dos posibilidades y se necesitan más de dos ramas. Una manera de expresar este cómputo es a través de una _condicional encadenada_:
(((condicional encadenada)))(((elseif)))((("palabra reservada", "elseif", see="elseif")))

[source,julia]
----
if x < y
    println("x es menor que y")
elseif x > y
    println("x es mayor que y")
else
    println("x e y son iguales")
end
----

De nuevo, sólo se ejecutará una rama. No hay límite al número de sentencias +elseif+. Si hay una sentencia +else+, debe estar al final (aunque no es necesario que esté).

[source,julia]
----
if alternativa == "a"
    dibujar_a()
elseif alternativa == "b"
    dibujar_b()
elseif alternativa == "c"
    dibujar_c()
end
----

Cada condición se comprueba en orden. Si la primera es falsa, se comprueba la siguiente, y así se sigue con las demás. Si una de ellas es verdadera, se ejecuta la rama correspondiente y la sentencia se termina. Si es verdadera más de una condición, sólo se ejecuta la primera rama verdadera.

=== Condicionales anidadas

Una condicional puede estar anidada ("nested" en inglés) dentro de otra. Podríamos haber escrito el ejemplo de la sección anterior de la siguiente manera:
(((condicional anidada)))

[source,julia]
----
if x == y
    println("x e y son iguales")
else
    if x < y
        println("x es menor a y")
    else
        println("x es mayor a y")
    end
end
----

La condicional externa contiene dos ramas. La primera rama contiene una sentencia simple. La segunda rama contiene otra sentencia +if+, que tiene dos ramas propias. Estas dos ramas son ambas sentencias simples, aunque podrían ser sentencias condicionales.

Aunque la sangría no obligatoria de las sentencias hace evidente su estructura, las condicionales anidadas muy pronto se vuelven difíciles de leer. Se recomienda evitarlas cuando pueda.
(((sangría)))

Los operadores lógicos a menudo proporcionan una forma de simplificar las sentencias condicionales anidadas. Por ejemplo, es posible reescribir el siguiente código usando un solo condicional:

[source,julia]
----
if 0 < x
    if x < 10
        println("x es un número positivo de un solo dígito.")
    end
end
----

La sentencia +print+ sólo se ejecuta si conseguimos superar ambas condicionales, de modo que se puede obtener el mismo efecto con el operador +&&+:

[source,julia]
----
if 0 < x && x < 10
    println("x es un número positivo de un solo dígito.")
end
----

Para este tipo de condición, Julia proporciona una sintaxis más concisa:

[source,julia]
----
if 0 < x < 10
    println("x es un número positivo de un solo dígito.")
end
----


[[recursividad]]
=== Recursividad

Está permitido que una función llame a otra y también que una función se llame a sí misma. Puede no parecer útil, pero sí lo es, como puede verse en la siguiente función:
(((cuenta regresiva)))((("función", "definida por el programador", "cuenta regresiva", see="cuenta regresiva")))

[source,@julia-setup chap05]
----
function cuentaregresiva(n)
    if n ≤ 0
        println("Despegue!")
    else
        print(n, " ")
        cuentaregresiva(n-1)
    end
end
----

Si +n+ es 0 o negativo, muestra la palabra +"Despegue!"+. En otro caso, muestra el valor +n+ y luego llama a la función +cuentaregresiva+, pasándole +n-1+ como argumento.

¿Qué sucede si llamamos a una función como esta?

[source,@julia-repl-test chap05]
----
julia> cuentaregresiva(3)
3 2 1 Despegue!
----

La ejecución de +cuentaregresiva+ empieza con +n = 3+, y como +n+ es mayor que 0, muestra el valor 3, y luego se llama a sí misma...

pass:[&#8193;]La ejecución de +cuentaregresiva+ empieza con +n = 2+, y como +n+ es mayor que 0, pass:[<br/>&#8193;&#8193;]muestra el valor 2, y luego se llama a sí misma...

pass:[&#8193;&#8193;]La ejecución de +cuentaregresiva+ empieza con +n = 1+, y como +n+ es mayor que 0, pass:[<br/>&#8193;&#8193;&#8193;]muestra el valor 1, y luego se llama a sí misma...

pass:[&#8193;&#8193;&#8193;]La ejecución de +cuentaregresiva+ empieza con +n = 0+, y como +n+ no es mayor que 0, pass:[<br/>&#8193;&#8193;&#8193;&#8193;]muestra la palabra +"Despegue!"+ y luego termina.

pass:[&#8193;&#8193;]La +cuentaregresiva+ cuyo argumento es +n = 1+ termina.

pass:[&#8193;]La +cuentaregresiva+ cuyo argumento es +n = 2+ termina.

La +cuentaregresiva+ cuyo argumento es +n = 3+ termina.

Y volvemos a +Main+.

Una función que se llama a sí misma es una función _recursiva_ y el proceso de ejecución se llama _recursividad_.
(((función recursiva)))(((recursividad)))

Como otro ejemplo, se puede escribir una función que imprima una cadena latexmath:[n] veces.
(((printn)))((("función", "definida por el programador", "printn", see="printn")))

[source,julia]
----
function printn(s, n)
    if n ≤ 0
        return
    end
    println(s)
    printn(s, n-1)
end
----

Si +n pass:[&lt;]= 0+, se usa la sentencia +return+ para salir de la función. El flujo de la ejecución vuelve inmediatamente a la sentencia de llamada a función y no se ejecutan las líneas restantes de la función.
(((return)))((("palabra reservada", "return", see="return")))(((sentencia return)))((("sentencia", "return", see="return statement")))

El resto de la función es similar a +cuenta regresiva+: muestra +s+ y luego se llama a sí misma para mostrar +s+ latexmath:[n-1] veces más de modo que el número de lineas mostradas es latexmath:[1 + (n - 1)], es decir latexmath:[n].

Para ejemplos simples como este, es más fácil usar un ciclo +for+. Se mostrarán ejemplos que son difíciles de escribir con un ciclo +for+ y fáciles de escribir con recursividad.

=== Diagramas de pila para funciones recursivas

En <<stack_diagrams>> se usó un diagrama de pila para representar el estado de un programa durante una llamada de función. El mismo tipo de diagrama puede ser de utilidad para interpretar una función recursiva.
(((diagrama de pila)))

Cada vez que se llama a una función, Julia crea un marco que contiene las variables locales de la función y los parámetros. En una función recursiva, puede haber más de un marco en el diagrama de pila al mismo tiempo.
(((marco)))

[[fig05-1]]
.Diagrama de pila
image::images/fig51.svg[]

<<fig05-1>> muestra un diagrama de pila para +cuentaregresiva+ utilizando +n=3+.

Como siempre, la parte superior de la pila es el marco para +Main+. Está vacío pues no se crearon variables en +Main+ ni tampoco se pasaron argumentos.

Los cuatro marcos de +cuentaregresiva+ tienen diferentes valores del parámetro +n+. La parte inferior del diagrama de pila, donde +n = 0+, es llamado _caso base_. No hace una llamada recursiva, así que no hay más marcos.
(((caso base)))

==== Ejercicio 5-1

Como ejercicio, dibuje un diagrama de pila para +printn+, llamada con +s = "Hola"+ y +n = 2+. Luego escriba una función llamada +hacer_n+, que tome como argumentos una función y un número +n+, y que luego llame a la función dada latexmath:[n] veces.

=== Recursión infinita
Si una recursión nunca alcanza un caso base, continúa haciendo llamadas recursivas para siempre y el programa nunca termina. Esto se conoce como _recursión infinita_ y generalmente no es una buena idea. Aquí hay un código con una recursión infinita:
(((recursión infinita)))(((recursión)))((("función", "definida por el programador", "recursión", see="recursión")))

[source,julia]
----
function recursion()
    recursion()
end
----

En la mayoría de los entornos de programación, un programa con recursión infinita realmente no se ejecuta para siempre. Julia entrega un mensaje de error cuando se alcanza la profundidad de recursión máxima:

[source,jlcon]
----
julia> recursion()
ERROR: StackOverflowError:
Stacktrace:
 [1] recursion() at ./REPL[1]:2 (repeats 80000 times)
----

Este stacktrace es un poco más grande que el que vimos en el capítulo anterior. Cuando se produce el error, ¡hay 80000 marcos de +recursion+ en el diagrama de pila!
(((stacktrace)))(((StackOverflowError)))((("error", "Core", "StackOverflowError", see="StackOverflowError")))

Si por accidente encuentra una recursión infinita en su código, revise su función para confirmar que hay un caso base que no realiza una llamada recursiva. Si hay un caso base, verifique si realmente puede ocurrir.

=== Entrada por teclado

Los programas que se han escrito hasta ahora no aceptan entradas del usuario. Simplemente hacen lo mismo cada vez.

Julia tiene una función incorporada llamada +readline+ que detiene el programa y espera a que el usuario escriba algo. Cuando el usuario presiona +RETURN+ o +ENTER+, el programa se reanuda y +readline+ devuelve lo que el usuario escribió como una cadena.
(((readline)))((("función", "Base", "readline", see="readline")))

[source,jlcon]
----
julia> text = readline()
¿Qué está esperando?
"¿Qué está esperando?"
----
Antes de recibir una entrada por teclado del usuario, es una buena idea imprimir un mensaje que le diga al usuario qué escribir:
(((prompt)))

[source,jlcon]
----
julia> print("¿Cuál... es su nombre? "); readline()
¿Cuál... es su nombre? ¡Arturo, Rey de los Bretones!
"¡Arturo, Rey de los Bretones!"
----

Un punto y coma +;+ permite colocar varias sentencias en la misma línea. En el REPL solo la última sentencia devuelve su valor.
(((;)))

Si espera que el usuario escriba un número entero, puede intentar convertir el valor de retorno a +Int64+:

[source,jlcon]
----
julia> println("¿Cuántos dejaron su casa, su tierra o su posesión?"); numero = readline()
¿Cuántos dejaron su casa, su tierra o su posesión?
115
"115"
julia> parse(Int64, numero)
115
----
Pero si el usuario no escribe una cadena de dígitos, obtendrá un error:
(((parse)))

[source,jlcon]
----
julia> println("¿Cuántos dejaron su casa, su tierra o su posesión?"); numero = readline()
¿Cuántos dejaron su casa, su tierra o su posesión?
Más de ciento quince son.
"Más de ciento quince son."
julia> parse(Int64, speed)
ERROR: ArgumentError: invalid base 10 digit 'M' in "Más de ciento quince son."
[...]
----

Veremos qué hacer con este tipo de error más adelante.
(((ArgumentError)))


=== Depuración

Cuando se produce un error de sintaxis o de tiempo de ejecución, el mensaje de error contiene mucha información, lo cual puede ser abrumador. Las partes más útiles suelen ser:
(((depuración)))

* Qué tipo de error fue

* Dónde ocurrió tal error

Los errores de sintaxis suelen ser fáciles de encontrar y hay algunos trucos. En general, los mensajes de error indican dónde se descubrió el problema pero el error real podría estar antes en el código, a veces en una línea anterior.

Lo mismo aplica para los errores de tiempo de ejecución. Suponga que está tratando de calcular una relación señal/ruido en decibelios. La fórmula es

[latexmath]
++++
\begin{equation}
{S/R_{\mathrm{dB}} = 10 \log_{10} \frac{P_{\mathrm{señal}}}{P_{\mathrm{ruido}}}\ .}
\end{equation}
++++

En Julia, se podría escribir algo como esto:

[source,julia]
----
intensidad_señal = 9
intensidad_ruido = 10
relacion = intensidad_señal ÷ intensidad_ruido
decibeles = 10 * log10(relacion)
print(decibeles)
----

Obteniendo:

[source,julia]
----
-Inf
----
Este no es el resultado que esperábamos.

Para encontrar el error, puede ser útil imprimir el valor de la variable "relacion", que resulta ser 0. El problema está en la línea 3, que usa la división de tipo piso en lugar de la división de punto flotante.

[WARNING]
====
El usuario debe tomarse el tiempo de leer los mensajes de error cuidadosamente, pero no se debe asumir que todo lo que dicen es correcto.
====


=== Glosario

División de tipo piso::
Un operador, denotado por +÷+, que divide dos números y redondea hacia abajo (hacia el infinito negativo) a un entero.
(((división de tipo piso)))

operador módulo::
Un operador, denotado con el signo de porcentaje (%), que se utiliza con enteros y devuelve el resto cuando un número se divide por otro.
(((operador módulo)))

expresión booleana::
Una expresión cuyo valor es +verdadero+ o +falso+.
(((boolean expression)))

operador relacional::
Uno de los operadores que compara sus operandos: +==+, +≠+ (+!=+), +>+, +<+, +≥+ (+>=+), and +≤+ (+pass:[&lt;=]+).
(((operador relacional)))

operador lógico::
Uno de los operadores que combina expresiones booleanas: +&&+ (and), +||+ (or), and +!+ (not).
(((operador lógico)))

sentencia condicional::
Una sentencia que controla el flujo de ejecución dependiendo de alguna condición.
(((sentencia condicional)))

condición::
La expresión booleana en una sentencia condicional que determina qué rama se ejecuta.
(((condición)))

sentencia compuesta::
Una sentencia que consta de un encabezado y un cuerpo. El cuerpo termina con la palabra reservada +end+.
(((sentencia compuesta)))

rama::
Una de las secuencias alternativas de sentencias en una sentencia condicional.
(((rama)))

condicional encadenada::
Una sentencia condicional con una serie de ramas alternativas.
(((condicional encadenada)))

condicional anidada::
Una sentencia condicional que aparece en una de las ramas de otra sentencia condicional.
(((condicional anidada)))

sentencia return::
Una sentencia que hace que una función finalice de inmediato y que vuelva a la sentencia de llamada a función.
(((sentencia return)))

recursividad o recursión::
El proceso de llamar a la función que se está ejecutando actualmente.
(((recursión)))

caso base::
Una rama condicional en una función recursiva que no realiza una llamada recursiva.
(((caso base)))

recursión infinita::
Una recursión que no tiene un caso base o que nunca llega a él. Eventualmente, una recursión infinita provoca un error de tiempo de ejecución.
(((recursión infinita)))


=== Ejercicios

[[ex05-1]]
==== Ejercicio 5-2

La función +time+ devuelve el tiempo medio de Greenwich actual en segundos desde "la época", que es un tiempo arbitrario utilizado como punto de referencia. En sistemas UNIX, la época es el 1 de enero de 1970.
(((time)))((("función", "Base", "time", see="time")))

[source,@julia-repl]
----
time()
----

Escriba un script que lea la hora actual y la convierta a una hora del día en horas, minutos y segundos, más el número de días transcurridos desde la época.

[[ex05-2]]
==== Ejercicio 5-3

El último teorema de Fermat dice que no hay enteros positivos latexmath:[a], latexmath:[b], and latexmath:[c] tal que
(((último teorema de Fermat)))

[latexmath]
++++
\begin{equation}
{a^n + b^n = c^n}
\end{equation}
++++

para cualquier valor de latexmath:[\ (n ] mayor que 2.

. Escriba una función llamada +verificarfermat+ que tome cuatro parámetros—+a+, +b+, +c+ y +n+— y que verifique si el teorema de Fermat es válido. Si +n+ es mayor que 2 y +pass:[a^n + b^n == c^n]+ el programa debería imprimir, "¡Santo cielo, Fermat estaba equivocado!" De lo contrario, el programa debería imprimir, "No, eso no funciona".
(((verificarfermat)))((("función", "definida por el programador", "verificarfermat", see="verificarfermat")))

. Escriba una función que solicite al usuario ingresar valores para +a+, +b+, +c+ and +n+, que los convierta en enteros y que use +verificarfermat+ para verificar si violan el teorema de Fermat.

[[ex05-3]]
==== Ejercicio 5-4

Si tiene tres barras, estas podrían o no formar un triángulo. Por ejemplo, si una de las barras tiene 12 centímetros de largo y las otras dos tienen un centímetro de largo, no es posible que las barras pequeñas puedan juntarse al medio. Para cualquier trío de longitudes, hay una prueba simple para ver si es posible formar un triángulo:

[TIP]
====
Si cualquiera de las tres longitudes es mayor que la suma de las otras dos, entonces no se puede formar un triángulo. De lo contrario, se puede. (Si la suma de dos longitudes es igual a la tercera, forman lo que se llama un triángulo "degenerado").
====

. Escriba una función llamada +estriangulo+ que tome tres enteros como argumentos, y que imprima “Sí” o “No”, dependiendo de si se puede o no formar un triángulo a partir de barras de las longitudes dadas.
(((estriangulo)))((("function", "definida por el programador", "estriangulo", see="estriangulo")))

. Escriba una función que solicite al usuario ingresar tres longitudes de barras, las convierta en enteros y use +estriangulo+ para verificar si las barras con las longitudes dadas pueden formar un triángulo.

[[ex05-4]]
==== Ejercicio 5-5

¿Cuál es el resultado del siguiente programa? Dibuje un diagrama de pila que muestre el estado del programa cuando imprima el resultado.
(((diagrama de pila)))(((recursión)))

[source,julia]
----
function recursion(n, s)
    if n == 0
        println(s)
    else
        recursion(n-1, n+s)
    end
end

recursion(3, 0)
----
. ¿Qué pasaría si se llamara a esta función así: +recursion(-1, 0)+?

. Escriba un documento que explique todo lo que alguien necesitaría saber para usar esta función (y nada más).

Los siguientes ejercicios utilizan el módulo +IntroAJulia+, descrito en <<chap04>>:

[[ex05-5]]
==== Ejercicio 5-6

Lea la siguiente función y vea si puede averiguar qué hace (vea los ejemplos en <<chap04>>). Luego ejecútelo y vea si lo hizo bien.

[source,julia]
----
function dibujar(t, distancia, n)
    if n == 0
        return
    end
    angulo = 50
    adelante(t, distancia*n)
    girar(t, -angulo)
    dibujar(t, distancia, n-1)
    girar(t, 2*angulo)
    dibujar(t, distancia, n-1)
    girar(t, -angulo)
    adelante(t, -distancia*n)
end
----

[[ex05-6]]
==== Ejercicio 5-7

[[fig05-2]]
.Una curva de Koch
image::images/fig52.svg[]

La curva de Koch es un fractal que luce como <<fig05-2>>. Para dibujar una curva de Koch con longitud latexmath:[x], todo lo que tiene que hacer es
(((curva de Koch)))(((fractal)))

. Dibuje una curva de Koch con longitud latexmath:[\frac{x}{3}].

. Gire a la izquierda 60 grados.

. Dibuje una curva de Koch con longitud latexmath:[\frac{x}{3}].

. Gire a la derecha 120 grados.

. Dibuje una curva de Koch con longitud latexmath:[\frac{x}{3}].

. Gire a la izquierda 60 grados.

. Dibuje una curva de Koch con longitud latexmath:[\frac{x}{3}].

La excepción es cuando latexmath:[x] es menor que 3: en ese caso, puede dibujar una línea recta con una longitud latexmath:[x].

. Escribe una función llamada +koch+ que tome una tortuga y una longitud como parámetros y que use la tortuga para dibujar una curva de Koch con la longitud dada.
(((koch)))((("función", "definida por el programador", "koch", see="koch")))

. Escriba una función llamada +copodenieve+ que dibuje tres curvas de Koch para hacer el contorno de un copo de nieve.
(((copodenieve)))((("función", "definida por el programador", "copodenieve", see="copodenieve")))

. La curva de Koch se puede generalizar de varias maneras. Consulte https://en.wikipedia.org/wiki/Koch_snowflake para ver ejemplos e implementar su favorito.
