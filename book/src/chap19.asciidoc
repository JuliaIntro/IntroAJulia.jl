[[chap19]]
== Extra: Sintaxis

Uno de los objetivos de este libro es enseñarle lo justo y necesario de Julia. Se explica una sola forma de hacer las cosas y, en ocasiones, se deja como ejercicio al lector una segunda manera.

Ahora se verán algunos temas que se han dejado de lado pero que son útiles. Julia proporciona una serie de características que no son realmente necesarias (se puede escribir un buen código sin ellas), pero a veces permiten escribir un código más conciso, legible y/o eficiente.

En este capítulo y el siguiente se discute aquello que se ha omitido en los capítulos anteriores:

* más sintaxis
* funciones, tipos y macros disponibles directamente de +Base+ 
(((Base)))
* funciones, tipos y macros de la Biblioteca Estándar (Standard Library)
(((Biblioteca Estándar)))

=== Tuplas con nombre

Es posible colocarle nombre a los componentes de una tupla, creando una tupla con nombre:

[source,@julia-repl-test]
----
julia> x = (a=1, b=1+1)
(a = 1, b = 2)
julia> x.a
1
----

En las tuplas con nombre se puede acceder a los atributos con su nombre utilizando la sintaxis de punto +(x.a)+.
(((tupla con nombre)))(((sintaxis de punto)))


=== Funciones

Las funciones en Julia también se pueden definir mediante una sintaxis compacta, de la siguiente forma:

[source,@julia-repl-test]
----
julia> f(x,y) = x + y
f (generic function with 1 method)
----

[[anonymous_functions]]
==== Funciones Anonimas

Podemos definir una función sin especificar su nombre:

[source,@julia-repl-test]
----
julia> x -> x^2 + 2x - 1
#1 (generic function with 1 method)
julia> function (x)
           x^2 + 2x - 1
       end
#3 (generic function with 1 method)
----

Estos son ejemplos de _funciones anónimas_. Las funciones anónimas generalmente se usan como argumento de otra función:
(((función anónima)))(((Plots)))((("módulo", "Plots", see="Plots")))(((plot)))((("función", "Plots", "graficar", see="graficar")))

[source,jlcon]
----
julia> using Plots

julia> plot(x -> x^2 + 2x - 1, 0, 10, xlabel="x", ylabel="y")

----

<<fig19-1>> muestra el resultado del comando plot (graficar en inglés).

[[fig19-1]]
.Plot
image::images/fig191.svg[pdfwidth="10cm"]

==== Argumentos con nombre

También se puede poner nombre a los argumentos de una función:

[source,@julia-repl-test]
----
julia> function migrafico(x, y; style="continua", width=1, color="negro")
           ###
       end
migrafico (generic function with 1 method)
julia> migrafico(0:10, 0:10, style="dotted", color="blue")

----

Los _argumentos con nombre_ en una función se especifican después de un punto y coma en la especificación, pero al llamar a la función se pueden utilizar solo comas.
(((;)))(((argumentos con nombre)))

==== Clausuras

Una _clausura_ es una técnica que permite que una función capture una variable definida fuera del ámbito de la función.

[source,@julia-repl-test]
----
julia> foo(x) = ()->x
foo (generic function with 1 method)

julia> bar = foo(1)
#1 (generic function with 1 method)

julia> bar()
1
----

En este ejemplo, la función +foo+ devuelve una función anónima que tiene acceso al argumento +x+ de la función +foo+. +bar+ apunta a la función anónima y devuelve el valor del argumento de +foo+.


=== Bloques

Un _bloque_ es una forma de agrupar varias sentencias. Un bloque comienza con la palabra reservada +begin+ y termina con +end+.
(((begin)))((("palabra reservada", "begin", see="begin")))(((end)))(((block)))

En <<chap04>> se presentó la macro +@svg+:

[source,julia]
----
🐢 = Turtle()
@svg begin
    forward(🐢, 100)
    turn(🐢, -90)
    forward(🐢, 100)
end
----

En este ejemplo, la macro +@svg+ tiene un único argumento: un bloque, que agrupa 3 llamadas a funciones.

==== Bloques +let+ 

Un bloque +let+ es útil para crear nuevas ligaduras (o bindings), es decir, variables locales que pueden apuntar a valores.

[source,@julia-repl-test]
----
julia> x, y, z = -1, -1, -1;

julia> let x = 1, z
           @show x y z;
       end
x = 1
y = -1
ERROR: UndefVarError: z not defined
julia> @show x y z;
x = -1
y = -1
z = -1
----

En el ejemplo, la primera macro +@show+ muestra la variable local +x+, la variable global +y+ y la variable local indefinida +z+. Las variables globales se mantienen intactas.


==== Bloques +do+

En <<reading_and_writing>> se cierra el archivo después de terminar de escribir en él. Esto se puede hacer automáticamente usando un _Bloque do_:
(((do)))((("palabra reservada", "do", see="do")))

[source,@julia-repl-test chap19]
----
julia> datos = "El Cid convoca a sus vasallos;\néstos se destierran con él.\n"
"El Cid convoca a sus vasallos;\néstos se destierran con él.\n"
julia> open("salida.txt", "w") do fout
           write(fout, datos)
       end
61
----

En este ejemplo, +fout+ es el archivo stream utilizado para la salida.

Esto es equivalente a:

[source,@julia-repl-test chap19]
----
julia> f = fout -> begin
           write(fout, datos)
       end
#3 (generic function with 1 method)
julia> open(f, "salida.txt", "w")
61
----

La función anónima se utiliza como primer argumento de la función +open+:
(((open)))

[source,julia]
----
function open(f::Function, args...)
    io = open(args...)
    try
        f(io)
    finally
        close(io)
    end
end
----

Un bloque +do+ puede "capturar" variables de su ámbito envolvente (enclosed scope). Por ejemplo, la variable +datos+ en el ejemplo anterior de +open pass:[...] do+ es capturada desde el ámbito externo. 


=== Estructuras de control

==== Operador ternario

El _operador ternario_, +?:+, puede utilizarse en vez de una sentencia +if-elseif+. Esta sentencia se usa cuando se necesita elegir entre diferentes expresiones con valor único.
(((?:)))((("operador", "Base", "?:", see="?:")))((("operador ternario", see="?:")))

[source,@julia-repl-test]
----
julia> a = 150
150
julia> a % 2 == 0 ? println("par") : println("impar")
par
----

La expresión que va antes de +?+ es una expresión de condición. Si la condición es +true+, se evalúa la expresión que va antes de +:+. De lo contrario, se evalúa la expresión que va después de +:+.

==== Evaluación de cortocircuito

Los operadores +&&+ y +||+ realizan una _evaluación de cortocircuito_, es decir, se evalúa el siguiente argumento solo cuando es necesario para determinar el valor final.
(((&&)))(((||)))(((evaluación de cortocircuito)))

Por ejemplo, una función factorial recursiva podría definirse así:
(((fact)))

[source,@julia-setup]
----
function fact(n::Integer)
    n >= 0 || error("n debe ser no negativo")
    n == 0 && return 1
    n * fact(n-1)
end
----

==== Tarea (o Corrutina)

Una _tarea_ es una estructura de control que puede ceder el control de forma cooperativa sin hacer return. En Julia, una tarea puede implementarse como una función con un objeto +Channel+ como primer argumento. Se usa un channel para pasar valores de la función a la sentencia que la llama.

El término "cooperativo" alude a que los programas deben cooperar para que todo el esquema de programación funcione.

La secuencia de Fibonnaci se puede generar mediante una tarea.
(((tarea)))(((Channel)))((("tipo", "Base", "Channel", see="Channel")))(((put!)))((("función", "Base", "put!", see="put!")))

[source,@julia-setup chap19]
----
function fib(c::Channel)
    a = 0
    b = 1
    put!(c, a)
    while true
        put!(c, b)
        (a, b) = (b, a+b)
    end
end
----

+put!+ almacena valores en un objeto channel y +take!+ lee valores desde él:
(((take!)))((("función", "Base", "take!", see="take!")))

[source,@julia-repl-test chap19]
----
julia> fib_gen = Channel(fib);

julia> take!(fib_gen)
0
julia> take!(fib_gen)
1
julia> take!(fib_gen)
1
julia> take!(fib_gen)
2
julia> take!(fib_gen)
3
----

El constructor +Channel+ crea la tarea. La función +fib+ se suspende después de cada llamada a +put!+ y se reanuda al llamar a +take!+. Por razones de rendimiento, se almacenan varios valores de la secuencia en el objeto channel durante un ciclo de reanudación/suspensión.

Un objeto channel también se puede usar como iterador:

[source,@julia-repl-test chap19]
----
julia> for val in Channel(fib)
           print(val, " ")
           val > 20 && break
       end
0 1 1 2 3 5 8 13 21
----


=== Tipos

==== Tipos Primitivos

Un tipo concreto compuesto por bits se llama _tipo primitivo_. A diferencia de la mayoría de los lenguajes, en Julia se puede declarar nuestros propios tipos primitivos. Los tipos primitivos estándar se definen de la misma manera:
(((tipo primitivo)))((("palabra reservada", "tipo primitivo", see="tipo primitivo")))

[source,julia]
----
primitive type Float64 <: AbstractFloat 64 end
primitive type Bool <: Integer 8 end
primitive type Char <: AbstractChar 32 end
primitive type Int64 <: Signed 64 end
----

El número en las sentencias especifica cuántos bits son necesarios.

El siguiente ejemplo crea un tipo primitivo +Byte+ y un constructor:
(((Byte)))((("tipo", "definida por el programador", "Byte", see="Byte")))

[source,@julia-repl-test]
----
julia> primitive type Byte 8 end

julia> Byte(val::UInt8) = reinterpret(Byte, val)
Byte
julia> b = Byte(0x01)
Byte(0x01)
----

La función +reinterpret+ se usa para almacenar los bits de un entero sin signo con 8 bits (+UInt8+) en el byte.
(((reinterpret)))((("función", "Base", "reinterpret", see="reinterpret")))(((UInt8)))((("tipo", "Base", "UInt8", see="UInt8")))

==== Tipos Paramétricos

El sistema de tipos de Julia es _paramétrico_, lo que significa que los tipos pueden tener parámetros.

Los parámetros de un tipo se colocan después del nombre del tipo, entre llaves:
(((llaves)))

[source,@julia-setup chap19]
----
struct Punto{T<:Real}
    x::T
    y::T
end
----

Con esto se define un nuevo tipo paramétrico, +Punto{T<:Real}+, que contiene dos "coordenadas" de tipo +T+, que puede ser cualquier tipo que tenga +Real+ como supertipo.

[source,@julia-repl-test chap19]
----
julia> Punto(0.0, 0.0)
Punto{Float64}(0.0, 0.0)
----

Además de los tipos compuestos, los tipos abstractos y los tipos primitivos también pueden tener parámetros.

[TIP]
====
Para mejorar el rendimiento, es totalmente recomendable tener tipos concretos como atributos de una estructura, por lo que esta es una buena manera de hacer que +Punto+ sea rápido y flexible.
====

==== Union de Tipo

Una _union de tipo_ es un tipo paramétrico abstracto que puede actuar como cualquiera de los tipos de sus argumentos:
(((union de tipo)))(((Union)))((("tipo", "Base", "Union", see="Union")))

[source,@julia-repl-test]
----
julia> EnteroOCadena = Union{Int64, String}
Union{Int64, String}
julia> 150 :: EnteroOCadena
150
julia> "Julia" :: EnteroOCadena
"Julia"
----

Una unión de tipos es, en la mayoría de los lenguajes informáticos, una construcción interna para trabajar con tipos. Sin embargo, Julia pone a disposición esta característica para sus usuarios, ya que permite generar un código eficiente (cuando la unión es entre pocos tipos). Esta característica otorga una gran flexibilidad para controlar el dispatch.

=== Métodos

==== Métodos Paramétricos 

Las definiciones de métodos también pueden tener parámetros de tipo que limiten su especificación:
(((especificación)))

[source,@julia-repl-test chap19]
----
julia> espuntoentero(p::Punto{T}) where {T} = (T === Int64)
espuntoentero (generic function with 1 method)
julia> p = Punto(1, 2)
Punto{Int64}(1, 2)
julia> espuntoentero(p)
true
----

==== Objetos Similares a Funciones

Cualquier objeto arbitrario de Julia puede hacerse "invocable". Tales objetos "invocables" a veces se denominan _funtores_.
(((funtor)))

[source,@julia-setup chap19]
----
struct Polinomio{R}
    coef::Vector{R}
end

function (p::Polinomio)(x)
    val = p.coef[end]
    for coef in p.coef[end-1:-1:1]
        val = val * x + coef
    end
    val
end
----

Para evaluar el polinomio, simplemente debemos llamarlo:

[source,@julia-repl-test chap19]
----
julia> p = Polinomio([1,10,100])
Polinomio{Int64}([1, 10, 100])
julia> p(3)
931
----

=== Constructores

Los tipos paramétricos se pueden construir explícita o implícitamente:

[source,@julia-repl-test chap19]
----
julia> Punto(1,2)         # T implicito
Punto{Int64}(1, 2)
julia> Punto{Int64}(1, 2) # T explicito
Punto{Int64}(1, 2)
julia> Punto(1,2.5)       # T implicito
ERROR: MethodError: no method matching Punto(::Int64, ::Float64)
----

Se generan constructores internos y externos por defecto para cada +T+:
(((constructor)))

[source,julia]
----
struct Punto{T<:Real}
    x::T
    y::T
    Punto{T}(x,y) where {T<:Real} = new(x,y)
end

Punto(x::T, y::T) where {T<:Real} = Punto{T}(x,y);
----

y tanto +x+ como +y+ deben ser del mismo tipo. 

Cuando +x+ e +y+ son de tipos diferentes, se puede definir el siguiente constructor externo:

[source,@julia-setup chap19]
----
Punto(x::Real, y::Real) = Punto(promote(x,y)...);
----

La función +promote+ se detalla en <<promoción>>.
(((promote)))((("función", "Base", "promote", see="promote")))

=== Conversión y Promoción

Julia tiene un sistema para convertir argumentos de diferentes tipos a un tipo común. Esto es llamado promoción, y aunque no es automático, se puede realizar fácilmente.

==== Conversion

Un valor se puede convertir de un tipo a otro:
(((conversion)))(((convert)))((("función", "Base", "convert", see="convert")))

[source,@julia-repl-test]
----
julia> x = 12
12
julia> typeof(x)
Int64
julia> convert(UInt8, x)
0x0c
julia> typeof(ans)
UInt8
----

Se pueden agregar nuestros propios métodos +convert+:
[source,@julia-repl-test chap19]
----
julia> Base.convert(::Type{Punto{T}}, x::Array{T, 1}) where {T<:Real} = Punto(x...)

julia> convert(Punto{Int64}, [1, 2])
Punto{Int64}(1, 2)
----

[[promotion]]
==== Promoción

_Promoción_ es la conversión de valores de diferentes tipos a un solo tipo común:
(((promoción)))(((promote)))

[source,@julia-repl-test]
----
julia> promote(1, 2.5, 3)
(1.0, 2.5, 3.0)
----

Generalmente, los métodos para la función +promote+ no se definen directamente, sino que se usa la función auxiliar +promot_rule+ para especificar las reglas de la promoción:
(((promote_rule)))((("función", "Base", "promote_rule", see="promote_rule")))

[source,julia]
----
promote_rule(::Type{Float64}, ::Type{Int32}) = Float64
----

=== Metaprogramación

Un código de Julia se puede representar como una estructura de datos del mismo lenguaje. Esto permite que un programa escriba y manipule su propio código.

==== Expresiones

Cada programa de Julia comienza como una cadena:

[source,@julia-repl-test chap19]
----
julia> prog = "1 + 2"
"1 + 2"
----

El siguiente paso es analizar cada cadena en un objeto llamado _expresión_, representado por el tipo de Julia +Expr+:
(((expresión)))(((Expr)))((("tipo", "Base", "Expr", see="Expr")))(((parse)))((("función", "Meta", "parse", see="parse")))

[source,@julia-repl-test chap19]
----
julia> ex = Meta.parse(prog)
:(1 + 2)
julia> typeof(ex)
Expr
julia> dump(ex)
Expr
  head: Symbol call
  args: Array{Any}((3,))
    1: Symbol +
    2: Int64 1
    3: Int64 2
----

La función +dump+ muestra objetos expr con anotaciones.
(((dump)))

Las expresiones se pueden construir directamente con el prefijo +:+ entre paréntesis o usando un bloque quote:
(((:)))(((quote)))((("palabra reservada", "quote", see="quote")))

[source,@julia-repl-test chap19]
----
julia> ex = quote
           1 + 2
       end;
----

==== +eval+

Julia puede evaluar un objeto de expresión usando la función +eval+:
(((eval)))((("función", "Core", "eval", see="eval")))

[source,@julia-eval chap19]
----
import Base.eval
----

[source,@julia-repl-test chap19]
----
julia> eval(ex)
3
----

Cada módulo tiene su propia función +eval+ que evalúa las expresiones de su ámbito.

[WARNING]
====
Generalmente si un código tiene muchas llamadas a +eval+, significa que algo está mal. +eval+ se considera "malo".
====

==== Macros

Las macros pueden incluir código generado en un programa. Una _macro_ asocia una tupla de objetos +Expr+ directamente con una expresión compilada:
(((macro)))

Aquí hay una macro simple:
(((@contenedorvariable)))((("macro", "definida por el programador", "@contenedorvariable", see="@contenedorvariable")))

[source,@julia-setup chap19]
----
macro contenedorvariable(contenedor, elemento)
    return esc(:($(Symbol(contenedor,elemento)) = $contenedor[$elemento]))
end
----

Las macros se llaman anteponiendo +@+ (arroba) a su nombre. La llamada a la macro +@contenedorvariable letras 1+ se reemplaza por:
(((@)))

[source,julia]
----
:(letras1 = letras[1])
----

+@macroexpand @contenedorvariable letras 1+  returns this expression which is extremely useful for debugging.
(((@macroexpand)))((("macro", "Base", "@macroexpand", see="@macroexpand")))

Este ejemplo ilustra cómo una macro puede acceder al nombre de sus argumentos, algo que una función no puede hacer. Se debe "escapar" de la expresión de retorno con +esc+ porque debe resolverse en el entorno de la macro llamada.
(((esc)))((("función", "Base", "esc", see="esc")))

[NOTE]
====
¿Por qué usar Macros?

Las macros generan e incluyen fragmentos de código personalizado durante el tiempo de análisis, es decir, _antes_ de ejecutar el programa completo.
====

==== Funciones Generadas

La macro +@generated+ crea código especializado para métodos dependiendo del tipo de los argumentos:
(((funciones generadas)))(((@generated)))((("macro", "Base", "@generated", see="@generated")))

[source,@julia-setup chap19]
----
@generated function cuadrado(x)
    println(x)
    :(x * x)
end
----

El cuerpo devuelve una expresión citada como una macro.

Para la sentencia que llama, la _función generada_ se comporta como una función normal:

[source,@julia-repl-test chap19]
----
julia> x = cuadrado(2); # nota: la salida es de la instrucción println () que está en el cuerpo 
Int64
julia> x              # ahora imprimimos x
4
julia> y = cuadrado("spam");
String
julia> y
"spamspam"
----

=== Datos Faltantes

Los _datos faltantes_ se pueden representar a través del objeto +missing+, que es la instancia única del tipo +Missing+.
(((datos faltantes)))(((faltantes)))(((Missing)))((("type", "Base", "Missing", see="Missing")))

Los arreglos pueden contener datos que faltan, missing values en inglés:

[source,@julia-repl-test chap19]
----
julia> a = [1, missing]
2-element Array{Union{Missing, Int64},1}:
 1
  missing
----

El tipo de dicho arreglo es +Union{Missing, T}+, dónde +T+ es el tipo de los valores que realmente tenemos en el arreglo.

Las funciones de reducción devuelven +missing+ cuando se invocan con arreglos que contienen valores que faltan

[source,@julia-repl-test chap19]
----
julia> sum(a)
missing
----

En este caso, se puede usar la función +skipmissing+ para omitir los valores que faltan:
(((skipmissing)))((("función", "Base", "skipmissing", see="skipmissing")))

[source,@julia-repl-test chap19]
----
julia> sum(skipmissing([1, missing]))
1
----


=== Llamar a Código de C y Fortran

Se escribe mucho código en C o Fortran. Reutilizar un código que ya ha sido probado generalmente es mejor que escribir su propia versión en otro lenguaje. Julia puede llamar directamente a las bibliotecas C o Fortran existentes utilizando la sintaxis +ccall+.
(((ccall)))((("función", "Base", "ccall", see="ccall")))

En <<databases>> se presentó una interfaz de Julia de la biblioteca GDBM de funciones de base de datos. La biblioteca está escrita en C. Para cerrar la base de datos, se debe hacer una llamada a la función +close(db)+:

[source,julia]
----
Base.close(dbm::DBM) = gdbm_close(dbm.handle)

function gdbm_close(handle::Ptr{Cvoid})
    ccall((:gdbm_close, "libgdbm"), Cvoid, (Ptr{Cvoid},), handle)
end
----

Un objeto dbm tiene un atributo +handle+ de tipo +Ptr{Cvoid}+. Este atributo contiene un puntero de C que apunta a la base de datos. Para cerrar la base de datos, debe llamarse a la función de C +gdbm_close+ teniendo como único argumento el puntero C apuntando a la base de datos, sin valor de retorno. Julia hace esto directamente con la función +ccall+ que tiene como argumentos:
(((Ptr)))((("tipo", "Base", "Ptr", see="Ptr")))

* una tupla que consiste en un símbolo que contiene el nombre de la función que queremos llamar: +:gdbm_close+ y la librería compartida especificada como una cadena: ++"libgdm"+,

* el tipo de retorno: +Cvoid+,

* una tupla de tipos de argumentos: +(Ptr{Cvoid},)+ 

* los valores del argumento: +handle+.

Una visión completa de la librería GDBM se puede encontrar como ejemplo en las fuentes de ThinkJulia.

=== Glossary

clausura::
Función que captura variables del ámbito en dónde está definida.
(((clausura)))

bloque let::
Bloque de asignación de nuevas ligaduras variables.
(((bloque let)))

función anónima::
Función definida sin nombre.
(((función anónima)))

tupla con nombre::
Tupla con componentes con nombre.
(((tupla con nombre)))

argumentos con nombre::
Argumentos identificados por su nombre en vez de solo por la posición que ocupan.
(((argumentos con nombre)))

bloque do::
Construcción usada para definir y llamar a una función anónima parecida a un bloque de código normal.
(((bloque do)))

operador ternario::
Operador de estructura de control que toma tres operandos: una condición, una expresión que se ejecutará si la condición devuelve +true+ y una expresión que se ejecutará si la condición devuelve +false+.
(((operador ternario)))

evaluación de cortocircuito::
Evaluación de un operador booleano para el que se ejecuta o evalúa el segundo argumento solo si el primero no es suficiente para determinar el valor de la expresión.
(((evaluación de cortocircuito)))

tareas (corrutina)::
Característica de las estructuras de control que permite suspender y reanudar cálculos de manera flexible.
(((tarea)))

tipo primitivo::
Tipo concreto cuyos datos están compuestos de bits.
(((tipo primitivo)))

unión de tipos::
Tipo que incluye todas las instancias de cualquiera de sus tipos de parámetros como objetos.
(((unión de tipos)))

tipo paramétrico::
Tipo que tiene parámetros.
(((tipo paramétrico)))

funtor::
Objeto con un método asociado, para que sea invocable.
(((funtor)))

conversión::
Permite convertir un valor de un tipo a otro.
(((conversión)))

promoción::
Conversión de valores de diferentes tipos a un solo tipo común.
(((promoción)))

expresión::
Tipo de Julia que contiene una construcción de lenguaje.
(((expresión)))

macro::
Forma de incluir el código generado en el cuerpo final de un programa.
(((macro)))

funciones generadas::
Funciones capaces de generar código especializado según el tipo de los argumentos.
(((funciones generadas)))

datos faltantes::
Instancias que representan datos sin valor.
(((datos faltantes)))
