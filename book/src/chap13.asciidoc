[[chap13]]
== Estudio de Caso: Selección de Estructura de Datos

Hasta ahora hemos aprendido sobre las principales estructuras de datos de Julia y hemos visto algunos de los algoritmos que las utilizan.

Este capítulo presenta un estudio de caso con ejercicios que le permiten practicar la elección de estructuras de datos y su uso.


=== Análisis de Frecuencia de Palabras

Como de costumbre, se recomienda intentar resolver los ejercicios antes de leer las soluciones.

[[ex13-1]]
==== Ejercicio 13-1

Escriba un programa que lea un archivo, divida cada línea en palabras, elimine el espacio en blanco y la puntuación de las palabras y luego las convierta en minúsculas.

[TIP]
====
La función +isletter+ permite saber si un carácter pertenece al alfabeto.
(((isletter)))((("función", "Base", "isletter", see="isletter")))
====

[[ex13-2]]
==== Ejercicio 13-2

Vaya a la página de Proyecto Gutenberg (https://gutenberg.org) y descargue su libro favorito sin derechos de autor en formato de texto plano. La mayoría de los libros están en inglés, pero existen algunos en español.
(((Proyecto Gutenberg)))

Modifique su programa del ejercicio anterior para leer el libro que descargó, omita la información del encabezado al comienzo del archivo y procese el resto de las palabras tal como en el ejercicio previo.

Luego, modifique el programa para contar la cantidad total de palabras en el libro y la cantidad de veces que se usa cada palabra.

Imprima la cantidad de palabras diferentes que se usan en el libro. Compare diferentes libros de diferentes autores, escritos en diferentes épocas. ¿Qué autor usa un vocabulario más extenso?

[[ex13-3]]
==== Ejercicio 13-3

Modifique el programa del ejercicio anterior para imprimir las 20 palabras más utilizadas en el libro.

[[ex13-4]]
==== Ejercicio 13-4

Modifique el programa anterior para que lea una lista de palabras y luego imprima todas las palabras del libro que no estén en la lista de palabras. ¿Cuántos de ellos son errores tipográficos? ¿Cuántos de ellos son palabras comunes que deberían estar en la lista de palabras? ¿ Cuántos de ellos son términos realmente macabros?

=== Números aleatorios

Dadas las mismas entradas, la mayor parte de los programas generan la misma salida cada vez que los ejecutamos, por lo que se dice que son deterministas. Normalmente el determinismo es algo bueno, ya que esperamos que un cálculo nos entregue siempre el mismo resultado. Para algunas aplicaciones, sin embargo, queremos que el computador sea impredecible. Por ejemplo en los juegos, entre otros casos.
(((determinístico)))

Hacer que un programa sea realmente no determinista resulta difícil, pero hay formas de que hacer que al menos parezca no determinista. Una de ellas es usar algoritmos para generar números _pseudoaleatorios_. Los números pseudoaleatorios no son verdaderamente aleatorios porque se generan mediante un cálculo determinista pero al mirar estos números es casi imposible distinguirlos de lo aleatorio.
(((pseudoaleatorio)))

La función +rand+ devuelve un numero de punto flotante entre +0.0+ y +1.0+ (incluyendo 0.0 pero no 1.0). Cada vez que usted llama a +rand+ obtiene el siguiente numero de una larga serie. Para ver un ejemplo, ejecute este bucle:
(((rand)))

[source,@julia-setup]
----
for i in 1:10
    x = rand()
    println(x)
end
----

La función +rand+ puede tomar un iterador o arreglo como argumento y devuelve un elemento aleatorio de ellos:

[source,@julia-setup]
----
for i in 1:10
    x = rand(1:6)
    print(x, " ")
end
----

[[ex13-5]]
==== Ejercicio 13-5

Escriba una función llamada +escogerdelhistograma+ que tome un histograma definido como en <<dictionary_collection_counters>> y devuelva un valor aleatorio del histograma, elegido con probabilidad proporcional a la frecuencia. Por ejemplo, para este histograma:
(((escogerdelhistograma)))((("función", "definida por el programador", "escogerdelhistograma", see="escogerdelhistograma")))

[source,@julia-repl-test chap11]
----
julia> t = ['a', 'a', 'b'];

julia> histograma(t)
Dict{Any,Any} with 2 entries:
  'a' => 2
  'b' => 1
----

su función debe devolver +pass:['a']+ con probabilidad latexmath:[\frac{2}{3}] y +pass:['b']+ con probabilidad latexmath:[\frac{1}{3}].

=== Histograma de Palabras

Debe hacer los ejercicios anteriores antes de continuar. También necesitará https://github.com/JuliaIntro/IntroAJulia.jl/blob/master/data/DonQuijote.txt.

Aquí hay un programa que lee un archivo y construye un histograma de las palabras en el archivo:
(((procesararchivo)))((("función", "definida por el programador", "procesararchivo", see="procesararchivo")))(((procesarlinea)))((("función", "definida por el programador", "procesarlinea", see="procesarlinea")))

[source,@julia-setup chap13]
----
function procesararchivo(nombrearchivo)
    hist = Dict()
    for linea in eachline(nombrearchivo)
        procesarlinea(linea, hist)
    end
    hist
end;

function procesarlinea(linea, hist)
    linea = replace(linea, '-' => ' ')
    for palabra in split(linea)
        palabra = string(filter(isletter, [palabra...])...)
        palabra = lowercase(palabra)
        hist[palabra] = get!(hist, palabra, 0) + 1
    end
end;
----

[source,@julia-eval chap13]
----
hist = procesararchivo(joinpath("..", "data", "DonQuijote.txt"));
----

[source,julia]
----
hist = procesararchivo("DonQuijote.txt");
----

Este programa lee _DonQuijote.txt_, que contiene el texto de _Don Quijote_ de Miguel de Cervantes.
(((de Cervantes, Miguel)))

+procesararchivo+ recorre las líneas del archivo, pasando una línea a la vez a +procesarlinea+. El histograma +hist+ se está utilizando como acumulador.
(((acumulador)))

+procesarlinea+ usa la función +replace+ para reemplazar los guiones por espacios antes de usar +split+ para dividir la línea en un arreglo de cadenas. Recorre el conjunto de palabras y usa +filter+, +isletter+ y +lowercase+ para eliminar los signos de puntuación y convertir las palabras a minúsculas. (Decir que las cadenas se "convierten" es incorrecto, recuerde que las cadenas son inmutables, por lo que una función como +lowercase+ devuelve cadenas nuevas).
(((replace)))(((split)))(((isletter)))(((lowercase)))(((get!)))(((filter)))((("función", "Base", "filter", see="filter")))

Finalmente, +procesarlinea+ actualiza el histograma creando un nuevo elemento o incrementando uno existente.

Para contar el número total de palabras en el archivo, podemos sumar las frecuencias en el histograma:
(((palabrastotales)))((("función", "definida por el programador", "palabrastotales", see="palabrastotales")))

[source,@julia-setup chap13]
----
function palabrastotales(hist)
    sum(values(hist))
end
----

El número de palabras diferentes es el número de elementos en el diccionario:
(((palabrasdiferentes)))((("función", "definida por el programador", "palabrasdiferentes", see="palabrasdiferentes")))

[source,@julia-setup chap13]
----
function palabrasdiferentes(hist)
    length(hist)
end
----

Para imprimir los resultados se puede usar el siguiente código:

[source,@julia-repl-test chap13]
----
julia> println("Número total de palabras: ", palabrastotales(hist))
Número total de palabras: 385925

julia> println("Número de palabras diferentes: ", palabrasdiferentes(hist))
Número de palabras diferentes: 23607
----

Observación: No se considera el encabezado del archivo de texto, sólo el libro.

=== Palabras Más Comunes

Para encontrar las palabras más comunes, podemos hacer un arreglo de tuplas, donde cada tupla contiene una palabra y su frecuencia, y ordenarlas. La siguiente función toma un histograma y devuelve un arreglo de tuplas de frecuencia de palabras:
(((mascomun)))((("función", "definida por el programador", "mascomun", see="mascomun")))(((reverse)))(((sort)))

[source,@julia-setup chap13]
----
function mascomun(hist)
    t = []
    for (clave, valor) in hist
        push!(t, (valor,clave))
    end
    reverse(sort(t))
end
----

En cada tupla, la frecuencia aparece primero, por lo que el arreglo resultante se ordena por frecuencia. A continuación se muestra un bucle que imprime las 10 palabras más comunes:

[source,julia]
----
t = mascomun(hist)
println("Las palabras más comunes son:")
for (frec, palabra) in t[1:10]
    println(palabra, "\t", frec)
end
----

En este ejemplo utilizamos un carácter de tabulación (+pass:['\t']+) como "separador", en vez de un espacio, por lo que la segunda columna está alineada. A continuación se muestran los resultados de _Don Quijote_:
(((separador)))(((\t)))

[source,@julia-eval chap13]
----
t = mascomun(hist)
println("Las palabras más comunes son:")
for (frec, palabra) in t[1:10]
    println(palabra, "\t", frec)
end
----

[TIP]
====
Este código se puede simplificar usando como argumento la palabra reservada +rev+ de la función +sort+. Puede leer sobre esto en https://docs.julialang.org/en/v1/base/sort/#Base.sort.
====


=== Parametros Opcionales

Se han tratado funciones integradas de Julia que toman argumentos opcionales. También es posible escribir funciones definidas por el programador con argumentos opcionales. Por ejemplo, aquí hay una función que imprime las palabras más comunes en un histograma:
(((argumento opcional)))(((imprimirmascomun)))((("función", "definida por el programador", "imprimirmascomun", see="imprimirmascomun")))

[source,@julia-setup chap13]
----
function imprimirmascomun(hist, num=10)
    t = mascomun(hist)
    println("Las palabras más comunes son: ")
    for (frec, palabra) in t[1:num]
        println(palabra, "\t", frec)
    end
end
----

El primer parámetro es obligatorio y el segundo es opcional. El _valor predeterminado_ de +num+ es +10+.
(((valor predeterminado)))

Si solo pasas un argumento:

[source,@julia-setup chap13]
----
imprimirmascomun(hist)
----

+num+ toma el valor predeterminado. Si pasas dos argumentos:

[source,@julia-setup chap13]
----
imprimirmascomun(hist, 20)
----

+num+ toma el valor del argumento. En otras palabras, el argumento opcional _anula_ el valor predeterminado.
(((anular)))

Si una función tiene parámetros obligatorios y opcionales, los parámetros obligatorios deben ir primero, seguidos de los opcionales.

[[dictionary_subtraction]]
=== Resta de Diccionario

Encontrar las palabras de un libro que no están en la lista de palabras de +palabras.txt+ es un problema similar a una resta de conjuntos, es decir, se quiere encontrar todas las palabras de un conjunto (las palabras en el libro) que no están en el otro (las palabras en la lista).

+resta+ toma los diccionarios +d1+ y +d2+ y devuelve un nuevo diccionario que contiene todas las claves de +d1+ que no están en +d2+. Como realmente no importan los valores, se fijan como +nothing+.
(((resta)))((("función", "definida por el programador", "resta", see="resta")))(((nothing)))(((∩)))((("operador", "Base", "∩", see="∩")))

[source,@julia-setup chap13]
----
function resta(d1, d2)
    res = Dict()
    for clave in keys(d1)
        if clave ∉ keys(d2)
            res[clave] = nothing
        end
    end
    res
end
----

Para encontrar las palabras en el libro que no están en +palabras.txt+, se ouede usar +procesararchivo+ para construir un histograma para +palabras.txt+, y luego la función +resta+:

[source,julia]
----
palabras = procesararchivo("palabras.txt")
dif = resta(hist, palabras)

println("Palabras en el libro que no están en la lista de palabras:")
for palabra in keys(dif)
    print(palabra, " ")
end
----

Estos son algunos de los resultados de _Don Quijote_:

[source]
----
Palabras en el libro que no están en la lista de palabras:
enojó angosta coronan sirviesen solene enderécese rescatarlos embotó estime renovaban ...
----

Algunas de estas palabras son conjugaciones de verbos. Otros, como "solene", ya no son de uso común. ¡Pero algunas son palabras comunes que deberían estar en la lista!


[[ex13-6]]
==== Ejercicio 13-6

Julia proporciona una estructura de datos llamada +Set+ que permite muchas operaciones comunes de conjuntos. Puede leer sobre ellas en <<collections_and_data_structures>>, o consultar la documentación en https://docs.julialang.org/en/v1/base/collections/#Set-Like-Collections-1.

Escriba un programa que use la resta de conjuntos para encontrar palabras en el libro que no están en la lista de palabras.

=== Palabras al Azar

Para elegir una palabra aleatoria del histograma, el algoritmo más simple es construir un arreglo con múltiples copias de cada palabra, de acuerdo con la frecuencia observada, y luego elegir una palabra del arreglo:
(((palabraalazar)))((("función", "definida por el programador", "palabraalazar", see="palabraalazar")))

[source,@julia-setup chap13]
----
function palabraalazar(h)
    t = []
    for (palabra, frec) in h
        for i in 1:frec
            push!(t, palabra)
        end
    end
    rand(t)
end
----

Este algoritmo funciona pero no es muy eficiente ya que cada vez que elige una palabra aleatoria, reconstruye el arreglo, que es tan grande como el libro original. Una mejora es construir el arreglo una vez y luego hacer múltiples selecciones, pero el arreglo sigue siendo grande.

Una alternativa es:

. Use las +claves+ para obtener un arreglo de palabras del libro.

. Cree un arreglo que contenga la suma acumulada de las frecuencias de palabras (vea <<ex10-2>>). El último elemento en este arreglo es el número total de palabras en el libro, latexmath:[n].

. Elija un número aleatorio del 1 al latexmath:[n]. Use búsqueda binaria (vea <<ex10-10>>) para encontrar el índice donde se insertará el número aleatorio en la suma acumulada.
(((búsqueda de bisección)))

. Use el índice para encontrar la palabra correspondiente en el arreglo de palabras.

[[ex13-7]]
==== Ejercicio 13-7

Escriba un programa que use este algoritmo para elegir una palabra aleatoria del libro.

[[markov_analysis]]
=== Análisis de Markov

Si elige palabras del libro al azar, puede tener una idea del vocabulario usado, pero probablemente no se va a obtener una oración:

[source]
----
rocinante pláticas sazón ojos Dulcinea Dios
----

Una serie de palabras aleatorias rara vez tiene sentido porque no hay relación entre palabras sucesivas. Por ejemplo, en una oración real, se esperaría que un artículo como "el" fuese seguido por un sustantivo y probablemente no un verbo o un adverbio.

Una forma de medir este tipo de relaciones es con el análisis de Markov, que define para una secuencia dada de palabras la probabilidad de las palabras que podrían venir después. Por ejemplo, en la canción _La vida es un carnaval_ (de Celiz Cruz):
(((análisis de Markov)))

[verse]
____
Todo aquel
Que piense que la vida siempre es cruel
Tiene que saber que no es así
Que tan solo hay momentos malos
Y todo pasa

Todo aquel
Que piense que esto nunca va cambiar
Tiene que saber que no es así
Que al mal tiempo, buena cara
Y todo cambia

Ay, no hay que llorar (No hay que llorar)
Que la vida es un carnaval
Que es más bello vivir cantando
____

En este texto, la frase "que piense" siempre va seguida de la palabra "que", pero la frase "piense que" puede ir seguida de "la" o "esto".

El resultado del análisis de Markov es un mapeo de cada prefijo (como "que piense" y "piense que") a todos los sufijos posibles (como "la" y "esto").
(((prefijo)))(((sufijo)))

Dada esta asignación, se puede generar un texto aleatorio comenzando con cualquier prefijo y eligiendo aleatoriamente entre los posibles sufijos. A continuación, puede combinar el final del prefijo y el nuevo sufijo para formar el siguiente prefijo y repetir.

Por ejemplo, si comienza con el prefijo "Que la", la siguiente palabra será "vida", porque el prefijo solo aparece dos veces en el texto y siempre está seguido de este sufijo. El siguiente prefijo es "la vida", por lo que el siguiente sufijo podría ser "siempre" o "es".

En este ejemplo, la longitud del prefijo siempre es dos, pero puede hacer análisis de Markov con un prefijo de cualquier longitud.

[[ex13-8]]
==== Ejercicio 13-8

Análisis de Markov:

. Escriba un programa que lea un texto desde un archivo y realice un análisis de Markov. El resultado debe ser un diccionario que asocie prefijos y una colección de posibles sufijos. La colección puede ser un arreglo, tupla o diccionario, depende de usted hacer una elección adecuada. Puede probar su programa con una longitud de prefijo de dos pero debe escribir el programa de manera tal que sea fácil probar con otras longitudes.

. Agregue una función al programa anterior para generar un texto aleatorio basado en análisis de Markov. Aquí hay un ejemplo de Don Quijote con longitud de prefijo 2:
+
[quote]
____
"Trifaldi, había de Troya, ni por la majestad real. Y con mis quejas. Desechásteme ¡oh estremo su frío del agravio a la espada, teniéndola por aca y más que sólo se trueca y con el cual encendía el ejemplo de aquellos cazadores"
____
+
Para este ejemplo, se dejó la puntuación anexa a las palabras. El resultado es casi sintácticamente correcto. Semánticamente, casi tiene sentido, pero no del todo.
+
¿Qué sucede si aumenta la longitud del prefijo? ¿El texto aleatorio tiene más sentido?

. Una vez que su programa esté funcionando, podría probar combinando texto de dos o más libros. El texto aleatorio que genere combinará el vocabulario y las frases de las fuentes de maneras interesantes.

Crédito: Este estudio de caso se basa en un ejemplo de Kernighan y Pike, The Practice of Programming, Addison-Wesley, 1999.

[TIP]
=====
Debe hacer este ejercicio antes de continuar.
=====

=== Estructuras de Datos

Usar análisis de Markov para generar texto aleatorio es divertido, pero además, este ejercicio tiene un trasfondo: la selección de la estructura de datos. En los los ejercicios anteriores, tenía que elegir:

* Cómo representar los prefijos.

* Cómo representar la colección de los posibles sufijos.

* Cómo representar la asociación de cada prefijo con la colección de posibles sufijos.

El último es fácil: un diccionario es la opción obvia para una asociación entre claves y valores correspondientes.

Para los prefijos, las opciones más obvias son cadena, arreglo de cadenas o tupla de cadenas.

Para los sufijos, puede ser un arreglo o un histograma (diccionario).

¿Cómo se elige? El primer paso es pensar en las operaciones que deberá implementar para cada estructura de datos. Para los prefijos, se debe ser capaz de eliminar palabras del principio y agregarlas al final. Por ejemplo, si el prefijo actual es "que piense" y la siguiente palabra es "que", debe poder formar el siguiente prefijo, "piense que".

Para los prefijos, podría elegir un arreglo, ya que en él es fácil agregar y eliminar elementos.

Para la colección de sufijos, las operaciones que se deben realizar incluyen agregar un nuevo sufijo (o aumentar la frecuencia de uno existente) y elegir un sufijo aleatorio.

Agregar un nuevo sufijo es igualmente fácil para la implementación del arreglo o del histograma. Elegir un elemento aleatorio de un arreglo es fácil pero elegir eficientemente de un histograma es más difícil (ver <<ex13-7>>).

Hasta ahora se ha hablado principalmente sobre la facilidad de implementación, pero hay otros factores a considerar al elegir las estructuras de datos. Uno es el tiempo de ejecución. A veces hay una razón teórica para esperar que una estructura de datos sea más rápida que otra. Por ejemplo, anteriormente se mencionó que el operador +in+ es más rápido para los diccionarios que para los arreglos, al menos cuando el número de elementos es grande.

Aunque generalmente no se sabe de antemano qué implementación será más rápida, una opción es implementar ambos y ver cuál es mejor. Este enfoque se llama _benchmarking_. Una alternativa práctica es elegir la estructura de datos que sea más fácil de implementar y luego ver si es lo suficientemente rápida para la aplicación prevista. Si es así, no hay necesidad de continuar. Si no, hay herramientas, como el módulo +Profile+, que pueden identificar los lugares en un programa que toman más tiempo.
(((benchmarking)))

El otro factor a considerar es el espacio de almacenamiento. Por ejemplo, usar un histograma para la colección de sufijos puede tomar menos espacio porque solo tiene que almacenar cada palabra una vez, sin importar cuántas veces aparezca en el texto. En algunos casos, ahorrar espacio también puede hacer que su programa se ejecute más rápido. En el peor de los casos, su programa podría no ejecutarse si se queda sin memoria pero para muchas aplicaciones el espacio es una consideración secundaria después del tiempo de ejecución.

Una última reflexión: en esta discusión, se ha dado a entender que se debería usar una estructura de datos para el análisis y la generación. Pero dado que estas son fases separadas, también sería posible usar una estructura para el análisis y luego convertirla en otra estructura para la generación. Esto sería conveniente si el tiempo ahorrado durante la generación excede el tiempo dedicado a la conversión.

[TIP]
====
El paquete de Julia +DataStructures+ (ver https://github.com/JuliaCollections/DataStructures.jl) implementa una variedad de estructuras de datos.
====


=== Depuración

Cuando está depurando un programa, y especialmente si está tratando de resolver un error difícil, hay cinco cosas que puede probar:
(((depuración)))

Lee:: 
Examine su código, léalo y verifique que dice lo que quería decir.

Ejecuta::
Experimente haciendo cambios y ejecutando diferentes versiones. A menudo, si muestra lo correcto en el lugar correcto del programa, el problema se vuelve obvio, pero para ello a veces tiene que desarrollar andamiaje.

Reflexiona:: 
¡Tómese un tiempo para pensar! ¿Qué tipo de error es: de sintaxis, tiempo de ejecución o semántica? ¿Qué información puede obtener de los mensajes de error o de la salida del programa? ¿Qué tipo de error podría causar el problema que estás viendo? ¿Qué cambió antes de que apareciera el problema?

Habla::
Si le explica el problema a otra persona, a veces puede encontrar la respuesta incluso antes de terminar de hacer la pregunta. Generalmente no es necesaria otra persona, incluso se podría hablar con un pato de goma. Este es el origen de la conocida estrategia llamada depuración del pato de goma. Esto es real, vea https://en.wikipedia.org/wiki/Rubber_duck_debugging.
(((depuración del pato de goma)))

Vuelve atrás:: 
En ocasiones, lo mejor que puede hacer es retroceder, deshacer los cambios recientes hasta regresar a un programa que funcione y que comprenda. Una vez logrado esto, puede comenzar a reconstruir.

Los programadores principiantes a veces se atascan en una de estas actividades y olvidan las otras. Cada actividad viene con su propia forma de fallar.

Por ejemplo, leer su código podría ayudar si el problema es un error tipográfico, pero no si el problema es un malentendido conceptual. Si no comprende lo que hace su programa, puede leerlo 100 veces y nunca ver el error, porque el error está en su cabeza.

Ejecutar experimentos puede ayudar, especialmente si ejecuta pruebas pequeñas y simples, pero si ejecuta experimentos sin pensar o leer su código, puede caer en un patrón llamado "programación de caminata aleatoria", que es el proceso de hacer cambios aleatorios hasta que el programa haga lo correcto. No hace falta decir que la programación de caminata aleatoria puede llevar mucho tiempo.
(((programación de caminata aleatoria)))

La persona que programa tiene que tomarse su tiempo para pensar. La depuración es como una ciencia experimental. Debe tener al menos una hipótesis sobre la causa del problema. Si hay dos o más opciones, trate de pensar en una prueba que elimine una de ellas.

Incluso las mejores técnicas de depuración fallarán si hay demasiados errores, o si el código que está tratando de corregir es demasiado grande y complicado. A veces, la mejor opción es volver atrás, simplificando el programa hasta que llegue a algo que funcione y que comprenda.

Los programadores principiantes a menudo son reacios a volver atrás porque no pueden soportar eliminar una línea de código (incluso si es incorrecto). Si le hace sentir mejor, copie su programa en otro archivo antes de comenzar a eliminarlo. Luego puede copiar las piezas una por una.

Encontrar un error difícil requiere leer, ejecutar, reflexionar y, a veces, volver atrás. Si se queda atascado en una de estas actividades, pruebe las otras.

=== Glosario

determinístico::
Perteneciente a un programa que hace lo mismo cada vez que se ejecuta, a partir de las mismas entradas.
(((determinístico)))

pseudoaleatorio::
Perteneciente a una secuencia de números que parecen ser aleatorios, pero que son generados por un programa determinista.
(((pseudoaleatorio)))

valor por defecto (o valor por omisión)::
El valor dado a un parámetro opcional si no se proporciona un argumento.
(((valor por defecto)))

anular::
Reemplazar un valor por defecto con un argumento.
(((anular)))

benchmarking::
El proceso de elegir entre estructuras de datos implementando alternativas y probándolas con una muestra de las posibles entradas.
(((benchmarking)))

depuración del pato de goma::
Depuración en dónde se explica el problema a un objeto inanimado, tal como un pato de goma. Articular el problema puede ayudarle a resolverlo, incluso si el pato de goma no sabe de Julia.
(((depuración del pato de goma)))


=== Ejercicios

[[ex13-9]]
==== Ejercicio 13-9

El "rango" de una palabra es su posición en un arreglo de palabras ordenadas por frecuencia: la palabra más común tiene rango 1, la segunda más común tiene rango 2, etc.

La ley de Zipf describe una relación entre los rangos y las frecuencias de las palabras en idiomas naturales (https://en.wikipedia.org/wiki/Zipfpass:[&apos;]s_law). Específicamente, predice que la frecuencia, latexmath:[f], de la palabra con rango latexmath:[r] es:
(((ley de Zipf)))

[latexmath]
++++
\begin{equation}
{f = c r^{-s}}
\end{equation}
++++
donde latexmath:[s] y latexmath:[c] son parámetros que dependen del idioma y el texto. Si aplicas logaritmo a ambos lados de esta ecuación, obtienes:

[latexmath]
++++
\begin{equation}
{\log f = \log c - s \log r}
\end{equation}
++++

Entonces, si se grafica latexmath:[\log f] versus latexmath:[\log r], se debería obtener una línea recta con pendiente latexmath:[-s] e intercepto latexmath:[\log c].

Escriba un programa que lea un texto de un archivo, cuente las frecuencias de las palabras e imprima una línea para cada palabra, en orden descendente de frecuencia, con  latexmath:[\log f] y latexmath:[\log r].

Instale una librería para graficar:
(((Plots)))((("módulo", "Plots", see="Plots")))

[source,jlcon]
----
(v1.0) pkg> add Plots
----

Su uso es muy sencillo:
(((graficar)))((("función", "Plots", "graficar", see="graficar")))

[source,julia]
----
using Plots
x = 1:10
y = x.^2
plot(x, y)
----

Use la librería +Plots+ para graficar los resultados y verificar si forman una línea recta.
