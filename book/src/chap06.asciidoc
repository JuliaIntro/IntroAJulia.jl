[[chap06]]
== Funciones productivas

Muchas de las funciones de Julia que se han utilizado, como las funciones matemáticas, producen valores de retorno. Todas las funciones que se han escrito hasta ahora son nulas, es decir, tienen un efecto (como imprimir un valor) pero devuelven el valor +nothing+. En este capítulo se enseña a escribir funciones productivas.
(((función productiva)))

=== Valores de retorno

Llamar a una función genera un valor de retorno, que generalmente se asigna a una variable o se usa como parte de una expresión.

[source,julia]
----
e = exp(1.0)
altura = radio * sin(radio)
----

Las funciones que se han escrito hasta ahora son nulas. Coloquialmente hablando, no tienen valor de retorno; de manera formal, su valor de retorno es +nothing+. En este capítulo, (finalmente) se van a escribir funciones productivas. El primer ejemplo es +area+, que devuelve el área de un círculo dado un radio:
(((nothing)))(((área)))((("funcion", "definida por el programador", "área", see="área")))

[source,@julia-setup]
----
function area(radio)
    a = π * radio^2
    return a
end
----
Se ha visto la sentencia +return+ antes pero en una función productiva la sentencia +return+ incluye una expresión. Esta sentencia significa: "Retorne inmediatamente de esta función y use la siguiente expresión como valor de retorno". La expresión dada puede ser arbitrariamente complicada. Así pues, se podría haber escrito esta función más concisamente:
(((sentencia return)))

[source,@julia-setup]
----
function area(radio)
    π * radio^2
end
----

El valor devuelto por una función es el valor de la última expresión evaluada, que, por defecto, es la última expresión en el cuerpo de la definición de la función.

Por otro lado, las _variables temporales_ como +a+, y las sentencias +return+ explícitas pueden facilitar la depuración.
(((variable temporal)))

A veces es útil tener múltiples sentencias +return+, una en cada rama de una sentencia condicional:
(((valorabsoluto)))((("función", "definida por el programador", "valorabsoluto", see="valorabsoluto")))

[source,@julia-setup chap06]
----
function valorabsoluto(x)
    if x < 0
        return -x
    else
        return x
    end
end
----

Dado que estas sentencias +return+ están en una condicional alternativa, solo se ejecuta una.
(((condicional alternativa)))

En cuanto se ejecuta una sentencia +return+, la función termina sin ejecutar ninguna de las sentencias siguientes. El código que aparece después de la sentencia +return+, o en cualquier otro lugar al que el flujo de ejecución nunca llegará, se llama código muerto.
(((flujo de ejecución)))(((código muerto)))

En una función productiva, es una buena idea asegurarse que cualquier posible recorrido del programa llegue a una sentencia +return+. Por ejemplo:

[source,@julia-setup chap06]
----
function valorabsoluto(x)
    if x < 0
        return -x
    end
    if x > 0
        return x
    end
end
----

Esta versión no es correcta porque si +x+ es igual a 0, ninguna de las condiciones es verdadera y la función termina sin alcanzar una sentencia +return+. Si el flujo de ejecución llega al final de la función, el valor de retorno es +nothing+, que claramente no es el valor absoluto de 0.

[source,@julia-repl-test chap06]
----
julia> show(valorabsoluto(0))
nothing
----

[TIP]
====
Julia tiene una función incorporada llamada +abs+ que calcula los valores absolutos.
(((abs)))((("función", "Base", "abs", see="abs")))
====


==== Ejercicio 6-1

Escriba la función +comparar+ que tome dos valores, +x+ y +y+, y que devuelva +1+ si +x > y+, +0+ si +x == y+, y +-1+ si +x < y+.

[[incremental_development]]
=== Desarrollo incremental

Conforme vaya escribiendo funciones más extensas puede empezar a dedicar más tiempo a la depuración.
(((depuración)))

Para lidiar con programas de complejidad creciente, se sugiere una técnica llamada desarrollo incremental. El objetivo del desarrollo incremental es evitar largas sesiones de depuración, adicionando y probando solamente pequeñas porciones de código cada vez.
(((desarrollo incremental)))

Por ejemplo, suponga que desea encontrar la distancia entre dos puntos dados por las coordenadas latexmath:[\left(x_1, y_1\right)] y latexmath:[\left(x_2, y_2\right)]. Por el teorema de Pitágoras, la distancia es:
(((teorema de Pitágoras)))

[latexmath]
++++
\begin{equation}
{d = \sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}}
\end{equation}
++++

El primer paso es considerar qué aspecto tendría la función distancia en Julia. En otras palabras, ¿cuáles son las entradas (parámetros) y cuál es la salida (valor de retorno)?

En este caso las entradas son los dos puntos, que se pueden representar usando cuatro números. El valor devuelto es la distancia, que es un número de punto flotante.


He aquí una primera versión de la función:
(((distancia)))((("función", "definida por el programador", "distancia", see="distancia")))

[source,@julia-setup chap06]
----
function distancia(x₁, y₁, x₂, y₂)
    0.0
end
----

Obviamente esta versión de la función no calcula distancias sino que siempre devuelve cero. Aun así, es correcta sintácticamente hablando y se ejecutará, lo que implica que se puede probar antes de hacerla más compleja. Los números de subíndice están disponibles en la codificación de caracteres Unicode (*+\_1 TAB+*, *+\_2 TAB+*, etc.).
(((carácter Unicode)))

Para probar la nueva función, se llama con una muestra de valores:

[source,@julia-repl-test chap06]
----
distance(1, 2, 4, 6)
----

Se eligen estos valores de tal forma que la distancia horizontal sea igual a 3 y la distancia vertical sea igual a 4 y de esa manera el resultado es 5 (la hipotenusa del triángulo 3-4-5). Cuando se comprueba una función, es útil conocer la respuesta correcta.

Hasta el momento se ha podido confirmar que la función es sintácticamente correcta, por lo que se puede empezar a agregar líneas de código. El paso lógico siguiente es encontrar las diferencias latexmath:[x_2 - x_1] y latexmath:[y_2 - y_1]. En la siguiente versión de la función se almacenarán estos valores en variables temporales y se mostrarán con el macro +@show+.
((("@show")))((("macro", "Base", "@show", see="@show")))

[source,@julia-setup]
----
function distancia(x₁, y₁, x₂, y₂)
    dx = x₂ - x₁
    dy = y₂ - y₁
    @show dx dy
    0.0
end
----

Si la función trabaja bien, las salidas deben ser +dx = 3+ y +dy = 4+. Si es así, se sabe que la función está obteniendo los parámetros correctos y realizando el primer cálculo correctamente. Si no, entonces sólo hay unas pocas líneas que revisar.

A continuación se calcula la suma de los cuadrados de +dx+ y +dy+:

[source,@julia-setup]
----
function distancia(x₁, y₁, x₂, y₂)
    dx = x₂ - x₁
    dy = y₂ - y₁
    d² = dx^2 + dy^2
    @show d²
    0.0
end
----

De nuevo se quiere ejecutar el programa en esta etapa y comprobar la salida (que debería ser 25). Los números en superíndice también están disponibles (*+\^2 TAB+*). Finalmente, se puede usar +sqrt+ para calcular y devolver el resultado:
(((sqrt)))

[source,@julia-setup]
----
function distancia(x₁, y₁, x₂, y₂)
    dx = x₂ - x₁
    dy = y₂ - y₁
    d² = dx^2 + dy^2
    sqrt(d²)
end
----

Si esto funciona correctamente, ya se habría terminado. Si no, se podría mostrar el valor de la variable resultado antes de la sentencia de retorno.

La versión final de la función no muestra nada cuando se ejecuta, sólo retorna un valor. Las sentencias print que se escriben son útiles para la depuración, pero una vez que el programa esté funcionando correctamente, se deben eliminar. El código eliminado se llama _andamiaje_ porque es útil para construir el programa pero no es parte del producto final.
(((andamiaje)))

Al principio, debería añadir solamente una o dos líneas de código cada vez. Conforme vaya ganando experiencia, puede que se encuentre escribiendo y depurando fragmentos mayores de código. Sin embargo, el proceso de desarrollo incremental puede ahorrarle mucho tiempo de depuración.

Los aspectos clave del proceso son:

. Iniciar con un programa que funcione y hacerle pequeños cambios incrementales. En cualquier momento, si hay un error, sabrá exactamente dónde está.

. Usar variables temporales para guardar valores intermedios para que pueda mostrarlos y verificarlos.

. Una vez que el programa esté funcionando, tal vez prefiera eliminar parte del andamiaje o consolidar múltiples sentencias en expresiones compuestas, pero sólo si eso no hace que el programa sea difícil de leer.

==== Ejercicio 6-2

Use la técnica de desarrollo incremental para escribir una función llamada +hipotenusa+ que retorne el largo de la hipotenusa de un triángulo rectángulo dado el largo de las otras dos aristas. Registre cada etapa del proceso de desarrollo.

=== Composición

Ahora, como usted esperaría, se puede llamar a una función desde otra. Como ejemplo, se escribe una función que tome dos puntos, el centro del círculo y un punto del perímetro, y calcule el área del círculo.
(((composición)))

Suponga que el punto central está almacenado en las variables +xc+ y +yc+, y que el punto del perímetro lo está en +xp+ y +yp+. El primer paso es hallar el radio del círculo, que es la distancia entre los dos puntos. La función distancia que realiza esta tarea sería:

[source,julia]
----
radio = distancia(xc, yc, xp, yp)
----

El siguiente paso es encontrar el área del círculo usando este radio. De nuevo se usa una de las funciones definidas previamente:

[source,julia]
----
resultado = area(radio)
----

Envolviendo todo en una función, se obtiene:
(((areacirculo)))((("función", "definida por el programador", "areacirculo", see="areacirculo")))

[source,@julia-setup]
----
function areacirculo(xc, yc, xp, yp)
    radio = distancia(xc, yc, xp, yp)
    resultado = area(radio)
    return resultado
end
----

Las variables temporales +radio+ y +resultado+ son útiles para el desarrollo y la depuración, pero una vez que el programa está funcionando, se puede hacer más conciso componiendo las llamadas a función:
(((variable temporal)))

[source,@julia-setup]
----
function areacirculo(xc, yc, xp, yp)
    area(distancia(xc, yc, xp, yp))
end
----


[[boolean_functions]]
=== Funciones Booleanas

Las funciones pueden devolver valores booleanos, lo que a menudo es conveniente para ocultar complicadas comprobaciones dentro de funciones. Por ejemplo:
(((función booleana)))(((esdivisible)))((("función", "definida por el programador", "esdivisible", see="esdivisible")))

[source,@julia-setup chap06]
----
function esdivisible(x, y)
    if x % y == 0
        return true
    else
        return false
    end
end
----
Es común dar a las funciones booleanas nombres que suenan como preguntas que tienen como respuesta un si ó un no, esdivisible devuelve +true+ o +false+ para indicar si +x+ es o no divisible por +y+.

Por ejemplo:

[source,@julia-repl-test chap06]
----
julia> esdivisible(6, 4)
false
julia> esdivisible(6, 3)
true
----

El resultado del operador +==+ es booleano, por lo tanto se puede escribir la función de una manera más concisa devolviendo el resultado directamente:
(((==)))

[source,@julia-setup]
----
function esdivisible(x, y)
    x % y == 0
end
----

Las funciones booleanas se usan a menudo en las sentencias condicionales:
(((sentencia condicional)))

[source,julia]
----
if esdivisible(x, y)
    println("x es divisible por y")
end
----

Puede parecer tentador escribir algo como:

[source,julia]
----
if esdivisible(x, y) == true
    println("x es divisible por y")
end
----

pero la comparación extra con +true+ es innecesaria.

==== Ejercicio 6-3

Escriba la función +entremedio(x,y,z)+ que devuelva +true+ si +x ≤ y ≤ z+, o +false+ en otro caso.

=== Más recursividad

Solo se ha cubierto una pequeña parte de Julia pero le puede interesar saber que esta parte ya es un lenguaje de programación _completo_, lo que significa que cualquier cómputo puede expresarse en este lenguaje. Cualquier programa que se haya escrito podría reescribirse usando solo lo que ha aprendido hasta ahora (en realidad, necesitaría algunos comandos para controlar dispositivos como el mouse, discos, etc., pero eso es todo).
(((recursión)))(((lenguaje de programación completo)))((("lenguaje de programación", "completo", see="lenguaje de programación completo")))

Probar esta afirmación es un ejercicio no trivial realizado por primera vez por Alan Turing, uno de los primeros científicos de la computación (algunos argumentarían que era matemático, pero muchos de los primeros científicos informáticos comenzaron como matemáticos). En consecuencia, esto se conoce como la Tesis de Turing. Para una discusión más completa (y precisa) de la Tesis de Turing, se recomienda el libro de Michael Sipser _Introducción a la Teoría de la Computación_.
(((Turing, Alan)))(((tesis de Turing)))

Para darle una idea de lo que puede hacer con las herramientas que ha aprendido hasta ahora, se evalúan algunas funciones matemáticas definidas recursivamente. Una definición recursiva es similar a una definición circular, en el sentido de que la definición contiene una referencia a lo que está siendo definido. Una definición verdaderamente circular no es muy útil:
(((definición recursiva)))(((definición circular)))

vorpal::
Un adjetivo usado para describir algo que es vorpal.

Si esta definición apareciese en el diccionario, la persona que la leyera podría molestarse. Por otro lado, si se busca la definición de la función factorial, denotada con el símbolo latexmath:[!], se encuentra encontrar algo como esto:
(((función factorial)))

[latexmath]
++++
\begin{equation}
{n! =
\begin{cases}
  1& \textrm{if}\  n = 0 \\
  n (n-1)!& \textrm{if}\  n > 0
\end{cases}}
\end{equation}
++++
Esta definición dice que el factorial de 0 es 1, y el factorial de cualquier otro valor latexmath:[n], es latexmath:[n]  multiplicado por el factorial de latexmath:[n-1].

Entonces latexmath:[3!] es 3 veces latexmath:[2!], que es 2 veces latexmath:[1!], que es 1 vez latexmath:[0!]. Es decir, latexmath:[3!] es igual a 3 por 2 por 1 por 1, que es 6.

Si se puede escribir una definición recursiva, se puede escribir un programa de Julia para evaluarlo. El primer paso es decidir cuáles deberían ser los parámetros. En este caso, debe quedar claro que factorial toma valores enteros:
(((fact)))((("función", "definida por el programador", "fact", see="fact")))

[source,@julia-setup]
----
function fact(n) end
----

Si el argumento es +0+, la función debe devolver +1+:

[source,@julia-setup]
----
function fact(n)
    if n == 0
        return 1
    end
end
----

De lo contrario, y esto es lo interesante, se tiene que hacer una llamada recursiva para encontrar el factorial de +n-1+ y luego multiplicarlo por +n+:

[source,@julia-setup]
----
function fact(n)
    if n == 0
        return 1
    else
        recursion = fact(n-1)
        resultado = n * recursion
        return resultado
    end
end
----
El flujo de ejecución de este programa es similar al flujo de +cuentaregresiva+ en <<recursion>>. Si llamamos a +fact+ con el valor +3+:
(((flujo de ejecución)))

[small]
--
Como +3+ no es +0+, se toma la segunda rama y se calcula el factorial de +n-1+ ...

pass:[&#8193;]Como +2+ no es +0+, se toma la segunda rama y se calcula el factorial de +n-1+ ...

pass:[&#8193;&#8193;]Como +1+ no es +0+, se toma la segunda rama y se calcula el factorial de + n-1 + ...

pass:[&#8193;&#8193;&#8193;]Como +0+ es igual a +0+, se toma la primera rama y devuelve +1+ sin realizar pass:[<br/>&#8193;&#8193;&#8193;&#8193;] más llamadas recursivas.

pass:[&#8193;&#8193;]El valor de retorno, +1+, se multiplica por +n+, que es +1+, y se devuelve el +resultado+.

pass:[&#8193;]El valor de retorno, +1+, se multiplica por +n+, que es +2+, y se devuelve el +resultado+.

El valor de retorno +2+ se multiplica por +n+, que es +3+, y el resultado, +6+, se convierte en el valor de retorno de la llamada a  función que inició todo el proceso.
--

[[fig06-1]]
.Diagrama de pila
image::images/fig61.svg[]


<<fig06-1>>  muestra cómo se ve el diagrama de pila para esta secuencia de llamadas a funciones.
(((diagrama de pila)))

Los valores de retorno se pasan de nuevo a la pila. En cada marco, el valor de retorno es el valor de +resultado+, que es el producto de +n+ y +recursion+.

En el último marco, las variables locales +recursion+ y +resultado+ no existen, porque la rama que las crea no se ejecuta.

[TIP]
====
Julia tiene la función +factorial+ para calcular el factorial de un número entero.
(((factorial)))((("función", "Base", "factorial", see="factorial")))
====


=== Salto de fe

Seguir el flujo de ejecución es una forma de leer programas, pero puede llegar a ser abrumador. Una alternativa es lo que se conoce como el "salto de fe"(en inglés, "leap of faith"). Cuando llega a una llamada de función, en lugar de seguir el flujo de ejecución, asume que la función funciona correctamente y devuelve el resultado correcto.
(((salto de fe)))

De hecho, ya se está haciendo este salto de fe cuando se usan funciones integradas de Julia. Cuando se llaman a +cos+ o +exp+, no se examinan los cuerpos de esas funciones. Simplemente se asume que funcionan porque las personas que las escribieron eran buenos programadores.

Lo mismo ocurre cuando el usuario llama a una de sus propias funciones. Por ejemplo, en <<boolean_functions>>, se escribe una función llamada +esdivisible+ que determina si un número es divisible por otro. Una vez que se confirme que esta función es correcta —al examinar y probar el código—, se puede usar la función sin mirar nuevamente el cuerpo.

Lo mismo aplica a los programas recursivos. Cuando llegue a la llamada recursiva, en lugar de seguir el flujo de ejecución, debe suponer que la llamada recursiva funciona (devuelve el resultado correcto) y luego preguntarse: "Suponiendo que pueda encontrar el factorial de latexmath:[n-1], ¿se puede calcular el factorial de latexmath:[n]?" Está claro que es posible, multiplicando por latexmath:[n].

Por supuesto, es un poco extraño suponer que la función funciona correctamente cuando no ha terminado de escribirla, ¡pero por eso se llama un salto de fe!

[[one_more_example]]
=== Un Ejemplo Más

Después de los factoriales, el ejemplo más común de una función matemática definida de manera recursiva es fibonacci, que tiene la siguiente definición (ver https://en.wikipedia.org/wiki/Fibonacci_number):
(((fibonnaci function)))

[latexmath]
++++
\begin{equation}
{fib(n) =
\begin{cases}
    0& \textrm{if}\  n = 0 \\
    1& \textrm{if}\  n = 1 \\
    fib(n-1) + fib(n-2)& \textrm{if}\  n > 1
\end{cases}}
\end{equation}
++++

Traducido a Julia, se ve así:
(((fib)))((("función", "definida por el programador", "fib", see="fib")))

[source,@julia-setup chap06]
----
function fib(n)
    if n == 0
        return 0
    elseif n == 1
        return 1
    else
        return fib(n-1) + fib(n-2)
    end
end
----

Si intenta seguir el flujo de ejecución en esta función, incluso para valores bastante pequeños de +n+, su cabeza podría estallar. Haciendo un salto de fe, es decir, asumiendo que las dos llamadas recursivas funcionan correctamente, entonces está claro que se obtiene el resultado correcto al sumarlas.

=== Tipos de Comprobación

¿Qué pasa si se llama a +fact+ con +1.5+ como argumento?
(((StackOverflowError)))

[source,jlcon]
----
julia> fact(1.5)
ERROR: StackOverflowError:
Stacktrace:
 [1] fact(::Float64) at ./REPL[3]:2
----

Parece una recursión infinita. ¿Como es esto posible? La función tiene un caso base (cuando +n == 0+). Pero si +n+ no es un número entero, es posible _perderse_ el caso base y hacer recursión para siempre.
(((recursión infinita)))

En la primera llamada recursiva, el valor de +n+ es +0.5+. En la siguiente, es +-0.5+. A partir de ahí, se vuelve más pequeño (más negativo), pero nunca será +0+.

Existen dos opciones. Se puede intentar generalizar la función factorial para trabajar con números de punto flotante, o se puede hacer que +fact+ verifique el tipo del argumento. La primera opción se llama función gamma y está un poco más allá del alcance de este libro. En este libro se proseguirá con la segunda.
(((función gamma)))

Se puede usar el operador integrado +isa+ para verificar el tipo de argumento. También se puede asegurarnos de que el argumento sea positivo:
(((isa)))(((fact)))

[source,@julia-setup chap06]
----
function fact(n)
    if !(n isa Int64)
        error("Factorial is only defined for integers.")
    elseif n < 0
        error("Factorial is not defined for negative integers.")
    elseif n == 0
        return 1
    else
        return n * fact(n-1)
    end
end
----

El primer caso base se hace cargo de números no enteros y el segundo de enteros negativos. En ambos casos, el programa imprime un mensaje de error y devuelve +nothing+ para indicar que algo salió mal:

[source,@julia-repl-test chap06]
----
julia> fact("fred")
ERROR: Factorial is only defined for integers.
julia> fact(-2)
ERROR: Factorial is not defined for negative integers.
----

Si se superan ambas verificaciones, se sabe que +n+ es positivo o cero, por lo que es posible probar que la recursión termina.

Este programa muestra un patrón a veces llamado _guardian_. Los dos primeros condicionales actúan como guardianes, protegiendo el código que sigue de los valores que pueden causar un error. Los guardianes hacen posible demostrar que el código es correcto.
(((guardian)))

En <<catching_exceptions>> se explorará una alternativa más flexible para imprimir un mensaje de error: generar una excepción.

[[deb06]]
=== Depuración

Dividir un código extenso en pequeñas funciones crea naturalmente puntos de control para la depuración. Si un programa no está funcionando, existen tres posibilidades a considerar:
(((depuración)))

* Hay algo incorrecto en los argumentos de la función, se viola una condición previa.
(((precondición)))

* Hay algo incorrecto en la función, se viola una condición posterior.
(((postcondición)))

* Hay algo incorrecto en el valor de retorno o la forma en que se está utilizando.

Para descartar la primera posibilidad, puede agregar una sentencia de impresión al comienzo de la función para mostrar los valores de los parámetros (y tal vez sus tipos) o bien escribir líneas de código que verifiquen las condiciones previas de manera explícita.

Si los parámetros están bien, agregue una sentencia de impresión antes de cada sentencia +return+ y muestre el valor de retorno. Si es posible, verifique el resultado a mano. Considere también llamar a la función con valores que faciliten la verificación del resultado (como en <<incremental_development>>).

Si la función parece estar funcionando, revise la llamada a función para asegurarse de que el valor de retorno se está utilizando correctamente (¡o incluso si se está utilizando!).

Agregar sentencias de impresión al principio y al final de una función puede ayudar a que el flujo de ejecución sea más transparente. Por ejemplo, aquí hay una versión de +fact+ con sentencias de impresión:
(((fact)))(((flujo de ejecución)))(((sentencia print)))

[source,@julia-setup chap06]
----
function fact(n)
    espacio = " " ^ (4 * n)
    println(espacio, "factorial ", n)
    if n == 0
        println(espacio, "returning 1")
        return 1
    else
        recursion = fact(n-1)
        resultado = n * recursion
        println(espacio, "devolviendo ", resultado)
        return resultado
    end
end
----

+espacio+ es una cadena de caracteres de espacio que permite generar sangría en la salida:

[source,@julia-repl chap06]
----
fact(4)
----

Si está confundido con el flujo de ejecución, este tipo de salida puede ser útil. Desarrollar un buen andamiaje toma tiempo, pero un poco de andamiaje puede ahorrar al usuario mucha depuración.

=== Glosario

variable temporal::
Variable usada para almacenar un valor intermedio en un cálculo complejo.
(((variable temporal)))

código muerto::
Parte de un programa que nunca puede ser ejecutado, a menudo porque aparece después de una sentencia +return+.
(((código muerto)))

desarrollo incremental::
Plan de desarrollo de un programa que intenta evitar la depuración agregando y probando solamente una pequeña porción de código a la vez.
(((desarrollo incremental)))(((plan de desarrollo de programa)))

andamiaje::
Código que se usa durante el desarrollo de un programa pero que no es parte de la versión final del mismo.
(((andamiaje)))

guardián::
Un patrón de programación que usa una sentencia condicional para verificar y manejar circunstancias que pueden causar un error.
(((guardián)))


=== Ejercicios

[[ex06-1]]
==== Ejercicio 6-4

Dibuje un diagrama de pila para el siguiente programa. ¿Qué imprime el programa?

[source,@julia-setup]
----
function b(z)
    prod = a(z, z)
    println(z, " ", prod)
    prod
end

function a(x, y)
    x = x + 1
    x * y
end

function c(x, y, z)
    total = x + y + z
    cuadrado = b(total)^2
    cuadrado
end

x = 1
y = x + 1
println(c(x, y+3, x+y))
----

[[ex06-2]]
==== Ejercicio 6-5

La función de Ackermann, latexmath:[A(m, n)], se define:
(((función Ackermann)))

[latexmath]
++++
\begin{equation}
{A(m, n) =
\begin{cases}
              n+1& \textrm{si}\ m = 0 \\
        A(m-1, 1)& \textrm{si}\ m > 0\ \textrm{y}\ n = 0 \\
A(m-1, A(m, n-1))& \textrm{si}\ m > 0\ \textrm{y}\ n > 0.
\end{cases}}
\end{equation}
++++

Vea https://en.wikipedia.org/wiki/Ackermann_function. Escriba una función llamada +ack+ que evalúe la función de Ackermann. Use su función para evaluar +ack(3, 4)+, que debería ser 125. ¿Qué sucede para valores mayores de +m+ y +n+?
(((ack)))((("función", "definida por el programador", "ack", see="ack")))

[[ex06-3]]
==== Ejercicio 6-6

Un palíndromo es una palabra que se escribe igual en un sentido que en otro, como "ana" y "radar". De manera recursiva, una palabra es un palíndromo si la primera y la última letra son iguales y lo que está entre ellas es un palíndromo.
(((palíndromo)))

Las siguientes funciones toman un argumento de tipo cadena y devuelven la primera letra, la última, y las intermedias:
(((primera)))((("función", "definida por el programador", "primera", see="primera")))(((ultima)))((("función", "definida por el programador", "ultima", see="ultima")))(((medio)))((("función", "definida por el programador", "medio", see="medio")))

[source,@julia-setup]
----
function primera(palabra)
    primera = firstindex(palabra)
    palabra[primera]
end

function ultima(palabra)
    ultima = lastindex(palabra)
    palabra[ultima]
end

function medio(palabra)
    primera = firstindex(palabra)
    ultima = lastindex(palabra)
    palabra[nextind(palabra, primera) : prevind(palabra, ultima)]
end
----

Se verá cómo funcionan en <<chap08>>.

. Pruebe estas funciones. ¿Qué sucede si llama a la función medio con una cadena de dos letras? ¿Y con una cadena de una letra? ¿Qué pasa con la cadena vacía +""+, que no contiene letras?

. Escriba una función llamada +espalindromo+ que tome un argumento de tipo cadena y devuelva +true+ si es un palíndromo y +false+ de lo contrario. Recuerde que puede usar la función integrada +length+ para verificar la longitud de una cadena.
(((espalindromo)))((("función", "definida por el programador", "espalindromo", see="espalindromo")))(((length)))

[[ex06-4]]
==== Ejercicio 6-7

Un número, latexmath:[a], es una potencia de latexmath:[b] si es divisible por latexmath:[b] y latexmath:[\frac{a}{b}] es una potencia de latexmath:[b]. Escriba una función llamada +espotencia+ que tome los parámetros +a+ y +b+ y devuelva +true+ si +a+ es una potencia de +b+.
(((espotencia)))((("función", "definida por el programador", "espotencia", see="espotencia")))

[TIP]
====
Tendrá que pensar en el caso base.
====

[[ex06-5]]
==== Ejercicio 6-8

El máximo común divisor (MCD) de latexmath:[a] y latexmath:[b] es el número más grande que los divide a ambos con resto 0.

Una forma de encontrar el MCD de dos números se basa en la observación de que si latexmath:[r] es el resto cuando latexmath:[a] se divide por latexmath:[b], entonces +mcd(a, b) = mcd(b, r)+. Como caso base, podemos usar +mcd(a, 0) = a+.

Escriba una función llamada +mcd+ que tome los parámetros +a+ y +b+ y devuelva su máximo divisor común.
(((mcd)))((("función", "definida por el programador", "mcd", see="mcd")))

Créditos: Este ejercicio se basa en un ejemplo del libro _Estructura e interpretación de programas informáticos_ de Abelson y Sussman.
