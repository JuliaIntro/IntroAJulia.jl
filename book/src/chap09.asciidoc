[[chap09]]
== Case Study: Word Play

This chapter presents the second case study, which involves solving word puzzles by searching for words that have certain properties. For example, we’ll find the longest palindromes in English and search for words whose letters appear in alphabetical order. And I will present another program development plan: reduction to a previously solved problem.

[[reading_word_lists]]
=== Reading Word Lists

For the exercises in this chapter we need a list of English words. There are lots of word lists available on the Web, but the one most suitable for our purpose is one of the word lists collected and contributed to the public domain by Grady Ward as part of the Moby lexicon project (see https://wikipedia.org/wiki/Moby_Project). It is a list of 113809 official crosswords; that is, words that are considered valid in crossword puzzles and other word games. In the Moby collection, the filename is _113809of.fic_; you can download a copy, with the simpler name _words.txt_, from https://github.com/BenLauwens/ThinkJulia.jl/blob/master/data/words.txt.
(((Mobi lexicon)))

This file is in plain text, so you can open it with a text editor, but you can also read it from Julia. The built-in function +open+ takes the name of the file as a parameter and returns a _file stream_ you can use to read the file.
(((open)))((("function", "Base", "open", see="open")))

[source,@julia-eval chap09]
----
using PiensaEnJulia
fin = open(PiensaEnJulia.datapath("words.txt"));
----

[source,jlcon]
----
julia> fin = open("words.txt")
IOStream(<file words.txt>)
----

+fin+ is a file stream used for input and when it is no longer needed, it has to be closed with +close(fin)+.

Julia provides several function for reading, including +readline+, which reads characters from the file until it gets to a +NEWLINE+ and returns the result as a string:
(((file stream)))(((input)))(((readline)))((("function", "Base", "readline", see="readline")))(((close)))

[source,@julia-repl chap09]
----
readline(fin)
----

The first word in this particular list is “aa”, which is a kind of lava.

The file stream keeps track of where it is in the file, so if you call readline again, you get the next word:

[source,@julia-repl chap09]
----
readline(fin)
----

The next word is “aah”, which is a perfectly legitimate word, so stop looking at me like that.

You can also use a file as part of a +for+ loop. This program reads +words.txt+ and prints each word, one per line:
(((for statement)))(((eachline)))((("function", "Base", "eachline", see="eachline")))

[source,julia]
----
for line in eachline("words.txt")
    println(line)
end
----


=== Exercises

[[ex09-1]]
==== Exercise 9-1

Write a program that reads +words.txt+ and prints only the words with more than 20 characters (not counting whitespace).

[[ex09-2]]
==== Exercise 9-2

In 1939 Ernest Vincent Wright published a 50,000 word novel called Gadsby that does not contain the letter +'e'+. Since +'e'+ is the most common letter in English, that’s not easy to do.
(((Wright, Ernest Vincent)))

In fact, it is difficult to construct a solitary thought without using that most common symbol. It is slow going at first, but with caution and hours of training you can gradually gain facility.

All right, I’ll stop now.

Write a function called +hasno_e+ that returns +true+ if the given word doesn’t have the letter +'e'+ in it.
(((hasno_e)))((("function", "programmer-defined", "hasno_e", see="hasno_e")))

Modify your program from the previous section to print only the words that have no +'e'+ and compute the percentage of the words in the list that have no +'e'+.

[[ex09-3]]
==== Exercise 9-3

Write a function named +avoids+ that takes a word and a string of forbidden letters, and that returns +true+ if the word doesn’t use any of the forbidden letters.
(((avoids)))((("function", "programmer-defined", "avoids", see="avoids")))

Modify your program to prompt the user to enter a string of forbidden letters and then print the number of words that don’t contain any of them. Can you find a combination of 5 forbidden letters that excludes the smallest number of words?

[[ex09-4]]
==== Exercise 9-4

Write a function named +usesonly+ that takes a word and a string of letters, and that returns +true+ if the word contains only letters in the list. Can you make a sentence using only the letters +acefhlo+? Other than +"Hoe alfalfa?"+
(((usesonly)))((("function", "programmer-defined", "usesonly", see="usesonly")))

[[ex09-5]]
==== Exercise 9-5

Write a function named +usesall+ that takes a word and a string of required letters, and that returns +true+ if the word uses all the required letters at least once. How many words are there that use all the vowels +aeiou+? How about +aeiouy+?
(((usesall)))((("function", "programmer-defined", "usesall", see="usesall")))

[[ex09-6]]
==== Exercise 9-6

Write a function called +isabecedarian+ that returns +true+ if the letters in a word appear in alphabetical order (double letters are ok). How many abecedarian words are there?
(((isabecedarian)))((("function", "programmer-defined", "isabecedarian", see="isabecedarian")))

[[search]]
=== Search

All of the exercises in the previous section have something in common; they can be solved with the search pattern. The simplest example is:
(((search)))(((hasno_e)))

[source,@julia-setup chap09]
----
function hasno_e(word)
    for letter in word
        if letter == 'e'
            return false
        end
    end
    true
end
----

The +for+ loop traverses the characters in word. If we find the letter +'e'+, we can immediately return +false+; otherwise we have to go to the next letter. If we exit the loop normally, that means we didn’t find an +'e'+, so we return +true+.

You could write this function more concisely using the +∉+ (*+\notin TAB+*) operator, but I started with this version because it demonstrates the logic of the search pattern.
(((∉)))((("operator", "Base", "∉", see="∉")))

+avoids+ is a more general version of +hasno_e+ but it has the same structure:
(((avoids)))

[source,@julia-setup chap09]
----
function avoids(word, forbidden)
    for letter in word
        if letter ∈ forbidden
            return false
        end
    end
    true
end
----

We can return +false+ as soon as we find a forbidden letter; if we get to the end of the loop, we return +true+.

+usesonly+ is similar except that the sense of the condition is reversed:
(((usesonly)))

[source,@julia-setup chap09]
----
function usesonly(word, available)
    for letter in word
        if letter ∉ available
            return false
        end
    end
    true
end
----

Instead of an array of forbidden letters, we have an array of available letters. If we find a letter in +word+ that is not in +available+, we can return +false+.

+usesall+ is similar except that we reverse the role of the word and the string of letters:
(((usesall)))

[source,@julia-setup chap09]
----
function usesall(word, required)
    for letter in required
        if letter ∉ word
            return false
        end
    end
    true
end
----

Instead of traversing the letters in word, the loop traverses the required letters. If any of the required letters do not appear in the word, we can return +false+.

If you were really thinking like a computer scientist, you would have recognized that +usesall+ was an instance of a previously solved problem, and you would have written:

[source,@julia-setup chap09]
----
function usesall(word, required)
    usesonly(required, word)
end
----

This is an example of a program development plan called _reduction to a previously solved problem_, which means that you recognize the problem you are working on as an instance of a solved problem and apply an existing solution.
(((program development plan)))(((reduction to a previously solved problem)))


=== Looping with Indices

I wrote the functions in the previous section with +for+ loops because I only needed the characters in the strings; I didn’t have to do anything with the indices.

For +isabecedarian+ we have to compare adjacent letters, which is a little tricky with a +for+ loop:
(((isabecedarian)))(((for statement)))

[source,@julia-setup chap09]
----
function isabecedarian(word)
    i = firstindex(word)
    previous = word[i]
    j = nextind(word, i)
    for c in word[j:end]
        if c < previous
            return false
        end
        previous = c
    end
    true
end
----

An alternative is to use recursion:
(((recursion)))

[source,@julia-setup chap09]
----
function isabecedarian(word)
    if length(word) <= 1
        return true
    end
    i = firstindex(word)
    j = nextind(word, i)
    if word[i] > word[j]
        return false
    end
    isabecedarian(word[j:end])
end
----

Another option is to use a +while+ loop:
(((while statement)))

[source,@julia-setup chap09]
----
function isabecedarian(word)
    i = firstindex(word)
    j = nextind(word, 1)
    while j <= sizeof(word)
        if word[j] < word[i]
            return false
        end
        i = j
        j = nextind(word, i)
    end
    true
end
----

The loop starts at +i=1+ and +j=nextind(word, 1)+ and ends when +j>sizeof(word)+. Each time through the loop, it compares the ++i++th character (which you can think of as the current character) to the ++j++th character (which you can think of as the next).

If the next character is less than (alphabetically before) the current one, then we have discovered a break in the abecedarian trend, and we return +false+.

If we get to the end of the loop without finding a fault, then the word passes the test. To convince yourself that the loop ends correctly, consider an example like +"flossy"+.

Here is a version of +ispalindrome+ that uses two indices; one starts at the beginning and goes up; the other starts at the end and goes down.
(((ispalindrome)))

[source,@julia-setup chap09]
----
function ispalindrome(word)
    i = firstindex(word)
    j = lastindex(word)
    while i<j
        if word[i] != word[j]
            return false
        end
        i = nextind(word, i)
        j = prevind(word, j)
    end
    true
end
----

Or we could reduce to a previously solved problem and write:

[source,@julia-setup chap08]
----
function ispalindrome(word)
    isreverse(word, word)
end
----

Using +isreverse+ from <<deb08>>.
(((isreverse)))


=== Debugging

Testing programs is hard. The functions in this chapter are relatively easy to test because you can check the results by hand. Even so, it is somewhere between difficult and impossible to choose a set of words that test for all possible errors.
(((debugging)))

Taking +hasno_e+ as an example, there are two obvious cases to check: words that have an +'e'+ should return +false+, and words that don’t should return +true+. You should have no trouble coming up with one of each.

Within each case, there are some less obvious subcases. Among the words that have an “e”, you should test words with an “e” at the beginning, the end, and somewhere in the middle. You should test long words, short words, and very short words, like the empty string. The empty string is an example of a _special case_, which is one of the non-obvious cases where errors often lurk.
(((special case)))

In addition to the test cases you generate, you can also test your program with a word list like +words.txt+. By scanning the output, you might be able to catch errors, but be careful: you might catch one kind of error (words that should not be included, but are) and not another (words that should be included, but aren’t).

In general, testing can help you find bugs, but it is not easy to generate a good set of test cases, and even if you do, you can’t be sure your program is correct. According to a legendary computer scientist:
(((Dijkstra, Edsger W.)))

[quote,  Edsger W. Dijkstra]
____
Program testing can be used to show the presence of bugs, but never to show their absence!
____

=== Glossary

file stream::
A value that represents an open file.
(((file stream)))

reduction to a previously solved problem::
A way of solving a problem by expressing it as an instance of a previously solved problem.
(((reduction to a previously solved problem)))

special case::
A test case that is atypical or non-obvious (and less likely to be handled correctly).
(((special case)))


=== Exercises

[[ex09-7]]
==== Exercise 9-7

This question is based on a Puzzler that was broadcast on the radio program _Car Talk_ (https://www.cartalk.com/puzzler/browse):
(((Car Talk)))

[quote]
____
Give me a word with three consecutive double letters. I’ll give you a couple of words that almost qualify, but don’t. For example, the word committee, c-o-m-m-i-t-t-e-e. It would be great except for the 'i' that sneaks in there. Or Mississippi: M-i-s-s-i-s-s-i-p-p-i. If you could take out those i’s it would work. But there is a word that has three consecutive pairs of letters and to the best of my knowledge this may be the only word. Of course there are probably 500 more but I can only think of one. What is the word?
____

Write a program to find it.

[[ex09-8]]
==== Exercise 9-8

Here’s another _Car Talk_ Puzzler (https://www.cartalk.com/puzzler/browse):

[quote]
____
I was driving on the highway the other day and I happened to notice my odometer. Like most odometers, it shows six digits, in whole miles only. So, if my car had 300000 miles, for example, I’d see 3-0-0-0-0-0.

Now, what I saw that day was very interesting. I noticed that the last 4 digits were palindromic; that is, they read the same forward as backward. For example, 5-4-4-5 is a palindrome, so my odometer could have read 3-1-5-4-4-5.

One mile later, the last 5 numbers were palindromic. For example, it could have read 3-6-5-4-5-6. One mile after that, the middle 4 out of 6 numbers were palindromic. And you ready for this? One mile later, all 6 were palindromic!

The question is, what was on the odometer when I first looked?
____

Write a Julia program that tests all the six-digit numbers and prints any numbers that satisfy these requirements.

[[ex09-9]]
==== Exercise 9-9

Here’s another _Car Talk_ Puzzler you can solve with a search (https://www.cartalk.com/puzzler/browse):

[quote]
____
Recently I had a visit with my mom and we realized that the two digits that make up my age when reversed resulted in her age. For example, if she’s 73, I’m 37. We wondered how often this has happened over the years but we got sidetracked with other topics and we never came up with an answer.

When I got home I figured out that the digits of our ages have been reversible six times so far. I also figured out that if we’re lucky it would happen again in a few years, and if we’re really lucky it would happen one more time after that. In other words, it would have happened 8 times over all. So the question is, how old am I now?
____

Write a Julia program that searches for solutions to this Puzzler.

[TIP]
====
You might find the function +lpad+ useful.
(((lpad)))((("function", "Base", "lpad", see="lpad")))
====

