[[chap09]]
== Estudio de Caso: Juego de Palabras

Este capítulo presenta un segundo estudio de caso, que consiste en resolver puzzles buscando palabras que tengan ciertas propiedades. Por ejemplo, se buscarán palabras cuyas letras aparezcan en orden alfabético. Además, se presentará otra forma de desarrollar programas: la reducción a un problema previamente resuelto.

[[reading_word_lists]]
=== Leer listas de palabras

Para los ejercicios de este capítulo se necesita una lista de palabras en español. Hay muchas listas de palabras disponibles en la Web, pero la más adecuada para nuestro propósito es una de las listas de palabras recopiladas y contribuidas al dominio público por Ismael Olea (see http://olea.org/proyectos/lemarios/). Esta lista de 87900 palabras se encuentra en la página de Olea con el nombre de archivo _lemario-general-del-espanol.txt_. También es posible descargar una copia desde https://github.com/JuliaIntro/IntroAJulia.jl/blob/master/data/palabras.txt.
(((lemario)))

Este archivo es un archivo de texto simple, por lo que puede ser abierto con un editor de texto o leído con Julia. La función integrada +open+ toma el nombre del archivo como parámetro y devuelve un objeto archivo que puede ser usado para la lectura del archivo.
(((open)))((("función", "Base", "open", see="open")))

[source,@julia-eval chap09]
----
using IntroAJulia
fin = open(IntroAJulia.datapath("palabras.txt"));
----

[source,jlcon]
----
julia> fin = open("palabras.txt")
IOStream(<file palabras.txt>)
----

+fin+ es un objeto archivo que puede ser utilizado como entrada y cuando se deja de utilizar, debe cerrarse con +close(fin)+.

Julia tiene integradas varias funciones de lectura, entre ellas +readline+, que lee los caracteres del archivo hasta que llega a un +salto de línea+, devolviendo el resultado como una cadena:
(((file stream)))(((input)))(((readline)))((("función", "Base", "readline", see="readline")))(((close)))

[source,@julia-repl chap09]
----
readline(fin)
----

La primera palabra en esta lista particular es "a", que indica dirección, intervalo de tiempo, finalidad, entre otros.

El objeto archivo lleva registro de dónde quedó por última vez, por lo que si llama a readline nuevamente, se obtendrá la siguiente palabra:

[source,@julia-repl chap09]
----
readline(fin)
----

La siguiente palabra es "a-", que es un prefijo que indica privación.

También se puede usar un archivo como parte de un bucle +for+. El siguiente programa lee +palabras.txt+ e imprime cada palabra, una por línea:
(((sentencia for)))(((eachline)))((("función", "Base", "eachline", see="eachline")))

[source,julia]
----
for line in eachline("palabras.txt")
    println(line)
end
----


=== Ejercicios

[[ex09-1]]
==== Ejercicio 9-1

Escriba un programa que lea +palabras.txt+ e imprima solo las palabras con más de 20 caracteres (sin contar espacios en blanco).

[[ex09-2]]
==== Ejercicio 9-2

En 1927 Enrique Jardiel Poncela publicó cinco historias cortas, omitiendo en cada una de ellas una vocal. Estas historias incluyen "El Chofer Nuevo", narración escrita sin la letra +'a'+, y "Un marido sin vocación", sin la letra +'e'+. Dado que la letra +'e'+ es la más frecuente del español, esto no es fácil de lograr.
(((Poncela, Enrique Jardiel)))

De hecho, es difícil pensar oraciones que no utilicen esta letra. Intentarlo es complicado, pero con la práctica se vuelve más fácil.

Bueno, volviendo al tema importante.

Escriba una función llamada +notiene_e+ que devuelva +true+ si una palabra dada no tiene la letra +'e'+.
(((notiene_e)))((("función", "definida por el programador", "notiene_e", see="notiene_e")))

Modifique su programa de la sección anterior para que imprima solo las palabras que no tienen +'e'+, y que además calcule el porcentaje de palabras en la lista que no tengan +'e'+.

[[ex09-3]]
==== Ejercicio 9-3

Escriba una función llamada +evitar+ que tome como argumentos una palabra y una cadena de letras prohibidas, y que devuelva +true+ si la palabra no usa ninguna de las letras prohibidas.
(((evitar)))((("función", "definida por el programador", "evita", see="evita")))

Modifique su programa de la sección anterior para solicitar al usuario que ingrese una cadena de letras prohibidas, y que luego imprima el número de palabras que no contengan ninguna de ellas. ¿Es posible encontrar una combinación de 5 letras prohibidas que excluya la menor cantidad de palabras?

[[ex09-4]]
==== Ejercicio 9-4

Escriba una función llamada +usasolo+ que tome una palabra y una cadena de letras, y que devuelva +true+ si la palabra contiene solo letras de la lista. ¿Puede hacer una oración usando solo las letras +oneacmil+? Aparte de +"¿El camino?"+
(((usasolo)))((("función", "definida por el programador", "usasolo", see="usasolo")))

[[ex09-5]]
==== Ejercicio 9-5

Escriba una función llamada +usatodo+ que tome una palabra y una cadena de letras, y que devuelva +true+ si la palabra usa todas las letras requeridas al menos una vez. ¿Cuántas palabras usan todas las vocales +aeiou+? 
(((usatodo)))((("función", "definida por el programador", "usatodo", see="usatodo")))

[[ex09-6]]
==== Ejercicio 9-6

Escriba una función llamada +esabecedaria+ que devuelva +true+ si las letras de una palabra aparecen en orden alfabético. ¿Cuántas palabras de este tipo hay?
(((esabecedaria)))((("función", "definida por el programador", "esabecedaria", see="esabecedaria")))

[[search]]
=== Búsqueda

Todos los ejercicios en la sección anterior tienen algo en común: se pueden resolver con el patrón de búsqueda. El ejemplo más simple es:
(((búsqueda)))(((notiene_e)))

[source,@julia-setup chap09]
----
function notiene_e(palabra)
    for letra in palabra
        if letra == 'e'
            return false
        end
    end
    true
end
----

El bucle +for+ recorre los caracteres de palabra. Si encontramos la letra +'e'+, puede devolver inmediatamente +false+, de lo contrario hay que pasar a la siguiente letra. Si se sale del bucle normalmente, eso significa que no se encontró una +'e'+, por lo que la función devuelve +true+.

Esta función podría ser escrita de manera más concisa usando el operador +∉+ (*+\notin TAB+*), pero se comienza con esta versión porque muestra la lógica del patrón de búsqueda.
(((∉)))((("operador", "Base", "∉", see="∉")))

+evita+ es una versión más general de +notiene_e+ pero tiene la misma estructura:
(((evita)))

[source,@julia-setup chap09]
----
function evita(palabra, prohibidas)
    for letra in palabra
        if letter ∈ prohibidas
            return false
        end
    end
    true
end
----

Se devuelve +false+ tan pronto como se encuentre una letra prohibida, si llegamos al final del ciclo, se devuelve +true+.

+usasolo+ es similar, excepto que el sentido de la condición se invierte:
(((usasolo)))

[source,@julia-setup chap09]
----
function usasolo(palabra, disponibles)
    for letra in palabra
        if letra ∉ disponibles
            return false
        end
    end
    true
end
----

En vez de un conjunto de letras prohibidas, se tiene un conjunto de letras disponibles. Si se encuentra una letra en +palabra+ que no está en +disponible+, se devuelve +false+.

+usatodo+ es similar, excepto que se invierte el papel de la palabra y la cadena de letras:
(((usatodo)))

[source,@julia-setup chap09]
----
function usatodo(palabra, requeridas)
    for letra in requeridas 
        if letra ∉ palabra
            return false
        end
    end
    true
end
----

En lugar de recorrer las letras de la palabra, el bucle recorre las letras requeridas. Si alguna de las letras requeridas no aparece en la palabra, se devuelve +false+.

Si se pensara como un informático se reconocería que +usatodo+ es una instancia de un problema previamente resuelto y se podría haber escrito:

[source,@julia-setup chap09]
----
function usatodo(palabra, requeridas)
    usasolo(requeridas, palabra)
end
----

Este es un ejemplo de una forma de desarrollar programas llamada _reducción a un problema resuelto previamente_, lo que significa que se reconoce el problema en el que se está trabajando como una instancia de un problema ya resuelto y se aplica la solución existente.
(((plan de desarrollo de programa)))(((reducción a un problema resuelto previamente)))


=== Bucle con índices

Las funciones de la sección anterior fueron escritas con ciclos +for+ porque solo se necesitaban los caracteres en las cadenas y no hubo necesidad de trabajar con los índices. 

Para +esabecedaria+ tenemos que comparar letras adyacentes, lo cual es un poco complicado con un ciclo +for+:
(((esabecedaria)))(((sentencia for)))

[source,@julia-setup chap09]
----
function esabecedaria(palabra)
    i = firstindex(palabra)
    previa = palabra[i]
    j = nextind(palabra, i)
    for c in palabra[j:end]
        if c < previa
            return false
        end
        previa = c
    end
    true
end
----

Otra alternativa es usar recursividad:
(((recursión)))

[source,@julia-setup chap09]
----
function esabecedaria(palabra)
    if length(palabra) <= 1
        return true
    end
    i = firstindex(palabra)
    j = nextind(palabra, i)
    if palabra[i] > palabra[j]
        return false
    end
    esabecedaria(palabra[j:end])
end
----

Una tercera opción es usar un ciclo +while+:
(((sentencia while)))

[source,@julia-setup chap09]
----
function esabecedaria(palabra)
    i = firstindex(palabra)
    j = nextind(palabra, 1)
    while j <= sizeof(palabra)
        if palabra[j] < palabra[i]
            return false
        end
        i = j
        j = nextind(palabra, i)
    end
    true
end
----

El ciclo comienza en +i=1+ y +j=nextind(palabra, 1)+ y termina cuando +j>sizeof(palabra)+. En cada iteración, se compara el carácter ++i++ésimo (que se puede considerar como el carácter actual) con el carácter ++j++ésimo (que se puede considerar como el siguiente).

Si el siguiente carácter es menor (va antes en el alfabeto) que el actual, entonces la palabra no tiene sus letras en orden alfabético, y se devuelve +false+.

Si se llega al final del ciclo sin encontrar letras que imposibiliten el orden alfabético, entonces la palabra pasa la prueba. Para convencerse de que el ciclo termina correctamente, considere como ejemplo la palabra +"Abel"+.

A continuación se muestra una versión de +espalindromo+ que usa dos índices: uno comienza al principio de la palabra y aumenta su valor, y el otro comienza al final y disminuye su valor.
(((espalindromo)))

[source,@julia-setup chap09]
----
function espalindromo(palabra)
    i = firstindex(palabra)
    j = lastindex(palabra)
    while i<j
        if palabra[i] != palabra[j]
            return false
        end
        i = nextind(palabra, i)
        j = prevind(palabra, j)
    end
    true
end
----

O podríamos reducir este problema a uno previamente resuelto y escribir:

[source,@julia-setup chap08]
----
function espalindromo(palabra)
    isreverse(palabra, palabra)
end
----

Usando +esreverso+ de <<deb08>>.
(((esreverso)))


=== Depuración

Comprobar el correcto funcionamiento de los programas es difícil. Las funciones de este capítulo son relativamente fáciles de probar porque se pueden verificar los resultados a mano. Aun así, es casi imposible elegir un conjunto de palabras que permitan evaluar todos los posibles errores.
(((depuración)))

Tomando +notiene_e+ como ejemplo, hay dos casos obvios que verificar: las palabras que tienen una +'e'+ deberían devolver +false+ y las palabras que no, deberían devolver +true+. No deberían haber problemas para encontrar un ejemplo de cada uno.

Dentro de cada caso, hay algunos subcasos menos obvios. Entre las palabras que tienen una "e", se deben probar las palabras con una "e" al principio, al final y al medio. Además, se deben probar palabras largas, cortas y muy cortas, como una cadena vacía. La cadena vacía es un ejemplo de un "caso especial" no obvio donde pueden originarse errores.
(((caso especial)))

Además de las instancias de prueba generadas, también puede probar su programa con una lista de palabras como +palabras.txt+. Al escanear el resultado, es posible que pueda detectar errores, pero tenga cuidado: puede detectar un tipo de error (palabras que no deberían incluirse, pero lo están) y no otro (palabras que deberían incluirse, pero no lo están).

Por lo general, las pruebas pueden ayudarlo a encontrar errores, pero no es fácil generar un buen conjunto de instancias de prueba e incluso si lo hace, no puede estar seguro de que su programa sea correcto. Según un informático muy famoso:
(((Dijkstra, Edsger W.)))

[quote,  Edsger W. Dijkstra]
____
Las pruebas de programa se pueden usar para mostrar la presencia de errores, ¡pero nunca para mostrar su ausencia!
____

=== Glosario

objeto archivo o file stream::
Un valor que representa un archivo abierto.
(((file stream)))

reducción a un problema previamente resuelto::
Una manera de resolver un problema expresándolo como una instancia de un problema previamente resuelto.
(((reducción a un problema previamente resuelto)))

caso especial::
Una instancia de prueba que es atípica o no obvia (y por lo tanto, menos probable que se maneje correctamente).
(((caso especial)))


=== Ejercicios

[[ex09-7]]
==== Ejercicio 9-7

Esta pregunta se basa en un Puzzle que se transmitió en el programa de radio _Car Talk_ (https://www.cartalk.com/puzzler/browse):
(((Car Talk)))

[quote]
____

Se tiene una secuencia de números y se desea saber cuál es el siguiente. Los números son: 4, 6, 12, 18, 30, 42, 60 y luego X.

Pista 1: Todos los números de la secuencia son pares.
Pista 2: El número que va después del que estoy buscando es 102.

¿Cuál es el número?
____

Primero, piense el patrón que busca, y luego escriba un programa que le permita encontrar el número que sigue este patrón, que se encuentra entre 60 y 102.

[[ex09-8]]
==== Ejercicio 9-8

A continuación se muestra otro puzzle de _Car Talk_ (https://www.cartalk.com/puzzler/browse):

[quote]
____
Estaba conduciendo por la autopista el otro día y vi mi odómetro. Como la mayoría de los odómetros, muestra seis dígitos y solo en kilómetros enteros. Entonces, si mi automóvil tuviera un kilometraje de 300000, por ejemplo, sería 3-0-0-0-0-0.

Ahora, lo que vi ese día fue muy interesante. Noté que los últimos 4 dígitos eran palindrómicos; es decir, se leían igual hacia adelante que hacia atrás. Por ejemplo, 5-4-4-5 es un palíndromo, por lo que mi odómetro podría haberse leído 3-1-5-4-4-5.

Un kilómetro después, los últimos 5 números fueron palindrómicos. Por ejemplo, podría haberse leído 3-6-5-4-5-6. Un kilómetro después de eso, los 4 números del medio eran palindrómicos. ¿Y... estás listo para esto? ¡Un kilómetro después, los 6 eran palindrómicos!

La pregunta es, ¿Qué número estaba en el odómetro cuando miré por primera vez?
____

Escriba un programa de Julia que pruebe todos los números de seis dígitos e imprima cualquier número que satisfaga estos requisitos.

[[ex09-9]]
==== Ejercicio 9-9

Aquí hay otro puzzle de _Car Talk_ que puede resolver con una búsqueda (https://www.cartalk.com/puzzler/browse):

[quote]
____
Hace poco visité a mi madre y nos dimos cuenta de que los dos dígitos que componen mi edad cuando se invertían daban como resultado su edad. Por ejemplo, si tiene 73 años, yo tengo 37. Nos preguntamos con qué frecuencia esto ha sucedido a lo largo de los años, pero nos desviamos de otros temas y nunca obtuvimos una respuesta.

Cuando llegué a casa descubrí que los dígitos de nuestras edades han sido reversibles seis veces hasta ahora. También descubrí que si teníamos suerte, volvería a suceder en unos años, y si tenemos mucha suerte, sucedería una vez más después de eso. En otras palabras, habría sucedido 8 veces. Entonces la pregunta es, ¿Cuántos años tengo ahora?
____

Escriba un programa de Julia que busque soluciones para este puzzle.

[TIP]
====
Puede encontrar la función +lpad+ útil.
(((lpad)))((("función", "Base", "lpad", see="lpad")))
====

