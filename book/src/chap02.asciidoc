[[chap02]]
== Variables, expresiones y sentencias

Una de las características más poderosas de un lenguaje de programación es la capacidad de manipular _variables_. Una variable es un nombre que hace referencia a un valor.
(((variable)))(((valor)))


=== Sentencias de asignación

Una _sentencia de asignación_ crea una nueva variable y le asigna un valor:
(((sentencia de asignación)))((("sentencia", "asignación", see="sentencia de asignación")))(((pass:[=], see="sentencia de asignación"))) (((pi)))((("π", see = "pi")))

[source,@julia-repl-test chap02]
----
julia> mensaje = "Y ahora, algo completamente diferente"
"Y ahora, algo completamente diferente"
julia> n = 17
17
julia> π_val = 3.141592653589793
3.141592653589793
----

Este ejemplo hace tres asignaciones. La primera asigna una cadena a una nueva variable llamada +mensaje+; la segunda le asigna a la variable +n+ el entero +17+; la tercera asigna el valor (aproximado) de latexmath:[\pi] a la variable +π_val+ (*+\pi TAB+*).

Una forma común de representar variables en papel es escribir el nombre de la variable con una flecha apuntando a su valor. Este tipo de figura se llama "diagrama de estado" porque muestra en qué estado se encuentra cada una de las variables. La Figura 1, <<fig02-1>>, muestra el resultado del ejemplo anterior.
(((diagrama de estado)))((("diagrama", "estado", see="diagrama de estado")))

[[fig02-1]]
.Diagrama de estado
image::images/fig21.svg[]


=== Nombres de variables
(((variable)))

Los programadores generalmente eligen nombres representativos para sus variables, es decir, nombres que explican para qué se usa o qué contiene la variable.

Los nombres de las variables pueden ser tan largos como se desee. Pueden contener casi todos los caracteres Unicode (consulte <<caracteres>>), pero no pueden comenzar con un número. Es válido usar letras mayúsculas, pero lo común es usar solo minúsculas para nombres de variables.

Los caracteres Unicode se pueden ingresar mediante autocompletado por tabulación de las abreviaturas tipo LaTeX en el REPL de Julia.
(((Carácter Unicode)))

El carácter guión bajo, +_+, puede formar parte del nombre de una variable. Generalmente se usa como separador en nombres con varias palabras, como por ejemplo en +tu_nombre+ o +velocidad_aerodinámica_de_una_golondrina_sin_cargamento+.
(((carácter guión bajo)))(((abreviaturas tipo LaTeX)))

Si se le da un nombre inválido a una variable, aparece un error de sintaxis:
(((error de sintaxis)))((("error", "sintaxis", see="error de sintaxis")))

[source, jlcon]
----
julia> 76trombones = "un gran desfile"
ERROR: syntax: "76" is not a valid function argument name (ERROR: sintaxis: "76" no es un nombre de argumento de función válido)
julia> mas@ = 1000000
ERROR: syntax: extra token "@" after end of expression (ERROR: sintaxis: componente léxico adicional "@" después del final de la expresión)
julia> struct = "Química avanzada"
ERROR: syntax: unexpected "=" (ERROR: sintaxis: "=" inesperado)
----

+76trombones+ es un nombre de variable inválido porque comienza con un número. También es inválido +mas@+ porque contiene el carácter inválido: +@+. Pero, ¿cuál es el error en +struct+?

Resulta que +struct+ es una de las _palabras reservadas_ de Julia. Julia usa las palabras reservadas para reconocer la estructura del programa, por ello no pueden usarse como nombres de variables.
(((palabra clave)))

Julia tiene las siguientes palabras reservadas:
----
abstract type    baremodule   begin      break       catch
const            continue     do         else        elseif
end              export       finally    for         function
global           if           import     importall   in
let              local        macro      module      mutable struct
primitive type   quote        return     try         using
struct           where        while
----

No es necesario memorizar esta lista. En la mayoría de los entornos de desarrollo, las palabras reservadas se muestran en un color diferente; por lo tanto, si intenta usar una como nombre de variable, lo sabrá.


=== Expresiones y sentencias

Una _expresión_ es una combinación de valores, variables y operadores. Un valor o una variable por sí solos se consideran una expresión, por lo que las siguientes expresiones son válidas:
(((expresión)))

[source,@julia-repl-test chap02]
----
julia> 42
42
julia> n
17
julia> n + 25
42
----

Cuando escribe una expresión en el prompt, REPL la _evalúa_, lo que significa que encuentra el valor de la expresión. En este ejemplo, +n+ tiene el valor 17 previamente asignado y +n+25+ retorna el valor 42.
(((evaluar)))

Una _sentencia_ es una unidad de código que tiene un efecto, tal como crear una variable o mostrar un valor.
(((sentencia)))

[source,@julia-repl-test chap02]
----
julia> n = 17
17
julia> println(n)
17
----

La primera línea es una sentencia de asignación, ya que asigna un valor a +n+. La segunda línea es una sentencia de impresión que muestra el valor de +n+.

Cuando escribe una sentencia, REPL la ejecuta, es decir, hace lo que dice la sentencia.
(((ejecutar)))


=== Modo script

Hasta ahora se ha ejecutado Julia en _modo interactivo_, lo que significa que se ha interactuado directamente con el REPL. El modo interactivo es una buena manera de comenzar, pero si está trabajando con varias líneas de código, puede resultar incómodo.
(((modo interactivo)))

Una alternativa es guardar el código en un archivo de órdenes o _script_ y luego utilizar Julia en _modo script_ para ejecutarlo. Por convención, los scripts de Julia tienen nombres que terminan en _.jl_.
(((script)))(((modo script)))

Si sabe cómo crear y ejecutar un _script_ en su computadora, está listo para comenzar. De lo contrario, es recomendable usar JuliaBox nuevamente. Abra un archivo de texto, escriba el script y guárdelo con una extensión _.jl_. El script se puede ejecutar en una terminal con el comando *+julia nombre_del_script.jl+*.
(((extension, .jl)))(((JuliaBox)))

Debido a que Julia proporciona ambos modos, puede probar líneas de código en modo interactivo antes de colocarlos en un script. Aún así, tenga en consideración que existen diferencias entre el modo interactivo y el modo script que pueden generar confusión.

Por ejemplo, si está utilizando Julia como una calculadora, puede escribir

[source,@julia-repl-test]
----
julia> millas = 26.2
26.2
julia> millas * 1.61
42.182
----

La primera línea asigna un valor a +millas+ y muestra el valor. La segunda línea es una expresión, por lo que REPL la evalúa y muestra el resultado. Gracias al código anterior sabemos que una maratón tiene unos 42 kilómetros.

Pero si escribe el mismo código en un script y lo ejecuta, no obtendrá ningún resultado. En el modo script, una expresión, por sí sola, no tiene ningún efecto visible. Julia evalúa la expresión, pero no muestra el valor a menos que se lo indique:

[source, julia]
----
millas = 26.2
println(millas * 1.61)
----

Al principio este comportamiento puede ser confuso.

Un script generalmente contiene una secuencia de sentencias. Si hay más de una sentencia, los resultados aparecen de uno a la vez a medida que se ejecutan las sentencias.

Por ejemplo, el script

[source,julia]
----
println(1)
x = 2
println(x)
----

produce la salida

[source,@julia-eval]
----
1
2
----

Notar que la sentencia de asignación +x = 2+ no tiene salida.

==== Ejercicio 2-1

Para comprobar que ha comprendido lo recientemente explicado, escriba las siguientes sentencias en Julia REPL y vea lo que hace cada una:

[source,julia]
----
5
x = 5
x + 1
----

Ahora coloque las mismas sentencias en un script y ejecútelo. ¿Cuál es el resultado? Modifique el script transformando cada expresión en una sentencia de impresión y luego ejecútelo de nuevo.

=== Orden de operaciones

Cuando una expresión contiene más de un operador, el orden de evaluación depende de las _reglas de precedencia_. Julia sigue la convención matemática para el orden de evaluación de los operadores matemáticos. El acrónimo _PAPOMUDAS_ es una forma útil de recordar estas reglas:
(((orden de operaciones)))(((PAPOMUDAS)))

* __PA__réntesis: tienen la mayor precedencia y se pueden utilizar para forzar la evaluación de una expresión en el orden que desee. Dado que las expresiones entre paréntesis se evalúan primero, +2*(3-1)+ es 4, y +pass:[(1+1)^(5-2)]+ es 8. También puede usar paréntesis para hacer una expresión más fácil de leer, como en +(minuto*100)/60+, incluso si no cambia el resultado.
(((paréntesis)))

* __PO__tenciación: tiene la siguiente precedencia más alta, por lo que +pass:[1+2^3]+ es 9, no 27, y +2*3^2+ es 18, no 36.
(((pass:[^])))

* __MU__ltiplicación y __D__ivisión tienen mayor precedencia que la __A__dición y __S__ustracción. Entonces +2*3-1+ es 5, no 4, y +pass:[6+4/2]+ es 8, no 5.
(((pass:[*])))(((pass:[/])))(((pass:[+])))(((pass:[-])))

* Los operadores con la misma precedencia se evalúan de izquierda a derecha (excepto potencias). Entonces, en la expresión +grados/2*π+, la división ocurre primero y el resultado se multiplica por +π+. Para dividir entre latexmath:[2\pi], puede usar paréntesis, escribir +grados/2/π+ o +grados/2π+.

[TIP]
====
No se esfuerce demasiado en recordar el orden de las operaciones. Si el orden no es evidente mirando la expresión, use paréntesis para que sí lo sea.
====

=== Operaciones con cadenas

En general, no se pueden realizar operaciones matemáticas con cadenas, aunque las cadenas puedan parecer números, por lo que lo siguiente es inválido:
(((operación con cadenas)))(((operador, cadenas)))

[source,julia]
----
"2" - "1"
"huevos" / "fácil"
"tercero" + "talismán"
----

No obstante, hay dos excepciones, +*+ y +pass:[^]+.
(((pass:[*]))) (((pass:[^])))

El operador +pass:[*]+ realiza _concatenación de cadenas_, lo que significa que une las cadenas de extremo a extremo. Por ejemplo:
((("cadena", "concatenación", see="concatenar")))((("concatenar")))

[source,@julia-repl-test]
----
julia> primer_str = "auto"
"auto"
julia> segundo_str = "móvil"
"móvil"
julia> primer_str * segundo_str
"automóvil"
----

El operador +^+ también funciona con cadenas y realiza repeticiones. Por ejemplo, +"Spam"pass:[^]3+ es +"SpamSpamSpam"+. Si uno de los valores es una cadena, el otro tiene que ser un número entero.
((("cadena", "repetición", see="repetición")))((("repetición")))

De manera análoga, este uso de +pass:[*]+ y +^+ también tiene sentido en la multiplicación y potencia. Así como +4pass:[^]3+ es equivalente a +4*4*4+, esperamos que el +"Spam"pass:[^]3+ sea lo mismo que el +pass:["Spam"*"Spam"*"Spam"]+, y lo es.


=== Comentarios

A medida que los programas se hacen más largos y complejos, se vuelven más difíciles de leer. Los lenguajes formales son densos, y a menudo es difícil leer el código y entender qué está haciendo o por qué.

Por esta razón, es una buena idea agregar notas a sus programas para explicar en lenguaje natural lo que está haciendo el programa. Estas notas se llaman _comentarios_, y comienzan con el símbolo +#+:
(((comentario)))((("pass:[#]", see="comentario")))

[source,julia]
----
# calcula el porcentaje de hora que ha transcurrido
porcentaje = (minuto * 100) / 60
----

En este caso, el comentario aparece sólo en una línea. También puede poner comentarios al final de una línea:

[source, julia]
----
porcentaje = (minuto * 100) / 60    # porcentaje de una hora
----

Todo, desde el +#+ hasta el final de la línea se ignora y no tiene ningún efecto en la ejecución del programa.

Los comentarios son más útiles cuando documentan características no obvias del código. Es razonable suponer que el lector puede averiguar qué hace el código, por lo tanto es más útil explicar _por qué_.

Este comentario es inútil porque es redundante con el código:

[source,julia]
----
v = 5   # asigna 5 a v
----

Este comentario contiene información útil que no está presente en el código:

[source, julia]
----
v = 5   # velocidad en metros/segundo.
----

[ATENCIÓN]
====
Los nombres de las variables tienen que ser descriptivos para así reducir la necesidad de comentarios, pero no tan largos como para dificultar la lectura del código.
====


=== Depuración

Se pueden producir tres tipos de errores en un programa: errores de sintaxis, errores en tiempo de ejecución, y errores semánticos. Es útil distinguirlos para rastrearlos más rápidamente.
(((depuración)))

Error de sintaxis::
"Sintaxis" se refiere a la estructura de un programa y las reglas sobre esa estructura. Por ejemplo, los paréntesis deben presentarse de a pares, por lo que +(1+2)+ es válido, pero +8)+ es un error de sintaxis.
+
Si hay un error de sintaxis en cualquier parte de su programa, Julia muestra un mensaje de error y se cierra, no pudiendo ejecutar el programa. Durante sus primeras semanas como programador, puede pasar mucho tiempo rastreando errores de sintaxis. A medida que gane experiencia, cometerá menos errores y los encontrará más rápido.
(((error de sintaxis)))(((mensaje de error)))

Error en tiempo de ejecución::
El segundo tipo de error es el error en tiempo de ejecución, llamado así porque aparece durante la ejecución del programa. Estos errores también se denominan _excepciones_ porque generalmente indican que ha sucedido algo excepcional (y malo).
+
Los errores de tiempo de ejecución son raros en los programas simples que verá en los primeros capítulos, por lo que puede pasar un tiempo antes de que encuentre uno.
(((error de tiempo de ejecución)))((("error", "tiempo de ejecución", see="error de tiempo de ejecución")))(((excepción,see="error de tiempo de ejecución")))

Error semántico ::
El tercer tipo de error es "semántico", es decir, relacionado con el significado. Si hay un error semántico en su programa, se ejecutará sin generar mensajes de error, pero no hará lo correcto sino que hará otra cosa. Específicamente, hará lo que usted le dijo que hiciera.
+
Identificar errores semánticos puede ser complicado porque requiere que se trabaje a la inversa, analizando la salida del programa para intentar descubrir qué está haciendo.
(((error semántico))) ((("error", "semántico",see="error semántico")))

=== Glosario

variable::
Un nombre que hace referencia a un valor.
(((variable)))

asignación::
Una sentencia que asigna un valor a una variable.
(((asignación)))

diagrama de estado::
Una representación gráfica de un conjunto de variables y los valores a los que hace referencia.
(((diagrama de estado)))

palabra clave::
Una palabra reservada que se utiliza para definir la sintaxis y estructura de un programa; no puede usar palabras reservadas como +if+, +function+ y +while+ como nombres de variables.
(((palabra clave)))

operando ::
Uno de los valores en los que opera un operador.
(((operando)))

expresión::
Una combinación de variables, operadores y valores que representa un solo valor como resultado.
(((expresión)))

evaluar::
Simplificar una expresión realizando operaciones para obtener un solo valor.
(((evaluar)))

sentencia::
Una sección de código que representa un comando o acción. Hasta ahora, las sentencias que hemos visto son asignaciones e impresiones.
(((sentencia)))

ejecutar::
Ejecutar una sentencia y hacer lo que ésta dice.
(((ejecutar)))

modo interactivo::
Una forma de utilizar el REPL de Julia escribiendo código en el _prompt_.
(((modo interactivo)))

modo script::
Una forma de usar Julia para leer código desde un script y ejecutarlo.
(((modo script)))

script::
Un programa almacenado en un archivo.
(((script)))

precedencia del operador ::
Reglas que rigen el orden en que se evalúan las expresiones que involucran múltiples operadores matemáticos y operandos.
(((precedencia del operador)))

concatenar::
Unir dos cadenas de extremo a extremo.
(((concatenación de cadenas)))

comentario::
Información en un programa que está destinada a otros programadores (o cualquier persona que lea el código fuente) y que no tiene efecto en la ejecución del programa.
(((comentario)))

error de sintaxis::
Un error en un programa que hace que sea imposible de analizar (y, por lo tanto, imposible de ejecutar).
(((error de sintaxis)))

error en tiempo de ejecución o excepción ::
Un error que se detecta mientras se ejecuta el programa.
(((Error de tiempo de ejecución)))

semántica::
El significado de un programa.
(((semántica)))

error semántico ::
Un error en un programa que hace que haga algo diferente a lo que pretendía el programador.
(((error semántico)))


=== Ejercicios

[[ex02-1]]
==== Ejercicio 2-2

Repitiendo el consejo del capítulo anterior, cada vez que aprenda algo nuevo, debe probarlo en el modo interactivo y cometer errores a propósito para ver el resultado.

. Hemos visto que +n=42+ es válido. ¿Qué pasa con +42=n+?

. ¿Y con +x=y=1+?

. En algunos lenguajes, cada sentencia termina con un punto y coma:  +;+. ¿Qué sucede si pone un punto y coma al final de una sentencia en Julia?
(((pass:[;])))

. ¿Qué pasa si pone un punto al final de una sentencia?

. En notación matemática puede multiplicar +x+ e +y+ de esta manera: +x y+. ¿Qué pasa si intenta eso en Julia? ¿Y qué sucede con 5x?

[[ex02-2]]
==== Ejercicio 2-3

Practique usando Julia REPL como una calculadora:
(((calculadora)))

. El volumen de una esfera con radio latexmath:[r] es latexmath:[\frac{4}{3} \pi r^3]. ¿Cuál es el volumen de una esfera con radio 5?

. Supongamos que el precio de venta de un libro es de $ 24.95, pero las librerías obtienen un descuento del 40%. El envío cuesta $3 por la primera copia y 75 centavos por cada copia adicional. ¿Cuál es el costo total al por mayor de 60 copias?

. Si una persona sale de casa a las 6:52 a.m. y corre 1 milla a un ritmo relajado (8:15 min. por milla), luego 3 millas más rápido (7:12 min. por milla) y 1 milla a ritmo relajado nuevamente, ¿a qué hora llega a casa para desayunar?
