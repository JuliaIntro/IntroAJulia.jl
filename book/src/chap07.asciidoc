[[chap07]]
== Iteración

Este capítulo se centra en la iteración, que es la capacidad de ejecutar repetidamente un bloque de sentencias. Hemos visto dos tipos de iteración: usando recursión en <<recursion>>, y usando ciclos +for+, en <<simple_repetition>>. En este capítulo veremos otro tipo más: usando sentencias +while+. Primeramente, se introducirán algunos términos sobre asignación de variables.
(((iteración)))(((recursión)))(((sentencia for)))

=== Asignación múltiple

Puede que ya haya descubierto que está permitido realizar más de una asignación a la misma variable. Una nueva asignación hace que la variable existente se refiera a un nuevo valor (y deje de referirse al viejo valor).

[source,@julia-repl-test chap07]
----
julia> x = 5
5
julia> x = 7
7
----

La primera vez que se muestra +x+ su valor es 5, y la segunda vez su valor es 7

[[fig07-1]]
.Diagrama de estado
image::images/fig71.svg[]

<<fig07-1>> muestra el aspecto de una _asignación múltiple_ en un diagrama de estado.
(((asignación múltiple)))(((diagrama de estado)))

Es necesario aclarar algo que puede causar confusión. Puesto que Julia usa el signo igual (+=+) para la asignación, es tentador interpretar una sentencia +a = b+ como una sentencia de igualdad. Pero esta interpretación es incorrecta.
(((sentencia de asignación)))

Para empezar, la igualdad es simétrica y la asignación no lo es. Por ejemplo, en matemáticas, si latexmath:[\(a=7\)] entonces latexmath:[\(7=a\)]. Pero en Julia la sentencia +a = 7+ es válida, y +7 = a+ no lo es.

Además, en matemáticas, una sentencia de igualdad es verdadera o falsa siempre. Si latexmath:[\(a=b\)] ahora, entonces latexmath:[\(a\)] siempre será igual a latexmath:[\(b\)]. En Julia, una sentencia de asignación puede hacer que dos variables sean iguales, pero no tienen por qué quedarse así:

[source,@julia-repl-test]
----
julia> a = 5
5
julia> b = a    # a y b son iguales 
5
julia> a = 3    # a y b ya no son iguales 
3
julia> b
5
----

La tercera línea cambia el valor de +a+ pero no cambia el valor de +b+, por lo tanto ya dejan de ser iguales. 

[WARNING]
====
Reasignar variables puede ser útil, pero se debe tener precaución. Si los valores cambian frecuentemente, la reasignación puede hacer que el código sea difícil de leer y depurar.

Está permitido definir una función con el mismo nombre de una variable definida anteriormente.
====


=== Actualización de variables

Una de las formas más comunes de asignación múltiple es la actualización, donde el nuevo valor de la variable depende del anterior.
(((update)))

[source,@julia-repl-test chap07]
----
julia> x = x + 1
8
----

Esto significa “tome el valor actual de +x+, súmele uno, y después actualice +x+ con el nuevo valor.”

Si intenta actualizar una variable que no existe obtendrá un error, puesto que Julia evalúa la expresión del lado derecho antes de asignar un valor a +x+:
(((UndefVarError)))

[source,@julia-repl-test]
----
julia> y = y + 1
ERROR: UndefVarError: y not defined
----

Antes de actualizar una variable tiene que inicializarla, usualmente con una asignación simple:
(((initialización)))

[source,@julia-repl-test]
----
julia> y = 0
0
julia> y = y + 1
1
----

Actualizar una variable sumándole 1 de denomina un _incremento_; y restándole 1 de llama un _decremento_.
(((incremento)))(((decremento)))

=== La Sentencia +while+

Las computadoras se usan a menudo para automatizar tareas repetitivas. Realizar repetidamente tareas idénticas o similares sin cometer errores es algo que las computadoras hacen bien y que los seres humanos hacemos limitadamente. La ejecución repetida de un conjunto de sentencias se llama _iteración_. 
(((iteración)))

Ya hemos visto dos funciones, +cuenta regresiva+ y +printn+, que iteran usando recursividad. Por ser la iteración tan común, Julia proporciona varias características que la hacen más fácil. Una es la sentencia +for+ que vimos en <<simple_repetition>>, a la cual volveremos más adelante. 
(((recursión)))(((sentencia for)))

Otra característica es la _sentencia_ +while+. Aquí hay una versión de +cuentaregresiva+ que muestra el uso de la sentencia +while+:
(((while)))((("palabra reservada", "while", see="while")))(((sentencia while)))((("sentencia", "while", see="sentencia while")))

[source,@julia-setup]
----
function cuentaregresiva(n)
    while n > 0
        print(n, " ")
        n = n - 1
    end
    println("¡Despegue!")
end
----

Casi podría leer la sentencia while como si fuera Español. La función anterior significa: “Mientras +n+ sea mayor que 0, continúe mostrando el valor de +n+ y luego reduciendo el valor de +n+ en 1. Cuando llegue a 0, muestre la palabra ¡Despegue!“
(((cuentaregresiva)))

Más formalmente, el flujo de ejecución de una sentencia +while+ es el siguiente:
(((flujo de ejecución)))

. Se determina si la condición es verdadera o falsa.

. Si es falsa, se sale de la sentencia while y continúa la ejecución con la siguiente sentencia.

. Si es verdadera, ejecuta cada una de las sentencias en el cuerpo y regresa al paso 1.

Este tipo de flujo de llama bucle porque el tercer paso vuelve a la parte superior.
(((bucle)))

El cuerpo del bucle debería cambiar el valor de una o más variables de manera que, en algún momento, la condición sea falsa y el bucle termine. En caso contrario, el bucle se repetirá indefinidamente, lo cual se llama _bucle infinito_. Una interminable fuente de diversión para los informáticos es la observación de que las instrucciones del champú “Enjabone, enjuague, repita”, son un bucle infinito.
(((bucle infinito)))

En el caso de +cuentaregresiva+, podemos probar que el bucle termina: si +n+ es cero o negativo, el ciclo no se produce. En otro caso, el valor de +n+ se hace más pequeño cada vez que pasa por el bucle, así en cierto momento llegaremos a 0. 

En otros casos no es tan fácil decirlo. Por ejemplo:
(((seq)))((("función", "definida por el programador", "seq", see="seq")))

[source,@julia-setup]
----
function seq(n)
    while n != 1
        println(n)
        if n % 2 == 0        # n is par
            n = n / 2
        else                 # n is impar
            n = n*3 + 1
        end
    end
end
----

La condición de este bucle es +n != 1+, de manera que el bucle continuará hasta que +n+ sea 1, que hará que la condición sea falsa.

Cada vez que pasa por el bucle, el programa muestra como salida el valor de +n+ y luego comprueba si es par o impar. Si es par, el valor de +n+ se divide por dos. Si es impar, el valor de +n+ se sustituye por +pass:[n*3 + 1]+. Por ejemplo, si el argumento pasado a la función seq es 3, los valores resultantes +n+ son 3, 10, 5, 16, 8, 4, 2, 1.

Puesto que n a veces aumenta y a veces disminuye, no hay una prueba obvia de que +n+ alcanzará alguna vez el valor 1, o de que el programa vaya a terminar. Para algunos valores particulares de +n+, podemos probar que sí termina. Por ejemplo, si el valor de inicio es una potencia de dos, entonces el valor de +n+ será par cada vez que se pasa por el bucle, hasta que llegue a 1. El ejemplo anterior produce dicha secuencia si se inicia con 16.

Lo díficil es preguntarnos si se puede probar que este programa termina para todos los valores positivos de +n+. Hasta ahora, nadie ha sido capaz de probar que lo hace o ¡que no lo hace! (Vea https://es.wikipedia.org/wiki/Conjetura_de_Collatz.)
(((conjetura de Collatz)))

==== Ejercicio 7-1

Reescribe la función +printn+ de <<recursion>> utilizando iteración en vez de recursión.

=== +break+

A veces no se sabe que un ciclo debe terminar hasta que se llega al cuerpo. En ese caso, se puede usar la _sentencia break_ para salir del bucle.
(((break)))((("palabra reservada", "break", see="break")))(((sentencia break)))((("sentencia", "break", see="sentencia break")))

Por ejemplo, suponga que se desea recibir entradas del usuario hasta que este escriba "listo". Podríamos escribir:
(((readline)))

[source,julia]
----
while true
    print("> ")
    linea = readline()
    if line == "listo"
        break
    end
    println(linea)
end
println("¡Listo!")
----

La condición del bucle es +true+, que siempre es verdadero, por lo que el bucle se ejecuta hasta que llega a la sentencia break.

En cada iteración, se le pide al usuario (con el símbolo "> ") una entrada. Si el usuario escribe +listo+, la sentencia break sale del bucle. De lo contrario, el programa repite lo que escriba el usuario y vuelve a la parte superior del bucle. A continuación se muestra cómo funciona este programa:

[source]
----
> no listo
no listo
> listo
¡Listo!
----

Esta forma de escribir bucles while es común porque permite verificar la condición en cualquier parte del bucle (no solo en la parte superior) y puede expresar la condición de término de manera afirmativa ("detenerse cuando esto suceda"), en vez de negativamente ("continuar hasta que esto suceda").

=== +continue+

La sentencia break permite terminar el bucle. Cuando aparece una _sentencia continue_ dentro de un bucle, se regresa al comienzo del bucle, ignorando todos las sentencias que quedan en la iteración actual del bucle e inicia la siguiente iteración. Por ejemplo:
(((continue)))((("palabra reservada", "continue", see="continue")))(((sentencia continue)))((("sentencia", "continue", see="sentencia continue")))

[source,@julia]
----
for i in 1:10
    if i % 3 == 0
        continue
    end
    print(i, " ")
end
----

Si +i+ es divisible por 3, la sentencia continue detiene la iteración actual y comienza la siguiente iteración. Solo se imprimen los números en el rango de 1 a 10 no divisibles por 3.

[[square_roots]]
=== Raíces Cuadradas

Los bucles son comúnmente utilizados en programas que calculan resultados numéricos, que comienzan con una respuesta aproximada, y que es iterativamente mejorada.

Por ejemplo, una forma de calcular raíces cuadradas es el método de Newton. Suponga que desea conocer la raíz cuadrada de latexmath:[\(a\)]. Si comienza con casi cualquier estimación latexmath:[\(x\)], puede calcular una mejor aproximación con la siguiente fórmula:
(((método de Newton)))

[latexmath]
++++
\begin{equation}
{y = \frac{1}{2}\left(x + \frac{a}{x}\right)}
\end{equation}
++++

Por ejemplo, si latexmath:[\(a\)] es 4 y latexmath:[\(x\)] es 3:

[source,@julia-repl-test chap07]
----
julia> a = 4
4
julia> x = 3
3
julia> y = (x + a/x) / 2
2.1666666666666665
----

El resultado está más cerca de la respuesta correcta (latexmath:[\(\sqrt 4 = 2\)]). Si repetimos el proceso con la nueva estimación, se acerca aún más:

[source,@julia-repl-test chap07]
----
julia> x = y
2.1666666666666665
julia> y = (x + a/x) / 2
2.0064102564102564
----

Después de algunas actualizaciones, la estimación es casi exacta:

[source,@julia-repl-test chap07]
----
julia> x = y
2.0064102564102564
julia> y = (x + a/x) / 2
2.0000102400262145
julia> x = y
2.0000102400262145
julia> y = (x + a/x) / 2
2.0000000000262146
----

En general, no sabemos de antemano cuántos pasos se necesitan para llegar a la respuesta correcta, pero sabemos que hemos llegado a ella cuando la estimación deja de cambiar:

[source,@julia-repl-test chap07]
----
julia> x = y
2.0000000000262146
julia> y = (x + a/x) / 2
2.0
julia> x = y
2.0
julia> y = (x + a/x) / 2
2.0
----

Cuando +y == x+, podemos detenernos. A continuación se muestra un ciclo que comienza con una estimación inicial, +x+, la cual mejora hasta que deja de cambiar:

[source,julia]
----
while true
    println(x)
    y = (x + a/x) / 2
    if y == x
        break
    end
    x = y
end
----

Para la mayoría de los valores de a esto funciona bien, aunque en general no se recomienda probar igualdad entre números de punto flotante. Los números de punto flotante son aproximadamente correctos: la mayoría de los números racionales, como latexmath:[\(\frac{1}{3}\)], e irracionales, como latexmath:[\(\sqrt 2\)], no pueden ser representados exactamente con un +Float64+.

En lugar de verificar si +x+ e +y+ son exactamente iguales, es más seguro usar la función integrada +abs+ para calcular el valor absoluto o la magnitud de la diferencia entre ellos:
(((abs)))

[source,julia]
----
if abs(y-x) < ε
    break
end
----

Donde +ε+ (*+\varepsilon TAB+*) toma un valor como +0.0000001+, y representa el error que estamos dispuestos a aceptar entre la estimación y el valor real.

=== Algoritmos

El método de Newton es un ejemplo de un _algoritmo_: es un proceso mecánico que permite resolver una categoría de problemas (en este caso, el cálculo de raíces cuadradas).
(((algoritmo)))

Para comprender qué es un algoritmo, podría ayudar empezar con algo que no es un algoritmo. Cuando aprendiste a multiplicar números de un solo dígito, probablemente memorizaste la tabla de multiplicar. En efecto, memorizaste 100 soluciones específicas. Ese tipo de conocimiento no es un algoritmo.

Pero si fueras "flojo", podrías haber aprendido algunos trucos. Por ejemplo, para encontrar el producto de latexmath:[\(n\)] y 9, puedes escribir latexmath:[\(n-1\)] como el primer dígito y latexmath:[\(10-n\)] como el segundo dígito. Este truco es una solución general para multiplicar cualquier número de un solo dígito por 9. ¡Este es un algoritmo!

Del mismo modo, las técnicas que aprendió para la suma con “llevamos tanto”, la resta con “pedimos prestado tanto”, y la división “larga o con galera o de casita” son todas ellas algoritmos. Una de las características de los algoritmos es que no requieren inteligencia para realizarlos. Son procesos mecánicos donde cada paso se sigue de acuerdo com un conjunto simple de reglas.

Ejecutar algoritmos es aburrido, pero diseñarlos es interesante, intelectualmente desafiante y son una parte central de la informática.

Algunas de las cosas que las personas hacen naturalmente, sin dificultad o conscientemente, son las más difíciles de expresar en algoritmos. Comprender el lenguaje natural es un buen ejemplo. Todos lo hacemos, pero hasta ahora nadie ha podido explicar _cómo_ lo hacemos, al menos no en forma de algoritmo.

=== Depuración

A medida que comienzas a escribir programas más extensos, es posible que pases más tiempo depurando. Más código significa más posibilidades de cometer un error y más lugares en dónde se pueden esconder los errores.
(((depuración)))

Una forma de reducir el tiempo de depuración es "depurar por bisección". Por ejemplo, si hay 100 líneas en su programa y las revisas una a la vez, serían 100 revisiones.
(((depuración por bisección)))

Es mejor tratar de dividir el problema en dos. Busque en la mitad del programa, o cerca, un valor intermedio que pueda verificar. Agregue una sentencia de impresión (o algo que permita verificar) y ejecute el programa.
(((sentencia print)))

Si esta verificación es incorrecta, debe haber un problema en la primera mitad del programa. Si es correcta, el problema está en la segunda mitad.

Cada vez que realiza una verificación como esta, reduce a la mitad el número de líneas que debe revisar. Después de seis pasos (que es mucho menos que 100), se reduciría a una o dos líneas de código, al menos en teoría.

En la práctica, no siempre se conoce dónde está la "mitad del programa", y no siempre es posible verificarlo. No tiene sentido contar líneas y encontrar el punto medio exacto. En su lugar, piense en los lugares del programa donde puede haber errores y en los lugares donde es fácil verificar. Luego, elija un lugar en donde usted crea que las posibilidades de encontrar un error antes o después de esta verificación son más o menos las mismas.

=== Glosario

asignación múltiple::
Asignar un nuevo valor a una variable que ya existe.
(((asignación múltiple)))

actualización::
Asignación donde el nuevo valor de la variable depende del antiguo.
(((actualización)))

inicialización::
Asignación que le da un valor inicial a una variable que será actualizada.
An assignment that gives an initial value to a variable that will be updated.
(((inicialización)))

incremento::
Actualización que incrementa el valor de la variable (usualmente en 1)
(((incremento)))

decremento::
Actualización que disminuye el valor de la variable.
(((decremento)))

iteración::
Ejecución repetida de un conjunto de sentencias, usando una función recursiva o un bucle.
(((iteración)))

sentencia while::
Sentencia que permite iteraciones controladas por una condición.
(((sentencia while)))

sentencia break::
Sentencia que permite salir de un bucle.
(((sentencia break)))

sentencia continue::
Sentencia localizada dentro de un bucle, que obliga a iniciar una nueva iteración desde el inicio del bucle.
(((sentencia continue)))

bucle infinito::
Un bucle cuya condición de término no es satisfecha.
(((bucle infinito)))

algoritmo::
Proceso general para resolver una categoría de problemas.
(((algoritmo)))


=== Ejercicios

[[ex07-1]]
==== Ejercicio 7-2

Copie el bucle de <<square_roots>> e insértelo en una función llamada +miraiz+, que tome +a+ como parámetro, elija un valor razonable de +x+ y devuelva una estimación de la raíz cuadrada de +a+.
(((miraiz)))((("función", "definida por el programador", "miraiz", see="miraiz")))

Para probarla, escriba una función llamada +probarraiz+ que imprima una tabla como esta:
(((probarraiz)))((("function", "definida por el programador", "probarraiz", see="probarraiz")))

[source,@julia-eval]
----
using IntroAJulia
io = IOBuffer()
testsquareroot(io)
out = String(take!(io))
println(out)
----

La primera columna es un número, +a+; la segunda columna es la raíz cuadrada de +a+ calculada con +miraiz+; la tercera columna es la raíz cuadrada calculada con la función integrada +sqrt+; la cuarta columna es el valor absoluto de la diferencia entre las dos estimaciones.

[[ex07-2]]
==== Exercise 7-3

La función integrada +Meta.parse+ toma una cadena y la transforma en una expresión. Esta expresión se puede evaluar en Julia con la función +Core.eval+. Por ejemplo:
(((parse)))((("función", "Meta", "parse", see="parse")))(((eval)))((("función", "Core", "eval", see="eval")))

[source,@julia-eval chap07]
----
import Base.eval
----

[source,@julia-repl-test chap07]
----
julia> expr = Meta.parse("1+2*3")
:(1 + 2 * 3)
julia> eval(expr)
7
julia> expr = Meta.parse("sqrt(π)")
:(sqrt(π))
julia> eval(expr)
1.7724538509055159
----

Escriba una función llamada +evalbucle+ que iterativamente solicite una entrada al usuario, tome la entrada resultante y la evalúe usando +eval+, pasa posteriormente imprimir el resultado. Debe continuar hasta que el usuario ingrese +listo+, y luego devolver el valor de la última expresión que evaluó.
(((evalbucle)))((("función", "definida por el programador", "evalbucle", see="evalbucle")))

[[ex07-3]]
==== Exercise 7-4

El matemático Srinivasa Ramanujan encontró una serie infinita que puede usarse para generar una aproximación numérica de latexmath:[\(\frac{1}{\pi}\)]:

[latexmath]
++++
\begin{equation}
{\frac{1}{\pi}=\frac{2\sqrt2}{9801}\sum_{k=0}^\infty\frac{(4k)!(1103+26390k)}{(k!)^4 396^{4k}}}
\end{equation}
++++

Escriba una función llamada +estimarpi+ que utilice esta fórmula para calcular y devolver una estimación de π. Debe usar un ciclo while para calcular los términos de la suma hasta que el último término sea menor que +1e-15+ (que es la notación de Julia para latexmath:[\(10^{-15}\)]). Puede verificar el resultado comparándolo con +π+.
(((estimarpi)))((("función", "definida por el programador", "estimarpi", see="estimarpi")))
