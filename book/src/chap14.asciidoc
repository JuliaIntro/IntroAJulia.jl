[[chap14]]
== Archivos

Este capítulo presenta el concepto de persistencia, que alude a los programas que mantienen los datos en almacenamiento permanente, y muestra cómo usar diferentes tipos de almacenamiento permanente, tales como archivos y bases de datos.

=== Persistencia

La mayoría de los programas que hemos visto hasta ahora han sido transitorios, es decir se ejecutan por un corto tiempo y generan una salida, pero cuando finalizan, sus datos desaparecen. Si ejecuta el programa nuevamente, este comienza de cero.
(((transitorio)))

Otros programas son _persistentes_; se ejecutan durante un largo período de tiempo (o todo el tiempo), mantienen al menos parte de sus datos en almacenamiento permanente (en un disco duro, por ejemplo), y si se apagan y vuelven a comenzar, retoman donde lo dejaron.
(((persistente)))

Ejemplos de programas persistentes son los sistemas operativos, que se ejecutan siempre que una computadora esté encendida, y los servidores web, que se ejecutan todo el tiempo, esperando que lleguen solicitudes a la red.

Una de las formas más simples para que los programas mantengan sus datos es leyendo y escribiendo _archivos de texto_. Ya hemos visto programas que leen archivos de texto; en este capítulo veremos programas que los escriben.

Otra alternativa es almacenar el estado del programa en una base de datos. En este capítulo también se presentará cómo usar una base de datos simple.

[[reading_and_writing]]
=== Lectura y Escritura

Un archivo de texto es una secuencia de caracteres almacenados en un medio permanente, como un disco duro o una memoria flash. Ya vimos cómo abrir y leer un archivo en <<reading_word_lists>>.

Para escribir un archivo, debe abrirlo usando el modo +"w"+ (de write) como segundo parámetro:
(((open)))

[source,@julia-repl-test chap14]
----
julia> fout = open("salida.txt", "w")
IOStream(<file salida.txt>)
----

Si el archivo ya existe, abrirlo en modo de escritura borra los datos antiguos y comienza de nuevo, ¡así que tenga cuidado!. Si el archivo no existe, se crea uno nuevo. +open+ devuelve un objeto de archivo y la función +write+ escribe datos en el archivo.
(((write)))((("función", "Base", "write", see="write")))

[source,@julia-repl-test chap14]
----
julia> linea1 = "El Cid convoca a sus vasallos;\n";

julia> write(fout, linea1)
31
----

El valor de retorno es el número de caracteres que se escribieron. El objeto de archivo _fout_ lleva registro de dónde quedó por última vez, por lo que si llama a +write+ nuevamente, esta agrega nuevos datos al final del archivo.

[source,@julia-repl-test chap14]
----
julia> linea2 = "éstos se destierran con él.\n";

julia> write(fout, linea2)
30
----

Cuando hayas terminado de escribir, debes cerrar el archivo.
(((close)))

[source,@julia-repl-test chap14]
----
julia> close(fout)

----

Si no cierra el archivo, se cierra cuando finaliza el programa.


=== Formateo

El argumento de write tiene que ser una cadena, por lo que si queremos poner otros valores en un archivo, tenemos que convertirlos en cadenas. La forma más fácil de hacerlo es con la función +string+, o con interpolación de cadenas:
(((string)))(((interpolación de cadenas)))

[source,@julia-repl-test chap14]
----
julia> fout = open("salida.txt", "w")
IOStream(<file salida.txt>)
julia> write(fout, string(150))
3
----

Otra alternativa es utilizar la familia de funciones de +print(ln)+.
(((print)))(((println)))

[source,@julia-repl-test chap14]
----
julia> camellos = 42
42
julia> println(fout, "He visto $camellos camellos.")

----

[TIP]
====
Una alternativa más potente es la macro +@printf+, que imprime utilizando cadenas con especificación de formato al más puro estilo C, lo cual puede leer en https://docs.julialang.org/en/v1/stdlib/Printf/
(((@printf)))((("macro", "Printf", "@printf", see="@printf")))(((formateando)))
====


=== Nombre de Archivo y Ruta

Los archivos están organizados en _directorios_ (también llamados "carpetas"). Cada programa en ejecución tiene su propio "directorio actual", que es el directorio que usará por defecto para para la mayoría de las operaciones. Por ejemplo, cuando abre un archivo para leer, Julia lo busca en el directorio actual.
(((directorio)))((("carpeta", see="directorio actual")))

La función +pwd+ devuelve el nombre del directorio actual:
(((pwd)))((("función", "Base", "pwd", see="pwd")))

[source,jlcon]
----
julia> cwd = pwd()
"/home/ben"
----

+cwd+ significa "directorio del trabajo actual" (en inglés “current working directory”). El resultado en este ejemplo es +/home/ben+, que es el directorio de inicio de un usuario llamado +ben+.

Una cadena como +"/home/ben"+ que identifica un archivo o directorio se llama _ruta_ o _path_.
(((ruta)))

Un nombre de archivo simple, como +memo.txt+ también se considera una ruta, pero es una _ruta relativa_ porque comienza en el directorio actual. Si el directorio actual es +/home/ben+, el nombre de archivo +memo.txt+ se referiría a +/home/ben/memo.txt+.
(((ruta relativa)))((("ruta", "relativa", see="ruta relativa")))

Una ruta que comienza con +/+ no depende del directorio actual. Este tipo de ruta se llama una ruta absoluta. Para encontrar la ruta absoluta de un archivo, puede usar +abspath+:
(((ruta absoluta)))((("ruta", "absoluta", see="ruta absoluta")))(((abspath)))((("función", "Base", "abspath", see="abspath")))

[source,jlcon]
----
julia> abspath("memo.txt")
"/home/ben/memo.txt"
----

Julia también tiene otras funciones para trabajar con nombres de archivo y rutas. Por ejemplo, +ispath+ comprueba si existe un archivo o directorio:
(((ispath)))((("función", "Base", "ispath", see="ispath")))

[source,jlcon]
----
julia> ispath("memo.txt")
true
----

Si existe, +isdir+ comprueba si es un directorio:
(((isdir)))((("función", "Base", "isdir", see="isdir")))

[source,jlcon]
----
julia> isdir("memo.txt")
false
julia> isdir("/home/ben")
true
----

Del mismo modo, +isfile+ comprueba si se trata de un archivo.
(((isfile)))((("función", "Base", "isfile", see="isfile")))

+readdir+ devuelve un arreglo de los archivos (y otros directorios) en el directorio dado:
(((readdir)))((("función", "Base", "readdir", see="readdir")))

[source,jlcon]
----
julia> readdir(cwd)
3-element Array{String,1}:
 "memo.txt"
 "musica"
 "fotos"
----

Para mostrar el funcionamiento de estas funciones, el siguiente ejemplo "recorre" un directorio, imprime los nombres de todos los archivos y se llama a si misma, de manera recursiva, en todos los directorios.
(((recorrer)))((("función", "definida por el programador", "recorrer", see="recorrer")))

[source,@julia-setup chap14]
----
function recorrer(nombredir)
    for nombre in readdir(nombredir)
        ruta = joinpath(nombredir, nombre)
        if isfile(ruta)
            println(ruta)
        else
            recorrer(ruta)
        end
    end
end
----

+joinpath+ toma un directorio y un nombre de archivo, y los une en una ruta completa.
(((joinpath)))((("función", "Base", "joinpath", see="joinpath")))

[TIP]
====
Julia tiene una función integrada llamada +walkdir+ (vea https://docs.julialang.org/en/v1/base/file/#Base.Filesystem.walkdir) que es similar a esta pero más versátil. Como ejercicio, lea la documentación y úsela para imprimir los nombres de los archivos en un directorio dado y sus subdirectorios.
(((walkdir)))((("función", "Base", "walkdir", see="walkdir")))
====


[[catching_exceptions]]
=== Captura de Excepciones

Muchas cosas pueden salir mal al intentar leer y escribir archivos. Al intentar abrir un archivo que no existe, se obtiene un +SystemError+:
(((SystemError)))((("error", "Base", "SystemError", see="SystemError")))

[source,@julia-repl-test]
----
julia> fin = open("archivo_malo")
ERROR: SystemError: opening file "archivo_malo": No such file or directory
----

Si intentas abrir un archivo pero no tienes permiso para acceder a él, obtienes el error de sistema "Permission denied" (Permiso denegado).

Para evitar estos errores, se podrían usar funciones como +ispath+ e +isfile+, pero tomaría mucho tiempo y líneas de código verificar todas las posibilidades.

Es más fácil intentar lidiar con los problemas a medida que ocurren, que es exactamente lo que hace la sentencia +try+. La sintaxis es similar a una sentencia +if+:
(((sentencia try)))((("sentencia", "try", see="sentencia try")))(((try)))((("palabra reservada", "try", see="try")))(((catch)))((("palabra reservada", "catch", see="catch")))(((end)))

[source,julia]
----
try
    fin = open("archivo_malo.txt")
catch exc
    println("Algo salió mal: $exc")
end
----

Julia comienza ejecutando el bloque +try+. Si todo resulta bien, se saltará el bloque +catch+ y finalizará. Si ocurre una excepción, Julia saltara fuera del bloque +try+ y ejecutará el bloque +catch+.

Gestionar una excepcion con +try+ recibe el nombre de _capturar_ una excepcion. En este ejemplo, el bloque +catch+ muestra un mensaje de error que no es muy útil. En general, capturar una excepcion te da la oportunidad de corregir el problema, volverlo a intentar o, al menos, terminar el programa con elegancia.
(((capturar una excepcion)))

Cuando el código realiza cambios de estado o usa recursos, como archivos, generalmente se deben hacer ciertas cosas al finalizar la programación del código, como cerrar los archivos. Las excepciones pueden complicar esta tarea, ya que se podría salir antes de lo esperado de un bloque de código. La palabra reservada +finally+ permite ejecutar un código al salir de un bloque de código determinado, independientemente de cómo salga:
(((finally)))((("palabra reservada", "finally", see="finally")))

[source,julia]
----
f = open("salida.txt")
try
    linea = readline(f)
    println(linea)
finally
    close(f)
end
----

En este ejemplo, la función +close+ siempre se ejecutará.


[[databases]]
=== Bases de datos

Una _base de datos_ es un archivo que esta organizado para almacenar datos. La mayoría de las bases de datos están organizadas como diccionarios, en el sentido de que realizan asociaciones entre claves y valores. La diferencia mas importante entre un diccionario y una base de datos, es que la base de datos se encuentra en el disco (u otro almacenamiento permanente), de modo que su contenido se conserva despues de que el programa finaliza. 
(((base de datos)))

IntroAJulia proporciona una interfaz para +GDBM+ (GNU dbm), que permite crear y actualizar archivos de base de datos. A modo de ejemplo, crearemos una base de datos que contenga pies de foto para archivos de imagen.
(((GDBM)))

Abrir una base de datos es similar a abrir otros archivos:
(((DBM)))((("tipo", "IntroAJulia", "DBM", see="DBM")))

[source,@julia-repl-test chap14]
----
julia> using IntroAJulia

julia> bd = DBM("piedefoto", "c")
DBM(<piedefoto>)
----

El modo "c" significa que la base de datos debe crearse si no existe. El resultado es un objeto de base de datos que se puede usar (para la mayoría de las operaciones) como un diccionario.

Cuando creas un nuevo elemento, +GDBM+ actualiza el archivo de base de datos:
(((operador corchete)))

[source,@julia-repl-test chap14]
----
julia> bd["luismi.png"] = "Foto de Luis Miguel."
"Foto de Luis Miguel."
----

Cuando accede a uno de los elementos, +GDBM+ lee el archivo:

[source,@julia-repl-test chap14]
----
julia> bd["luismi.png"]
"Foto de Luis Miguel."
----

Si realiza otra asignación a una clave existente, +GDBM+ reemplaza el valor anterior:
(((asignación)))

[source,@julia-repl-test chap14]
----
julia> bd["luismi.png"] = "Foto de Luis Miguel cantando."
"Foto de Luis Miguel cantando."
julia> bd["luismi.png"]
"Foto de Luis Miguel cantando."
----

Algunas funciones que tienen un diccionario como argumento, con +claves+ y +valores+, no funcionan con objetos de base de datos. Pero la iteración con un bucle +for+ sí:
(((sentencia for)))(((iteración)))

[source,julia]
----
for (clave, valor) in bd
    println(clave, ": ", valor)
end
----

Al igual que con otros archivos, debe cerrar la base de datos cuando haya terminado:
(((close)))

[source,@julia-repl-test chap14]
----
julia> close(bd)

----


=== Serialización

Una limitación de +GDBM+ es que las claves y los valores deben ser cadenas o conjuntos de bytes. Si intenta utilizar cualquier otro tipo, se producirá un error.

Las funciones +serialize+ y +deserialize+ pueden ser útiles. Traducen casi cualquier tipo de objeto en un arreglo de bytes (un iobuffer) adecuada para el almacenamiento en una base de datos, y luego traducen los arreglos de bytes nuevamente en objetos:
(((Serialización)))((("módulo", "Serialización", see="Serialización")))(((serialize)))((("función", "Serialización", "serialize", see="serialize)))(((IOBuffer)))((("tipo", "Base", "IOBuffer", see="IOBuffer")))(((take!)))((("función", "Base", "take!", see="take!")))

[source,@julia-repl-test chap14]
----
julia> using Serialization

julia> io = IOBuffer();

julia> t = [1, 2, 3];

julia> serialize(io, t)
24
julia> print(take!(io))
UInt8[0x37, 0x4a, 0x4c, 0x09, 0x04, 0x00, 0x00, 0x00, 0x15, 0x00, 0x08, 0xe2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
----

El formato no es obvio para nosotros; pero es fácil de interpretar para Julia. +deserialize+ reconstituye el objeto:
(((deserialize)))((("función", "Serialización", "deserialize", see="deserialize")))

[source,@julia-repl-test chap14]
----
julia> io = IOBuffer();

julia> t1 = [1, 2, 3];

julia> serialize(io, t1)
24
julia> s = take!(io);

julia> t2 = deserialize(IOBuffer(s));

julia> print(t2)
[1, 2, 3]
----

+serialize+ y +deserialize+ escriben y leen desde un objeto iobuffer que representa un I/O stream en memoria. La función +take!+ recupera el contenido del iobuffer como un arreglo de bytes y reestablece el iobuffer a su estado inicial.

Aunque el nuevo objeto tiene el mismo valor que el anterior, no es (en general) el mismo objeto:

[source,@julia-repl-test chap14]
----
julia> t1 == t2
true
julia> t1 ≡ t2
false
----

En otras palabras, la serialización y luego la deserialización tienen el mismo efecto que copiar el objeto.
(((copiar)))

Puedes usar esto para almacenar valores que no sean cadenas en una base de datos.

[TIP]
====
De hecho, el almacenamiento de valores que no son cadenas en una base de datos es tan común que se ha encapsulado en un paquete llamado +JLD2+ (consulte https://github.com/JuliaIO/JLD2.jl).
====


=== Objetos de Comando

La mayoría de los sistemas operativos proporcionan una interfaz de línea de comandos, también conocida como _shell_. Las shells generalmente proporcionan comandos para navegar por el sistema de archivos y ejecutar aplicaciones. Por ejemplo, en Unix puede cambiar los directorios con +cd+, mostrar el contenido de un directorio con +ls+ e iniciar un navegador web escribiendo (por ejemplo) +firefox+.
(((shell)))(((cd)))

Cualquier programa que pueda iniciar desde la shell también puede iniciarse desde Julia usando un _objeto de comando_:
(((objeto de comando)))(((comillas invertidas)))((("``", see="comillas invertidas")))

[source,@julia-repl-test chap14]
----
julia> cmd = `echo hola`
`echo hola`
----

Las comillas invertidas se usan para delimitar el comando.

La función +run+ ejecuta el comando:
(((run)))((("función", "Base", "run", see="run"))))

[source,@julia-repl-test chap14]
----
julia> run(cmd);
hola
----

+hola+ es la salida del comando echo, enviado a +STDOUT+. La función +run+ devuelve un objeto de proceso y genera un +ErrorException+ si el comando externo no se ejecuta correctamente.

Si desea leer la salida del comando externo, se puede usar +read+ en su lugar:
(((read)))

[source,@julia-repl-test chap14]
----
julia> a = read(cmd, String)
"hola\n"
----

Por ejemplo, la mayoría de los sistemas Unix tienen un comando llamado +md5sum+ o +md5+ que lee el contenido de un archivo y calcula una "suma de verificación". Puede leer sobre Md5 en https://en.wikipedia.org/wiki/Md5. Este comando proporciona una manera eficiente de verificar si dos archivos tienen el mismo contenido. La probabilidad de que diferentes contenidos produzcan la misma suma de comprobación es muy pequeña.
(((suma de verificación)))(((md5)))(((md5sum)))

Puede usar un objeto de comando para ejecutar +md5+ desde Julia y obtener el resultado:

[source,@julia-repl]
----
nombrearchivo = "salida.txt"
cmd = `md5 $nombrearchivo`
res = read(cmd, String)
----


=== Modulos

Supongamos que tenemos un archivo llamado +"wc.jl"+ con el siguiente código:
(((contarlineas)))((("función", "definida por el programador", "contarlineas", see="contarlineas")))(((eachline)))

[source,julia]
----
function contarlineas(nombrearchivo)
    conteo = 0
    for linea in eachline(nombrearchivo)
        conteo += 1
    end
    conteo
end

print(contarlineas("wc.jl"))
----

[source,@julia-eval]
----
archivo = open("wc.jl", "w")
print(archivo, """function contarlineas(nombrearchivo)
    conteo = 0
    for linea in eachline(nombrearchivo)
        conteo += 1
    end
    conteo
end

print(contarlineas("wc.jl"))""")
close(archivo)
----

Si ejecuta este programa, se leen las líneas de código y se imprime el número de líneas en el archivo, que es 9. También puede incluirlo en REPL de esta manera:
(((include)))((("función", "Base", "include", see="include")))

[source,jl-con]
----
julia> include("wc.jl")
9
----

Los módulos permiten crear espacios de trabajo separados, es decir, nuevos global scopes (ámbitos de tipo global). Una sentencia tiene 
global scope si tiene efecto en todo el prorgama.

Un módulo comienza con la palabra reservada +module+ y termina con +end+. Al usar módulos, se evitan los conflictos de nombres entre sus propias definiciones de nivel superior y las que se encuentran en el código de otra persona. +import+ permite controlar qué nombres de otros módulos están visibles y +export+ especifica cuáles de sus nombres son públicos, es decir, aquellos que se pueden usar fuera del módulo sin tener el prefijo del nombre del módulo.
(((ámbito)))(((module)))((("palabra reservada", "module", see="module")))(((end)))(((import)))((("palabra reservada", "import", see="import")))(((export)))((("palabra reservada", "export", see="export")))(((ContarLineas)))((("module", "ContarLineas", see="ContarLineas")))((("función", "ContarLineas", "contarlineas", see="contarlineas")))

[source,julia]
----
module ContarLineas
    export contarlineas

    function contarlineas(nombrearchivo)
        conteo = 0
        for linea in eachline(nombrearchivo)
            conteo += 1
        end
        conteo
    end
end
----

El módulo +ContarLineas+ proporciona la función +contarlineas+:

[source,julia]
----
julia> using ContarLineas

julia> contarlineas("wc.jl")
11
----

==== Ejercicio 14-1

Escriba este ejemplo en un archivo llamado _wc.jl_, inclúyalo en REPL (con include) y escriba +using ContarLineas+.


[WARNING]
====
Si importa un módulo que ya se ha importado, Julia no hace nada. No se vuelve a leer el archivo, incluso si ha cambiado.

Si desea volver a cargar un módulo, debe reiniciar REPL. El paquete +Revise+ puede ayudarlo a no reiniciar tan seguido (vea https://github.com/timholy/Revise.jl).
====


=== Depuración

Al leer y escribir archivos, puedes tener problemas con los espacios en blanco. Estos errores pueden ser difíciles de depurar porque los espacios, las tabulaciones y las nuevas líneas son generalmente invisibles:
(((\n)))(((\t)))

[source,jlcon]
----
julia> s = "1 2\t 3\n 4";

julia> println(s)
1 2     3
 4
----

Las funciones integradas +repr+ o +dump+ pueden ser de ayuda. Toman cualquier objeto como argumento y devuelven una representación de tipo cadena del objeto.
(((repr)))((("función", "Base", "repr", see="repr")))(((dump)))((("función", "Base", "dump", see="dump")))

[source,@julia-eval chap14]
----
s = "1 2\t 3\n 4";
----

[source,@julia-repl-test chap14]
----
julia> repr(s)
"\"1 2\\t 3\\n 4\""
julia> dump(s)
String "1 2\t 3\n 4"
----

Esto puede ser útil para la depuración.
(((depuración)))

Otro problema con el que te puedes encontrar es que en diferentes sistemas operativos se usan diferentes caracteres para indicar el final de una línea. Algunos sistemas usan una nueva línea, representada por +\n+. Otros usan un carácter de retorno +\r+. Algunos usan ambos. Si usas un archivo en diferentes sistemas, estas inconsistencias podrían causar problemas.
(((\r)))

Para la mayoría de los sistemas, hay aplicaciones para convertir de un formato a otro. Puede encontrarlas (y leer más sobre este tema) en https://en.wikipedia.org/wiki/Newline. O, por supuesto, podrías escribir una tú mismo.


=== Glosario

persistente::
Perteneciente a un programa que se ejecuta indefinidamente y mantiene al menos algunos de sus datos en almacenamiento permanente.
(((persistente)))

archivo de texto::
Una secuencia de caracteres almacenados en almacenamiento permanente, tal como en un disco duro.
(((archivo de texto)))

directorio::
Una colección de archivos con nombre, también llamada carpeta.
(((directorio)))

ruta::
Una cadena que identifica a un archivo.
(((ruta)))

ruta relativa::
Una ruta que comienza en el directorio actual.
(((ruta relativa)))

ruta absoluta::
Una ruta que comienza en el directorio superior del sistema de archivos.
(((ruta absoluta)))

capturar (catch)::
Evitar que una excepción haga terminar un programa, utilizando las sentencias +try pass:[...] catch pass:[...] finally+.
(((capturar)))

base de datos::
Un archivo cuyo contenido está organizado como un diccionario con claves que corresponden a valores.
(((base de datos)))

shell::
Un programa que permite a los usuarios escribir comandos y luego ejecutarlos iniciando otros programas.
(((shell)))

objeto de comando::
Un objeto que representa un comando de shell. Esto permite que un programa de Julia ejecute comandos y lea los resultados.
(((objeto de comando)))


=== Ejercicios

[[ex14-1]]
==== Ejercicio 14-2

Escriba una función llamada +sed+ que tome como argumentos una cadena de patrones, una cadena de reemplazo y dos nombres de archivo. La función debe leer el primer archivo y escribir el contenido en el segundo archivo (creándolo si es necesario). Si la cadena de patrones aparece en algún lugar del archivo, debe reemplazarse con la cadena de reemplazo.
(((sed)))((("función", "definida por el programador", "sed", see="sed")))

Si se produce un error al abrir, leer, escribir o cerrar los archivos, su programa debe detectar la excepción, imprimir un mensaje de error y terminar.

[[ex14-2]]
==== Ejercicio 14-3

Si hizo <<ex12-2>>, recordará que debía crear un diccionario que asociaba una cadena ordenada de letras al conjunto de palabras que se podía deletrear con esas letras. Por ejemplo, +"cuaderno"+ estaba asociado al arreglo +["cuaderno", "educaron", "encuadro"]+.

Escriba un módulo que importe +conjuntoanagramas+ y proporcione dos nuevas funciones: +almacenaranagramas+, que almacena el diccionario de anagramas usando +JLD2+ (vea https://github.com/JuliaIO/JLD2.jl); y +leeranagramas+, que busca una palabra y devuelve un arreglo de sus anagramas.
(((conjuntoanagramas)))((("funcción", "definida por el programador", "conjuntoanagramas", see="conjuntoanagramas")))(((leeranagramas)))((("función", "definida por el programador", "leeranagramas", see="leeranagramas")))

[[ex14-3]]
==== Ejercicio 14-4

En una gran colección de archivos MP3, puede haber más de una copia de la misma canción, almacenada en diferentes directorios o con diferentes nombres de archivo. El objetivo de este ejercicio es buscar duplicados.

. Escriba un programa que busque un directorio y todos sus subdirectorios, de forma recursiva, y devuelva un arreglo de rutas completas para todos los archivos con un sufijo dado (como _.mp3_).

. Para reconocer duplicados, puede usar +md5sum+ o +md5+ para calcular una "suma de verificación" para cada archivo. Si dos archivos tienen la misma suma de verificación, probablemente tengan el mismo contenido.

. Para verificar, puede usar el comando de Unix +diff+.

