[[chap03]]
== Funciones

En el contexto de la programación, una _función_ es una secuencia de sentencias que ejecuta una operación deseada y tiene un nombre. Cuando se define una función, se especifica su nombre y secuencia de sentencias. Una vez hecho esto, se puede "llamar" a la función por su nombre.
(((función)))

=== Llamada a función

Ya hemos visto un ejemplo de una llamada a función:
(((Llamada a función)))

[source,@julia-repl-test]
----
julia> println("¡Hola, Mundo!")
¡Hola, Mundo!
----

El nombre de esta función es +println+. La expresión entre paréntesis se llama _argumento_ de la función.
(((argumento)))(((paréntesis)))

Es común decir que una función "toma" un argumento y "devuelve" un resultado. El resultado también se llama _valor de retorno_.
(((valor de retorno)))

Julia tiene funciones integradas que convierten valores de un tipo a otro. La función +parse+ toma una cadena y si es posible, la convierte en cualquier tipo de número, en caso contrario arroja error:
(((conversión de tipo)))((("función", "Base", "parse", see="parse")))(((ArgumentError)))((("error", "Core", "ArgumentError", see="ArgumentError")))

[source,@julia-repl-test]
----
julia> parse(Int64, "32")
32
julia> parse(Float64, "3.14159")
3.14159
julia> parse(Int64, "Hola")
ERROR: ArgumentError: invalid base 10 digit 'H' in "Hola"
----
(ERROR: ArgumentError: base inválida de 10 dígitos 'H' en "Hola")

+trunc+ puede convertir valores de punto flotante a enteros, pero no redondea; sino que trunca:
(((trunc)))((("función", "Base", "trunc", see="trunc")))

[source,@julia-repl-test]
----
julia> trunc(Int64, 3.99999)
3
julia> trunc(Int64, -2.3)
-2
----

+float+ convierte números enteros en números de punto flotante:
(((float)))((("función", "Base", "float", see="float")))

[source,@julia-repl-test]
----
julia> float(32)
32.0
----

Finalmente, +string+ convierte el argumento en una cadena:
(((string)))((("función", "Base", "string", see="string")))

[source,@julia-repl-test]
----
julia> string(32)
"32"
julia> string(3.14159)
"3.14159"
----


=== Funciones matemáticas

En Julia, la mayoría de las funciones matemáticas conocidas están disponibles directamente:
(((función matemática)))(((log10)))((("función", "Base", "log10", see="log10")))

[source,julia]
----
proporción = potencia_de_señal/potencia_de_ruido
decibelios = 10*log10(proporción)
----

Este primer ejemplo utiliza la función +log10+ para calcular la proporción entre señal y ruido en decibelios (suponiendo que +potencia_de_señal+ y +potencia_de_ruido+ están definidos). También existe la función +log+, que calcula logaritmo natural.
(((log)))((("función", "Base", "log",see="log")))((("función logaritmo", see="log")))

[source,julia]
----
radianes = 0.7
altura = sin(radianes)
----

Este segundo ejemplo encuentra la razón seno (en inglés sine) de la variable +radianes+. El nombre de esta variable es una pista de que la función +sin+ y las otras funciones trigonométricas (+cos+, +tan+, etc.) toman argumentos en radianes. Para convertir grados a radianes, se debe dividir por 180 y multiplicar por latexmath:[\(\pi\)]:
(((sin)))((("función", "Base", "sin", see="sin")))(((función trigonométrica)))

[source,@julia-repl-test]
----
julia> grados=45
45
julia> radianes=grados/180*π
0.7853981633974483
julia> sin(radianes)
0.7071067811865475
----

El valor de la variable +π+ es una aproximación de punto flotante de latexmath:[\(\pi \)], con una precisión de aproximadamente 16 dígitos.
(((Pi)))

Si sabe de trigonometría, puede verificar el resultado anterior comparándolo con la raíz cuadrada de dos dividido por dos:
(((sqrt)))((("función", "Base", "sqrt", see="sqrt")))((("function raíz", see = "sqrt")))

[source,@julia-repl-test]
----
julia> sqrt(2)/ 2
0.7071067811865476
----


=== Composición

Hasta ahora, hemos analizado los elementos de un programa (variables, expresiones y sentencias) de forma aislada, sin mencionar cómo se combinan.
(((composición)))

Una de las características más útiles de los lenguajes de programación es su capacidad para combinar pequeños bloques de código. Por ejemplo, el argumento de una función puede ser cualquier tipo de expresión, incluidos operadores aritméticos:

[source, julia]
----
x = sin(grados/360*2*π)
----

E incluso llamadas a función:
(((exp)))((("función", "Base", "exp", see="exp"))) ((("función exponencial", see="exp")))

[source, julia]
----
x = exp(log(x + 1))
----

Casi en cualquier lugar donde se pueda colocar un valor, se puede colocar una expresión arbitraria, con una excepción: el lado izquierdo de una sentencia de asignación debe ser un nombre de variable. Cualquier otra expresión en el lado izquierdo genera un error de sintaxis (veremos excepciones a esta regla más adelante).
(((error de sintaxis)))

[source,@julia-eval chap03]
----
horas = 2;
----

[source,@julia-repl-test chap03]
----
julia> minutos = horas * 60 # derecha
120
julia> horas * 60 = minutos # malo!
ERROR: syntax: "60" is not a valid function argument name 
----
(ERROR: sintaxis: "60" no es un nombre de argumento de función válido)

=== Agregar nuevas funciones

Hasta ahora, solo hemos usado las funciones integradas en Julia, pero también es posible agregar nuevas funciones. Una _definición de función_ especifica el nombre de una nueva función y la secuencia de sentencias que se ejecutan cuando se llama a la función. A continuación se muestra un ejemplo:
(((función)))(((definición de función)))(((función definida por el programador)))(((imprimirletras)))((("función", "definido por el programador", "imprimirletras", see="imprimirletras")))

[source,@julia-setup chap03]
----
function imprimirletras()
    println("Jueguemos en el bosque")
    println("mientras el lobo no está.")
end
----

+function+ es una palabra reservada que indica que esta es una definición de función. El nombre de la función es +imprimirletras+. Las reglas para los nombres de funciones son las mismas que para los nombres de variables: pueden contener casi todos los caracteres Unicode (consulte <<caracteres>>), pero el primer carácter no puede ser un número. No puede usar una palabra reservada como nombre de una función, y debe evitar tener una variable y una función con el mismo nombre.
((("palabra clave", "función", see="función")))(((argumento)))(((carácter Unicode)))

Los paréntesis vacíos después del nombre indican que esta función no tiene argumentos.
(((paréntesis, vacíos)))

La primera línea de una definición de función se llama _encabezado_; el resto se llama _cuerpo_. El cuerpo termina con la palabra reservada +end+ y puede contener todas las sentencias que desee. Para facilitar la lectura, el cuerpo de la función debería tener sangría.
(((encabezado)))(((cuerpo)))(((end)))((("palabra reservada", "final", see="final")))(((sangría)))

Las comillas deben ser "comillas rectas" (""), generalmente ubicadas junto a la tecla Enter en el teclado. Las "comillas inglesas" (“”)no son válidas en Julia.
(((comillas)))

Si escribe una definición de función en modo interactivo, Julia REPL inserta una sangría para informarle que la definición no está completa:

[source,jlcon]
----
julia> function imprimirletras()
        println("Jueguemos en el bosque")

----

Para finalizar la función, debe escribir +end+.

La sintaxis para llamar a la nueva función es la misma que para las funciones integradas en Julia:

[source,@julia-repl-test chap03]
----
julia> imprimirletras()
Jueguemos en el bosque
mientras el lobo no está.
----

Una vez que haya definido una función, puede usarla dentro de otra función. Por ejemplo, para repetir el estribillo anterior, podríamos escribir una función llamada +repetirletras+:
(((repetirletras)))((("función", "definido por el programador", "repetirletras", see="repetirletras")))

[source,@julia-setup chap03]
----
function repetirletras()
    imprimirletras()
    imprimirletras()
end
----

Y luego llamamos a +repetirletras+:

[source, @ julia-repl-test chap03]
----
julia> repetirletras()
Jueguemos en el bosque
mientras el lobo no está.
Jueguemos en el bosque
mientras el lobo no está.
----


=== Definiciones y usos

Al unir los fragmentos de código de la sección anterior, todo el programa se ve así:

[source,julia]
----
function imprimirletras()
    println("Jueguemos en el bosque")
    println("mientras el lobo no está.")
end

función repetirletras()
    imprimirletras()
    imprimirletras()
end

repetirletras()
----

Este programa contiene dos definiciones de función: +imprimirletras+ y +repetirletras+. Las definiciones de función se ejecutan al igual que otras sentencias, pero su ejecución crea nuevas funciones. Las sentencias dentro de la función no se ejecutan hasta que se llama a la función, y la definición de la función no genera salida.

Como es de esperar, debe crear una función antes de poder ejecutarla. En otras palabras, la definición de la función tiene que ejecutarse antes de que se llame a la función.

==== Ejercicio 3-1

Mueva la última línea de este programa a la parte superior, de modo que la llamada a función aparezca antes de las definiciones. Ejecute el programa y vea qué mensaje de error obtiene.

Ahora mueva la llamada a función hacia abajo y coloque la definición de +imprimirletras+ después de la definición de +repetirletras+. ¿Qué sucede cuando ejecuta este programa?


=== Flujo de ejecución

Para asegurar de que una función sea definida antes de su primer uso, debe conocer el orden en que se ejecutan las instrucciones, lo que se denomina _flujo de ejecución_.
(((flujo de ejecución)))

La ejecución siempre comienza con la primera sentencia del programa. Las sentencias se ejecutan una a la vez, en orden descendente.

Las definiciones de función no alteran el flujo de ejecución del programa, pero se debe recordar que las sentencias dentro de la función no se ejecutan hasta que se llama a la función.

Una llamada a función es como un desvío en el flujo de ejecución. En lugar de pasar a la siguiente sentencia, el flujo salta al cuerpo de la función, ejecuta las sentencias que están allí y luego regresa para continuar el código donde lo dejó.

Esto suena bastante simple, hasta que tenemos en cuenta que una función puede llamar a otra. Mientras se está ejecutando una función, el programa podría tener que ejecutar las sentencias de otra función. Luego, mientras ejecuta esa nueva función, ¡el programa podría tener que ejecutar otra función más!

Afortunadamente, Julia es capaz de hacer el seguimiento de sus movimientos, así que cada vez que una función termina, el programa retoma la función que la llamó justo donde la dejó. Cuando llega al final del programa, la ejecución termina.

En resumen, cuando lee un programa, no siempre debe leer de arriba hacia abajo. A veces tiene más sentido seguir el flujo de ejecución.


=== Parámetros y argumentos

Algunas de las funciones que hemos visto requieren argumentos. Por ejemplo, la función +cos+ necesita un número como argumento. Algunas funciones toman más de un argumento; por ejemplo +parse+ toma dos: un número y una cadena.
(((parámetro))) (((argumento))) (((analizar))) (((sin)))

Dentro de la función, los argumentos se asignan a variables llamadas _parámetros_. A continuación se muestra un ejemplo de definición de función que toma un argumento:
(((imprimirdosveces)))((("función", "definido por el programador", "imprimirdosveces", see = "imprimirdosveces")))

[source, @julia-setup chap03]
----
function imprimirdosveces(juan)
    println(juan)
    println(juan)
end
----

Esta función asigna el argumento a un parámetro llamado +juan+. Cuando se llama a la función, esta imprime el valor del parámetro (cualquiera que sea) dos veces.

Esta función funciona con cualquier valor que se pueda imprimir.

[source, @julia-repl-test chap03]
----
julia> imprimirdosveces("Correo no deseado")
Correo no deseado
Correo no deseado
julia> imprimirdosveces(42)
42
42
julia> imprimirdosveces(π)
π = 3.1415926535897 ...
π = 3.1415926535897 ...
----

Las mismas reglas de composición que se aplican a las funciones integradas también se aplican a las funciones definidas por el programador, por lo que podemos usar cualquier tipo de expresión como argumento para +imprimirdosveces+:
(((composición)))(((función definida por el programador)))

[source, @julia-repl-test chap03]
----
julia> imprimirdosveces("Correo no deseado "^4)
Correo no deseado Correo no deseado Correo no deseado Correo no deseado
Correo no deseado Correo no deseado Correo no deseado Correo no deseado
julia> imprimirdosveces(cos(π))
-1.0
-1.0
----

El argumento se evalúa antes de llamar a la función, por lo que en los ejemplos las expresiones +"Correo no deseado "^4+ y +cos(π)+ solo se evalúan una vez.
(((argumento)))(((cos)))((("función", "Base", "cos", see="cos")))

También puede usar una variable como argumento:

[source, @julia-repl-test chap03]
----
julia> michael = "La vida es bella."
"La vida es bella."
julia> imprimirdosveces(michael)
La vida es bella.
La vida es bella.
----

El nombre de la variable que pasamos como argumento (+michael+) no tiene nada que ver con el nombre del parámetro (+juan+). Para la función +imprimirdosveces+ todos los parámetros se llaman +juan+, sin importar el nombre de la variable que pasemos como argumento (en este caso +michael+).


=== Las variables y los parámetros son locales

Cuando se crea una variable dentro de una función, esta es _local_, es decir, solo existe dentro de la función. Por ejemplo:
(((variable local))) (((variable, local))) (((concatenar_dos))) ((("función", "definido por el programador", "concatenar_dos", see = "concatenar_dos")))

[source, @julia-setup chap03]
----
function concatenar_dos(parte1, parte2)
    concat = parte1 * parte2
    imprimirdosveces(concat)
end
----

Esta función toma dos argumentos, los concatena e imprime el resultado dos veces. Aquí hay un ejemplo:
(((concatenar))) (((repetición)))

[source, @ julia-repl-test chap03]
----
julia> linea1 = "Hola hola"
"Hola hola"
julia> linea2 = "chao chao."
"chao chao".
julia> concatenar_dos(línea1, línea2)
Hola hola chao chao.
Hola hola chao chao.
----

Cuando +concatenar_dos+ termina, la variable +concat+ es destruida. Si intentamos imprimirla, obtendremos un error:
(((error en tiempo de ejecución))) (((UndefVarError))) ((("error", "Core", "UndefVarError", see = "UndefVarError")))

[source, @ julia-repl-test chap03]
----
julia> println(concat)
ERROR: UndefVarError: concat not defined
----

Los parámetros también son locales. Por ejemplo, afuera de la función +imprimirdosveces+, no existe +juan+.
(((parámetro)))


[[stack_diagrams]]
=== Diagramas de pila

Para seguir la pista de qué variables se usan en qué lugares es útil dibujar un _diagrama de pila_. Al igual que los diagramas de estado, los diagramas de pila muestran el valor de cada variable, pero también muestran la función a la que pertenece cada una.
(((diagrama de pila))) ((("diagrama", "pila", see = "diagrama de pila")))

Cada función se representa por un _marco_. Un marco es un recuadro con el nombre de una función a un costado, y los parámetros y variables de la función dentro. El diagrama de pila para el ejemplo anterior se muestra en <<fig03-1>>.
(((marco)))

[[fig03-1]]
.Stack diagram
image::images/fig31.svg[]

Los marcos se ordenan de tal manera que cada función llama a la función inmediatamente inferior. En este ejemplo, +imprimirdosveces+ fue llamado por +concatenar_dos+, y +concatenar_dos+ fue llamado por +Main+, que es un nombre especial para la función de más alto nivel. Cuando se crea una variable afuera de cualquier función, pertenece a +Main+.

Cada parámetro se refiere al mismo valor que su argumento correspondiente. Entonces, +parte1+ tiene el mismo valor que +linea1+, +parte2+ tiene el mismo valor que +linea2+, y +juan+ tiene el mismo valor que +concat+.

Si se produce un error durante una llamada a función, Julia imprime el nombre de la función, el nombre de la función que la llamó, el nombre de la función que a su vez llamó a esta otra, y así sucesivamente hasta llegar a la función de más alto nivel +Main+.
(((Principal)))

Por ejemplo, si intenta acceder a +concat+ desde +imprimirdosveces+, obtendrá un +UndefVarError+:
(((UndefVarError)))

----
ERROR: UndefVarError: concat not defined
Stacktrace:
 [1] imprimirdosveces at ./REPL[1]>:2 [inlined]
 [2] concatenar_dos(::String, ::String) at ./REPL[2]>:3
----

Esta lista de funciones se llama _trazado inverso_. Indica en qué archivo de programa se produjo el error, en qué línea y qué funciones se estaban ejecutando en ese momento. También muestra la línea de código que causó el error.
(((trazado inverso)))

El orden de las funciones en el trazado inverso es el opuesto del orden de los recuadros en el diagrama de pila. La función que se está ejecutando actualmente está en la parte superior.


=== Funciones productivas y funciones nulas

Algunas de las funciones que hemos utilizado, como las funciones matemáticas, devuelven resultados. A este tipo de funciones las llamaremos funciones productivas, a falta de un nombre mejor. Otras funciones como +imprimirdosveces+, realizan una acción pero no devuelven un valor. Estas se llaman _funciones nulas_.
(((función productiva))) (((función nula)))

Cuando llamamos a una función productiva, casi siempre queremos hacer algo con el resultado; por ejemplo, asignarlo a una variable o usarlo como parte de una expresión:

[source, julia]
----
x = cos(radianes)
aurea = (sqrt(5)+1)/2
----

Cuando se llama a una función en modo interactivo, Julia muestra el resultado:
(((modo interactivo)))

[source, @julia-repl-test]
----
julia> sqrt(5)
2.23606797749979
----

Pero en un script, si se llama a una función productiva, ¡el valor de retorno se pierde para siempre!
(((modo script)))

[fuente, @ julia-run]
----
sqrt (5)
----

Este script calcula la raíz cuadrada de 5, pero como no almacena ni muestra el resultado, no es muy útil.

Las funciones nulas pueden mostrar algo en la pantalla o tener algún otro efecto, pero no tienen un valor de retorno. Si asigna el resultado a una variable, obtendrá un valor especial llamado +nothing+ (nada en inglés).
(((nothing)))

[source, @julia-repl-test chap03]
----
julia> resultado = imprimirdosveces("Bing")
Bing
Bing
julia> show(resultado)
nothing
----

Para imprimir el valor +nothing+, debe usar la función +show+ que es como la función +print+ pero permite el valor +nothing+.
(((show))) ((("function", "Base", "show", see = "show")))

El valor +nothing+ no es lo mismo que la cadena +"nothing"+. Es un valor especial que tiene su propio tipo:
(((Nothing))) ((("type", "Base", "Nothing", see = "Nothing")))

[source, @julia-repl-test]
----
julia> typeof (nothing)
Nothing
----

Las funciones que hemos escrito hasta ahora son nulas. Comenzaremos a escribir funciones productivas en unos pocos capítulos.


=== ¿Por qué se necesitan funciones?

Puede que no esté claro por qué vale la pena dividir un programa en funciones. Hay varias razones:

* Crear una nueva función le brinda la oportunidad de darle nombre a un grupo de sentencias, lo que hace que su programa sea más fácil de leer y depurar.

* Las funciones pueden hacer que un programa sea más corto al eliminar código repetitivo. Además, si realiza un cambio, solo tiene que hacerlo en un solo lugar.

* Dividir un programa largo en funciones le permite depurar las partes de a una en una, y luego unirlas.

* Las funciones bien diseñadas pueden ser útiles para muchos programas. Una vez que escribe y depura uno, puede reutilizarla.

* En Julia, las funciones pueden mejorar mucho el rendimiento.


=== Depuración

Una de las habilidades más importantes que adquirirás es la depuración. Aunque puede ser frustrante, la depuración es una de las partes más intelectualmente gratificantes, desafiantes e interesantes de la programación.
(((depuración)))

La depuración puede ser vista como un trabajo de detective. Te enfrentas a pistas, y tienes que inferir los procesos y eventos que generaron los resultados que ves.

La depuración también es como una ciencia experimental. Una vez que se tiene una idea de lo que está mal, se modifica el programa y se intenta nuevamente. Si la hipótesis era correcta, se puede predecir el resultado de la modificación y así estar un paso más cerca de un programa totalmente funcional. Si la hipótesis era incorrecta, se tiene que encontrar una nueva. Como Sherlock Holmes señaló:

[cita, A. Conan Doyle, El signo de los cuatro]
____
Cuando todo aquello que es imposible ha sido eliminado, lo que quede, por muy improbable que parezca, es la verdad.
____
(((depuración experimental))) (((Holmes, Sherlock))) (((Doyle, Arthur Conan)))

Para algunas personas, la programación y la depuración son lo mismo. Es decir, la programación es el proceso de depurar gradualmente un programa hasta que haga lo que desea. Lo ideal es comenzar con un programa que funcione y hacer pequeñas modificaciones, depurándolas a medida que avanza.

Por ejemplo, Linux es un sistema operativo que contiene millones de líneas de código, pero comenzó como un programa simple que Linus Torvalds usó para explorar el chip Intel 80386. Según Larry Greenfield, "Uno de los proyectos anteriores de Linus fue un programa que cambiaría entre imprimir" AAAA "y" BBBB ". Esto luego evolucionó a Linux ". (_The Linux Users'’ Guide_ Beta Version 1).
(((Linux))) (((Torvalds, Linus)))


=== Glosario

función::
secuencia de sentencias que ejecuta una operación deseada y tiene un nombre. Las funciones pueden tomar o no argumentos, y pueden producir o no un resultado.
(((función)))

definición de función::
Una sentencia que crea una nueva función, especificando su nombre, parámetros y las sentencias que contiene.
(((definición de función)))

objeto de función::
Un valor creado por una definición de función. El nombre de la función es una variable que se refiere a un objeto de función.
(((objeto de función)))

encabezado::
La primera línea de una definición de función.
(((encabezado)))

cuerpo::
Secuencia de sentencias dentro de una definición de función.
(((cuerpo)))

parámetro::
Un nombre usado dentro de una función para referirse al valor pasado como argumento.
(((parámetro)))

Llamada a función::
Una sentencia que ejecuta una función. Compuesta del nombre de la función seguido por la lista de argumentos que usa entre paréntesis.
(((Llamada a función)))

argumento::
Valor que se le pasa a una función cuando se la llama. Este valor se asigna al parámetro correspondiente en la función.
(((argumento)))

variable local::
Una variable definida dentro de una función. Una variable local solo puede usarse dentro de su función.
(((variable local)))

valor de retorno::
El resultado de una función. Si se utiliza una llamada a función como una expresión, el valor de retorno es el valor de la expresión.
(((valor de retorno)))

función productiva::
Una función que devuelve un valor.
(((función productiva)))

función vacía::
Una función que siempre devuelve +nothing+.
(((función nula)))

+nothing+::
Un valor especial devuelto por las funciones nulas.
(((nada)))

composición::
Usar una expresión como parte de una expresión más grande, o una sentencia como parte de una sentencia más grande.
(((composición)))

flujo de ejecución::
El orden en que las sentencias se ejecutan.
(((flujo de ejecución)))

diagrama de pila ::
Una representación gráfica de una pila de funciones, sus variables y los valores a los que se refieren.
(((diagrama de pila)))

marco::
Un recuadro que en un diagrama de pila representa una llamada de función. Contiene las variables locales y los parámetros de la función.
(((marco)))

trazado inverso::
Una lista de las funciones que se están ejecutando, las cuales son impresas cuando ocurre una excepción.
(((trazado inverso))) 


=== Ejercicios

[TIP]
====
Estos ejercicios deben realizarse utilizando sólo lo que hemos aprendido hasta ahora.
====

[[ex03-1]]
==== Ejercicio 3-2

Escriba una función llamada +justificar_a_la_derecha+ que tome una cadena +s+ como parámetro y que imprima la cadena con suficientes espacios en blanco para que la última letra de la cadena se encuentre en la columna 70 de la pantalla.
(((justificar_a_la_derecha))) ((("función", "definido por el programador", "justificar_a_la_derecha", see = "justificar_a_la_derecha")))

[source, @julia-eval chap03-ex]
----
using ThinkJulia
----

[source, @julia-repl chap03-ex]
----
justificar_a_la_derecha("Celia")
----

[TIP]
====
Use concatenación de cadenas y repetición. Además, Julia tiene integrada una función llamada +length+ que devuelve la longitud de una cadena, por lo que el valor de +length("Celia")+ es 5.
(((length))) ((("función", "Base", "length", see = "length")))
====

[[ex03-2]]
==== Ejercicio 3-3

Un objeto de función es un valor que se puede asignar a una variable o ser pasado como argumento. Por ejemplo, +dosveces+ es una función que toma un objeto de función como argumento y lo llama dos veces:
(((objeto de función))) (((dosveces))) ((("función", "definido por el programador", "dosveces", see = "dosveces")))

[source, julia]
----
function dosveces(f)
    f()
    f()
end
----

A continuación se muestra un ejemplo que usa +dosveces+ para llamar a una función llamada +imprimirgato+ dos veces.
(((imprimirpalabra))) ((("función", "definido por el programador", "imprimirpalabra", see = "imprimirgato")))

[source, julia]
----
function imprimirpalabra()
    println("palabra")
end

dosveces(imprimirpalabra)
----

. Escriba este ejemplo en un script y pruébelo.

. Modifique +dosveces+ para que tome dos argumentos: un objeto de función y un valor, y que llame a la función dos veces, pasando el valor como argumento.

. Copie la definición de +imprimirdosveces+ mencionada antes en este capítulo a su secuencia de comandos.

. Use la versión modificada de +dosveces+ para llamar a +imprimirdosveces+ dos veces, pasando +"palabra"+ como argumento.

. 5.	Defina una nueva función llamada +cuatroveces+ que tome un objeto de función y un valor, y que llame a la función cuatro veces, pasando el valor como parámetro. Debe haber solo dos sentencias en el cuerpo de esta función, no cuatro.
(((cuatroveces))) ((("función", "definido por el programador", "cuatroveces", see = "cuatroveces")))

[[ex03-3]]
==== Ejercicio 3-4

. Escriba la función +imprimircuadricula+ que dibuje una cuadrícula como la siguiente:
(((imprimircuadricula))) ((("función", "definida por el programador", "imprimircuadricula", ver = "imprimircuadricula")))
+
[source, @ julia-repl-test chap03-ex]
----
julia> imprimircuadricula()
+ - - - - + - - - - +
|         |         |
|         |         |
|         |         |
|         |         |
+ - - - - + - - - - +
|         |         |
|         |         |
|         |         |
|         |         |
+ - - - - + - - - - +
----

. Escriba una función que dibuje una cuadrícula similar con cuatro filas y cuatro columnas.

Créditos: Este ejercicio se basa en un ejercicio en Oualline, _Practical C Programming_, Third Edition, O’Reilly Media, 1997.

[TIP]
====
Para imprimir más de un valor por línea, se puede imprimir una secuencia de valores separados por comas:

[source, julia]
----
println ("+", "-")
----

La función +print+ no avanza a la siguiente línea:

[source, julia]
----
print("+")
println("-")
----

El resultado de estas sentencias es +pass:["+ -"]+ en la misma línea. El resultado de una siguiente sentencia de impresión comenzaría en la siguiente línea.
====
(((println))) (((print))) ((("function", "Base", "print", see = "print")))
