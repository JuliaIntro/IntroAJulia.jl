[[chap18]]
== Subtipos

En el capítulo anterior se presentó el dispatch múltiple y los métodos polimórficos. Al no especificar el tipo de los argumentos de un método, este se puede invocar con argumentos de cualquier tipo. Ahora se verá cómo especificar un subconjunto de tipos permitidos en las especificaciones de un método.

En este capítulo se explica el concepto de subtipo usando tipos que representan naipes, mazos de naipes y manos de póker.

Si usted nunca ha jugado póker, puede leer sobre él en https://es.wikipedia.org/wiki/P%C3%B3quer, aunque no es necesario ya que se explicará todo lo necesario para los ejercicios.


=== Naipes

Hay cincuenta y dos naipes en una baraja inglesa, cada uno de los cuales pertenece a uno de los cuatro palos y tiene un valor. Los palos son Picas (+♠+), Corazones (+♥+), Diamantes (+♦+) y Tréboles (+♣+). Los valores son As (A), 2, 3, 4, 5, 6, 7, 8, 9, 10, Jota (J), Reina (Q) y Rey (K). Dependiendo del tipo de juego, el valor del As puede ser mayor que al Rey o inferior al 2.

Si queremos definir un nuevo objeto para representar un naipe, son obvios los atributos que debería tener: valor y palo. Lo que no es tan obvio es el tipo que se debe dar a estos atributos. Una opción es usar cadenas de caracteres que contengan palabras como +"Picas"+ para los palos y +"Reina"+ para los valores. Un problema de esta implementación es que no sería fácil comparar naipes para ver cuál tiene mayor valor o palo.

Una alternativa es usar números enteros para _codificar_ los valores y palos. En este contexto, "codificar" significa definir una asociación entre números y palos, o entre números y valores. Este tipo de codificación no está relacionada con cifrar o traducir a un código secreto (eso sería "cifrado").
(((codificar)))

Por ejemplo, esta tabla muestra una correspondencia entre palos y códigos (números) enteros:

* +♠+  latexmath:[\mapsto]  4

* +♥+  latexmath:[\mapsto]  3

* +♦+  latexmath:[\mapsto]  2

* +♣+  latexmath:[\mapsto]  1

Este código facilita la comparación de naipes; los palos más altos se asignan a los números más altos, por lo tanto podemos comparar los palos al comparar sus códigos.

Estamos usando el símbolo latexmath:[\mapsto] para dejar en claro que estas asignaciones no son parte de Julia. Forman parte del diseño del programa, pero no aparecen explícitamente en el código.

La definición de estructura de +Naipe+ se ve así:
(((Naipe)))((("tipo", "definida por el programador", "Naipe", see="Naipe")))

[source,@julia-setup chap18]
----
struct Naipe
    palo :: Int64
    valor :: Int64
    function Naipe(palo::Int64, valor::Int64)
        @assert(1 ≤ palo ≤ 4, "el palo no está entre 1 y 4")
        @assert(1 ≤ valor ≤ 13, "el valor no está entre 1 y 13")
        new(palo, valor)
    end
end
----

Para crear un +Naipe+, se debe llamar a +Naipe+ con el palo y el valor del naipe deseado:

[source,@julia-repl-test chap18]
----
julia> reina_de_diamantes = Naipe(2, 12)
Naipe(2, 12)
----


=== Variables Globales

Para poder imprimir los objetos +Naipe+ de una manera que sea fácil de leer, se necesita establecer una correspondencia entre los códigos enteros y sus correspondientes palos y valores. Una manera natural de hacer esto es con arreglos de cadenas: 

[source,@julia-setup chap18]
----
const nombres_palo = ["♣", "♦", "♥", "♠"]
const nombres_valor = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]
----

Las variables +nombres_palo+ y +nombres_valor+ son variables globales. La declaración +const+ significa que la variable solo se puede asignar una vez. Esto resuelve el problema de rendimiento de las variables globales.
(((variable global)))(((const)))((("palabra reservada", "const", see="const")))

Ahora se puede implementar un método +show+ apropiado:
(((show)))

[source,@julia-setup chap18]
----
function Base.show(io::IO, naipe::Naipe)
    print(io, nombres_valor[naipe.valor], nombres_palo[naipe.palo])
end
----

La expresión +nombres_valor[naipe.valor]+ significa "use el atributo +valor+ del objeto +naipe+ como índice en el arreglo +nombres_valor+, y seleccione la cadena correspondiente".

Con los métodos que se tienen hasta ahora, se pueden crear e imprimir naipes:

[source,@julia-repl-test chap18]
----
julia> Naipe(3, 11)
J♥
----


=== Comparación de naipes

Para los tipos integrados, existen operadores relacionales (+<+, +>+, +==+, etc.) que comparan valores y determinan cuándo uno es mayor, menor o igual a otro. Para los tipos definidos por el usuario, se puede sustituir el comportamiento de estos operadores si se proporciona un método llamado: +<+.

El orden correcto de los naipes no es obvio. Por ejemplo, ¿cuál es mejor, el 3 de Tréboles o el 2 de Diamantes? Uno tiene un valor mayor, pero el otro tiene un palo mayor. Para hacer que los naipes sean comparables, se debe decidir qué es más importante: valor o palo.

La respuesta puede depender del tipo de juego, pero para simplificar las cosas, se establece la elección arbitraria de que el palo es más importante, por lo que todas los tréboles superan a todos los diamantes, y así sucesivamente.

Con esa decisión tomada, se puede escribir +<+:

[source,@julia-setup chap18]
----
import Base.<

function <(c1::Naipe, c2::Naipe)
    (c1.palo, c1.valor) < (c2.palo, c2.valor)
end
----

==== Ejercicio 18-1

Escriba un método +<+ para objetos +Hora+. Puede usar comparación de tuplas, o comparación de enteros.


=== Prueba unitaria

Una _prueba unitaria_ permite verificar el correcto funcionamiento de su código comparando los resultados obtenidos con los esperados. Esto puede ser útil para verificar que su código funciona correctamente después de haberlo modificado, y también es una forma de predefinir el comportamiento correcto de su código durante el desarrollo.
(((prueba unitaria)))

Se pueden realizar pruebas unitarias simples con las macros +@test+:
(((Test)))((("module", "Test", see="Test")))(((@test)))((("macro", "Test", "@test", see="@test"))) 

[source,@julia-repl-test chap18]
----
julia> using Test

julia> @test Naipe(1, 4) < Naipe(2, 4)
Test Passed
julia> @test Naipe(1, 3) < Naipe(1, 4)
Test Passed
----

+@test+ devuelve +"Test Passed"+ ("Prueba aprobada") si la expresión que sigue es +true+, +"Test Failed"+ ("Prueba fallida") si es +false+, y +"Error Result"+ ("Resultado de error") si no se pudo evaluar.


=== Mazos

Ahora que ya tenemos Naipes, el próximo paso es definir Mazos. Como un mazo está compuesto de naipes, naturalmente cada Mazo contendrá un arreglo de naipes como atributo.

A continuación se muestra una definición para +Mazo+. El constructor crea el atributo naipes y genera la baraja estándar de cincuenta y dos naipes:
(((Mazo)))((("tipo", "definida por el programador", "Mazo", see="Mazo")))

[source,@julia-setup chap18]
----
struct Mazo
    naipes :: Array{Naipe, 1}
end

function Mazo()
    mazo = Mazo(Naipe[])
    for palo in 1:4
        for valor in 1:13
            push!(mazo.naipes, Naipe(palo, valor))
        end
    end
    mazo
end
----

La forma más fácil de poblar el mazo es mediante un bucle anidado. El bucle exterior enumera los palos desde 1 hasta 4. El bucle interior enumera los valores desde 1 hasta 13. Cada iteración crea un nuevo +Naipe+ con el palo y valor actual, y lo agrega a +mazo.naipes+.

Este es un método +show+ para +Mazo+:

[source,@julia-setup chap18]
----
function Base.show(io::IO, mazo::Mazo)
    for naipe in mazo.naipes
        print(io, naipe, " ")
    end
    println()
end
----

Así es como se ve el resultado:

[source,@julia-repl-test chap18]
----
julia> Mazo()
A♣ 2♣ 3♣ 4♣ 5♣ 6♣ 7♣ 8♣ 9♣ 10♣ J♣ Q♣ K♣ A♦ 2♦ 3♦ 4♦ 5♦ 6♦ 7♦ 8♦ 9♦ 10♦ J♦ Q♦ K♦ A♥ 2♥ 3♥ 4♥ 5♥ 6♥ 7♥ 8♥ 9♥ 10♥ J♥ Q♥ K♥ A♠ 2♠ 3♠ 4♠ 5♠ 6♠ 7♠ 8♠ 9♠ 10♠ J♠ Q♠ K♠
----


=== Añadir, Eliminar, Barajar y Ordenar

Para repartir los naipes, se debe tener una función que elimine un naipe del mazo y lo devuelva. La función +pop!+ proporciona una forma conveniente de realizar esto:
(((pop!)))

[source,@julia-setup chap18]
----
function Base.pop!(mazo::Mazo)
    pop!(mazo.naipes)
end
----

Como +pop!+ elimina el último naipe en el arreglo, se está repartiendo desde el extremo inferior del mazo.

Para añadir un naipe, se puede usar la función +push!+:
(((push!)))

[source,@julia-setup chap18]
----
function Base.push!(mazo::Mazo, naipe::Naipe)
    push!(mazo.naipes, naipe)
    mazo
end
----

Un método como este, que usa otro método sin hacer mucho más, se llama _enchapado_. La metáfora proviene de la carpintería, donde un enchapado es una capa fina de madera de alta calidad que se pega a la superfície de una pieza de madera de baja calidad para mejorar su apariencia.
(((enchapado)))

En este caso, +push!+ es un método "fino" que expresa una operación de arreglos adecuada para los mazos. Mejora la apariencia o interfaz, de la implementación.

También podemos escribir un método llamado +shuffle!+ (barajar en inglés) usando la función +Random.shuffle!+:
(((Random)))((("module", "Random", see="Random")))(((shuffle!)))((("función", "Random", "shuffle!", see="shuffle!")))

[source,@julia-setup chap18]
----
using Random

function Random.shuffle!(mazo::Mazo)
    shuffle!(mazo.naipes)
    mazo
end
----

==== Ejercicio 18-2

Escriba una función llamada +sort!+ (ordenar en inglés) que use la función +sort!+ para ordenar las cartas en un Mazo. +sort!+ usa el método +isless+ que definimos para determinar el orden.
(((sort!)))


=== Tipos Abstractos y Subtipos

Se busca que un tipo represente una "mano", es decir, los naipes que tiene un jugador. Una mano es similar a un mazo: ambos están compuestos de un conjunto de naipes y ambos requieren de operaciones tales como agregar y eliminar una carta.

Una mano es diferente de un mazo en ciertos aspectos ya que existen ciertas operaciones sobre una mano que no tendrían sentido sobre un mazo. Por ejemplo, en el poker se debe comparar una mano con otra para ver quién gana. En bridge, se necesita calcular el puntaje de la mano para así poder hacer la subasta.

Por lo tanto, hace falta una forma de agrupar los _tipos concretos_ que están relacionados. En Julia, esto se hace definiendo un _abstract type_ (tipo abstracto en inglés) que sea padre de +Mazo+ y +Mano+. A esto se le llama _crear subtipos_.
(((tipo concreto)))(((abstract type)))(((subtipo)))

Se llama al tipo abstracto +ConjuntoDeCartas+:
(((ConjuntoDeCartas)))((("tipo", "definida por el programador", "ConjuntoDeCartas", see="ConjuntoDeCartas")))

[source,@julia-eval chap18a]
----
struct Naipe
    palo :: Int64
    valor :: Int64
    function Naipe(palo::Int64, valor::Int64)
        @assert(1 ≤ palo ≤ 4, "palo está entre 1 y 4")
        @assert(1 ≤ valor ≤ 13, "valor es entre 1 y 13")
        new(palo, valor)
    end
end;
----

[source,@julia-setup chap18a]
----
abstract type ConjuntoDeCartas end
----

Se puede crear un nuevo tipo abstracto con la palabra reservada +abstract type+. De manera opcional, se puede especificar un tipo "padre" de una estructura colocando después del nombre de esta, el símbolo +<:+ seguido del nombre de un tipo abstracto existente.
(((abstract type)))((("palabra reservada", "abstract type", see="abstract type")))(((tipo)))

Cuando no se proporciona un _supertipo_, el supertipo por defecto es +Any+, es decir, un tipo abstracto predefinido del que todos los objetos son instancias y del que todos los tipos son _subtipos_.
(((supertipo)))(((subtipo)))

Ahora se puede expresar que +Mazo+ es un "hijo" de +ConjuntoDeCartas+:

[source,@julia-setup chap18a]
----
struct Mazo <: ConjuntoDeCartas
    naipes :: Array{Naipe, 1}
end

function Mazo()
    mazo = Mazo(Naipe[])
    for palo in 1:4
        for valor in 1:13
            push!(mazo.naipes, Naipe(palo, valor))
        end
    end
    mazo
end
----

[source,@julia-eval chap18a]
----
using Random

const nombres_palo = ["♣", "♦", "♥", "♠"];
const nombres_valor = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"];

function Base.show(io::IO, naipe::Naipe)
    print(io, nombres_valor[naipe.valor], nombres_palo[naipe.palo])
end

function Random.shuffle!(mazo::Mazo)
    shuffle!(mazo.naipes)
    mazo
end
----

El operador +isa+ comprueba si un objeto es de un tipo dado:
(((isa)))((("operador", "Base", "isa", see="isa")))

[source,@julia-repl-test chap18a]
----
julia> mazo = Mazo();

julia> mazo isa ConjuntoDeCartas
true
----

Una mano también es un +ConjuntoDeCartas+:
(((Mano)))((("tipo", "definida por el programador", "Mano", see="Mano")))

[source,@julia-setup chap18a]
----
struct Mano <: ConjuntoDeCartas
    naipes :: Array{Naipe, 1}
    etiqueta :: String
end

function Mano(etiqueta::String="")
    Mano(Naipe[], etiqueta)
end
----

En lugar de llenar la mano con 52 naipes nuevos, el constructor de +Mano+ inicializa +naipes+ a un arreglo vacío. Se puede etiquetar a la +Mano+ pasando un argumento opcional al constructor.

[source,@julia-repl-test chap18a]
----
julia> mano = Mano("nueva mano")
Mano(Naipe[], "nueva mano")
----


=== Tipos Abstractos y Funciones

Ahora podemos expresar las operaciones que tienen en común +Mazo+ y +Mano+, al ser funciones que tienen como argumento a +ConjuntoDeCartas+:
(((show)))(((pop!)))(((push!)))

[source,@julia-setup chap18a]
----
function Base.show(io::IO, cdc::ConjuntoDeCartas)
    for naipe in cdc.naipes
        print(io, naipe, " ")
    end
end

function Base.pop!(cdc::ConjuntoDeCartas)
    pop!(cdc.naipes)
end

function Base.push!(cdc::ConjuntoDeCartas, naipe::Naipe)
    push!(cdc.naipes, naipe)
    nothing
end
----

Se puede usar +pop!+ y +push!+ para repartir una carta:

[source,@julia-repl chap18a]
----
mazo = Mazo()
shuffle!(mazo)
naipe = pop!(mazo)
push!(mano, naipe)
----

A continuación, se encapsula este código en una función llamada +mover!+:
(((mover!)))((("función", "definida por el programador", "mover!", see="mover!")))

[source,@julia-setup chap18a]
----
function mover!(cdc1::ConjuntoDeCartas, cdc2::ConjuntoDeCartas, n::Int)
    @assert 1 ≤ n ≤ length(cs1.naipes)
    for i in 1:n
        naipe = pop!(cdc1)
        push!(cdc2, naipe)
    end
    nothing
end
----

+mover!+ toma tres argumentos: dos objetos +ConjuntoDeCartas+ y el número de cartas a repartir. Modifica ambos objetos +ConjuntoDeCartas+, y devuelve +nothing+. 

En algunos juegos, las cartas se mueven de una mano a otra, o de una mano al mazo. Puede usar +mover!+ para cualquiera de estas operaciones: +cdc1+ y +cdc2+ pueden ser un +Mazo+ o una +Mano+.


=== Diagramas de tipos

Hasta ahora se han visto diagramas de pila, que muestran el estado de un programa, y diagramas de objetos, que muestran los atributos de un objeto y sus valores. Estos diagramas son como una foto sacada durante la ejecución de un programa, por lo que cambian a medida que se ejecuta el programa.

También son muy detallados; en algunos casos demasiado detallados. Un _diagrama de tipos_ es una representación más abstracta de la estructura de un programa. En vez de mostrar objetos individuales, muestra los tipos y las relaciones entre ellos.
(((diagrama de tipos)))((("diagrama", "tipos", see="diagrama de tipos")))

Hay varias formas de relación entre tipos:

* Los objetos de un tipo concreto pueden contener referencias a objetos de otro tipo. Por ejemplo, cada Rectángulo contiene una referencia a un Punto, y cada Mazo contiene referencias a un conjunto de Naipes. Este tipo de relación se llama _TIENE-UN_, como por ejemplo "un Rectángulo tiene un Punto".
(((TIENE-UN)))

* Un tipo concreto puede tener un tipo abstracto como supertipo. Esta relación se llama _ES-UN_, como por ejemplo "una Mano es un ConjuntoDeCartas".
(((ES-UN)))

* Un tipo puede depender de otro si los objetos de un tipo toman objetos del segundo tipo como parámetros o usan objetos del segundo tipo como parte de un cálculo. Este tipo de relación se llama _dependencia_.
(((dependencia)))

[[fig18-1]]
.Diagrama de tipo
image::images/fig181.svg[]

Cada una de las flechas superiores representa una relación ES-UN. En este caso, indica que Mano tiene como supertipo a ConjuntoDeCartas.

Cada una de las flechas inferiores representa una relación TIENE-UN; en este caso, un Mazo tiene referencias a objetos Naipe.

El asterisco (+pass:[*]+) cerca de la flecha es una _multiplicidad_ e indica cuántos Naipes tiene un Mazo. Una multiplicidad puede ser un número simple, como +52+; un rango, +como 5:7+ o un asterisco, lo cual indica que un Mazo puede tener cualquier número de Naipes.
(((multiplicidad)))

No hay dependencias en este diagrama. Normalmente se mostrarían con una flecha achurada. Si hay muchas dependencias, a veces se omiten.

Un diagrama más detallado podría mostrar que un Mazo en realidad contiene un arreglo de Naipes, pero los tipos integrados como arreglos y diccionarios generalmente no se incluyen en los diagramas de tipos.

[[interactive]]
=== Depuración

Utilizar subtipos puede dificultar la depuración ya que al llamar a una función con un objeto como argumento, puede ser complicado determinar qué método se invocará.

Al escribir una función que funciona con objetos +Mano+, se busca que funcione con todo tipo de +Mano+ s, como +ManoDePoker+, +ManoDeBridge+, etc. Si el usuario invoca un método como +sort!+, podría obtener el método definido para un tipo abstracto +Mano+, pero si existiera un método +sort!+ que tuviera como argumento cualquiera de estos subtipos de +Mano+, obtendría esa versión. Este comportamiento suele ser algo bueno, pero puede ser confuso.

[source,@julia-setup chap18a]
----
function Base.sort!(mano::Mano)
    sort!(mano.naipes)
end
----

Si usted no está seguro del flujo de ejecución de un programa, la solución más simple es agregar sentencias de impresión al inicio de sus métodos más relevantes. Si +shuffle!+ imprimiera un mensaje como +Ejecutando shuffle! en Mazo+ durante la ejecución del programa, sería posible rastrear el flujo de ejecución.

Una mejor alternativa es la macro +@which+:
(((InteractiveUtils)))((("module", "InteractiveUtils", see="InteractiveUtils")))(((@which)))((("macro", "InteractiveUtils", "@which", see="@which")))

[source,jlcon]
----
julia> @which sort!(mano)
sort!(mano::Mano) in Main at REPL[5]:1
----

Entonces, el método +sort!+ de +mano+ es el que tiene como argumento un objeto de tipo +Mano+.

Una sugerencia para el diseño del programa: cuando anula un método, la interfaz del nuevo método debería ser la misma que la anterior. Debería tomar los mismos parámetros, devolver el mismo tipo y obedecer las mismas condiciones previas y posteriores. Si sigue esta regla, cualquier función diseñada para funcionar con una instancia de un supertipo, como un +ConjuntoDeCartas+, también funcionará con instancias de sus subtipos +Mazo+ y +Mano+.

Si viola esta regla, llamada "principio de sustitución de Liskov", su código colapsará como un castillo de naipes (jeje).
(((principio de sustitución de Liskov)))

La función +supertype+ permite encontrar el supertipo directo de un tipo.
(((supertype)))((("función", "Base", "supertype", see="supertype")))

[source,@julia-repl-test chap18a]
----
julia> supertype(Mazo)
ConjuntoDeCartas
----


=== Encapsulado de Datos

Los capítulos anteriores muestran un plan de desarrollo que podríamos llamar "diseño orientado a tipos". Se identifican los objetos necesarios, como +Punto+, +Rectángulo+ y +Hora+, y se definen estructuras para representarlos. En cada caso hay una correspondencia obvia entre el objeto y alguna entidad en el mundo real (o al menos en el mundo matemático).
(((diseño orientado a tipos)))

A veces no es tan obvio saber qué objetos se necesitan y cómo estos deben interactuar. En ese caso, se necesita un plan de desarrollo diferente. Lo mismo que ocurre con interfaces de funciones por encapsulado y generalización ocurre con interfaces de tipo por encapsulado de datos.
(((encapsulado de dato)))

El análisis de Markov, de <<markov_analysis>>, es un buen ejemplo. Si descarga el código desde https://github.com/BenLauwens/ThinkJulia.jl/blob/master/src/solutions/chap13.jl, verá que se usan dos variables globales: +sufijos+ y +prefijo+, las cuales se leen y escriben desde varias funciones.

[source,@julia-setup]
----
sufijos = Dict()
prefijos = []
----

Debido a que estas variables son globales, solo se puede ejecutar un análisis a la vez. Si se leen dos textos, sus prefijos y sufijos se agregarían a las mismas estructuras de datos (lo que generaría un texto interesante).

Para ejecutar múltiples análisis y mantenerlos separados, se puede encapsular el estado de cada análisis en un objeto. Así es como se vería:
(((Markov)))((("tipo", "definida por el programador", "Markov", see="Markov")))

[source,@julia-setup chap18b]
----
struct Markov
    orden :: Int64
    sufijos :: Dict{Tuple{String,Vararg{String}}, Array{String, 1}}
    prefijo :: Array{String, 1}
end

function Markov(orden::Int64=2)
    new(orden, Dict{Tuple{String,Vararg{String}}, Array{String, 1}}(), Array{String, 1}())
end
----

A continuación, se transforman las funciones en métodos. Por ejemplo, para +procesarpalabra+:
(((procesarpalabra)))((("función", "definida por el programador", "procesarpalabra", see="procesarpalabra")))

[source,@julia-setup chap18b]
----
function procesarpalabra(markov::Markov, palabra::String)
    if length(markov.prefijo) < markov.orden
        push!(markov.prefijo, palabra)
        return
    end
    get!(markov.sufijos, (markov.prefijo...,), Array{String, 1}())
    push!(markov.sufijos[(markov.prefijo...,)], palabra)
    popfirst!(markov.prefijo)
    push!(markov.prefijo, palabra)
end
----

Transformar un programa así (cambiando el diseño sin cambiar el comportamiento) es otro ejemplo de refactorización (vea <<refactorización>>).
(((refactorización)))(((plan de desarrollo de programa)))

Este ejemplo sugiere el siguiente plan de desarrollo para diseñar tipos:

* Comience escribiendo funciones que lean y escriban variables globales (cuando sea necesario).

* Una vez que el programa esté funcionando, busque asociaciones entre las variables globales y las funciones que las usan.

* Encapsule variables relacionadas como atributos de una estructura.

* Transforme las funciones asociadas en métodos que tengan como argumentos objetos del nuevo tipo.


==== Exercise 18-3

Descargue el código de Markov de https://github.com/BenLauwens/ThinkJulia.jl/blob/master/src/solutions/chap13.jl y siga los pasos descritos anteriormente para encapsular las variables globales como atributos de una nueva estructura llamada +Markov+.


=== Glosario

codificar::
Representar un conjunto de valores utilizando otro conjunto de valores, generando una asociación entre ellos.
(((codificar)))

prueba unitaria::
Manera estandarizada de probar que el código está correcto.
(((prueba unitaria)))

enchapado::
Un método o función que mejora la interfaz de otra función sin hacer muchos cálculos.
(((enchapado)))

crear subtipos::
La capacidad de definir una jerarquía de tipos relacionados.
(((subtipo)))

tipo abstracto::
Un tipo que puede ser padre de otro tipo.
(((abstract type)))

tipo concreto::
Un tipo que se puede construir.
(((tipo concreto)))

subtipo::
Un tipo que tiene como padre un tipo abstracto.
(((subtipo)))

supertipo::
Un tipo abstracto que es el padre de otro tipo.
(((supertipo)))

relación ES-UN::
Una relación entre un subtipo y su supertipo.
(((relación ES-UN)))

relación TIENE-UN::
Una relación entre dos tipos donde las instancias de un tipo contienen referencias a instancias del otro.
(((relación TIENE-UN)))

dependencia::
Una relación entre dos tipos donde las instancias de un tipo usan instancias del otro tipo, pero no las almacenan como atributos.
(((dependencia)))

diagrama de tipos::
Un diagrama que muestra los tipos en un programa y las relaciones entre ellos.
(((diagrama de tipos)))

multiplicidad::
Una notación en un diagrama de tipo que muestra, para una relación TIENE-UN, cuántas referencias hay a instancias de otra clase.
(((multiplicidad)))

encapsulado de datos::
Un plan de desarrollo de programas que implica hacer un prototipo que use variables globales y una versión final que convierta las variables globales en atributos de instancia.
(((encapsulado de datos)))


=== Ejercicios

[[ex18-1]]
==== Ejercicio 18-4

Para el siguiente programa, dibuje un diagrama de tipos que muestre estos tipos y las relaciones entre ellos.

[source,julia]
----
abstract type PadrePingPong end

struct Ping <: PadrePingPong
    pong :: PadrePingPong
end

struct Pong <: PadrePingPong
    pings :: Array{Ping, 1}
    function Pong(pings=Array{Ping, 1}())
        new(pings)
    end
end

function agregarping(pong::Pong, ping::Ping)
    push!(pong.pings, ping)
    nothing
end

pong = Pong()
ping = Ping(pong)
agregarping(pong, ping)
----

[[ex18-2]]
==== Ejercicio 18-5

Escriba un método llamado +repartir!+ que tome tres parámetros: un +Mazo+, el número de manos y el número de naipes por mano. Debería crear el número apropiado de objetos +Mano+, repartir el número apropiado de naipes por mano y devolver un arreglo de +Mano+ s.
(((repartir!)))((("función", "definida por el programador", "repartir!", see="repartir!")))

[[ex18-3]]
==== Ejercicio 18-6

Las siguientes son las posibles manos en el póker, en orden de valor creciente y probabilidad decreciente:

pareja::
Dos cartas del mismo número.

doble pareja::
Dos pares de cartas del mismo número.

trío::
Tres cartas del mismo número.

escalera::
Cinco cartas consecutivas (los ases pueden ser considerados altos o bajos, por lo tanto As-2-3-4-5 es escalera, 10-Jota-Reina-Rey-As también, pero Reina-Rey-As-2-3 no).

color::
Cinco cartas del mismo palo.

full::
Tres cartas iguales en su valor, más otras dos iguales en su valor.

póker::
Cuatro cartas iguales en su valor.

escalera de color::
Cinco cartas consecutivas del mismo palo.

El objetivo de este ejercicio es estimar la probabilidad de tener cada una de estas manos.

. Agregue métodos llamados +tienepareja+, +tienedoblepareja+, etc.
 que devuelvan +true+ o +false+ según si la mano cumple o no con los criterios relevantes. Su código debería funcionar correctamente para manos que contengan cualquier número de naipes (aunque 5 y 7 son los tamaños más comunes).
(((tienepareja)))((("función", "definida por el programador", "tienepareja", see="tienepareja")))(((tienedoblepareja)))((("función", "definida por el programador", "tienedoblepareja", see="tienedoblepareja")))

. Escriba un método llamado +clasificar+ que descubra la clasificación de mayor valor para una mano, y defina el atributo +etiqueta+ con esta clasificación. Por ejemplo, una mano de 7 cartas que contiene un color y una pareja, debe etiquetarse como "color".
(((clasificar)))((("función", "definida por el programador", "clasificar", see="clasificar")))

. Cuando esté convencido de que sus métodos de clasificación están funcionando correctamente, estime las probabilidades de las distintas manos. Escriba una función que baraje un mazo de naipes, la divida en diferentes manos, clasifique las manos y cuente la cantidad de veces que aparecen varias clasificaciones.

. Imprima una tabla de las clasificaciones y sus probabilidades. Ejecute su programa con un número cada vez mayor de manos hasta que los valores de salida converjan con un grado razonable de precisión. Compare sus resultados con los valores en https://en.wikipedia.org/wiki/Hand_rankings.
