[role = "pagenumrestart"]
[[chap01]]
== El camino de la programación
El objetivo de ((("informáticos, habilidades de", seealso="programación")))este libro es enseñarle a pensar como un informático. Esta manera de pensar combina las mejores características de las matemáticas, la ingeniería y las ciencias naturales. Los informáticos, al igual que los matemáticos, usan lenguajes formales para expresar ideas (específicamente cálculos). También diseñan estructuras; ensamblan componentes para formar sistemas, y evalúan los costos y beneficios entre alternativas, tal como los ingenieros. Además, observan el comportamiento de sistemas complejos, elaboran hipótesis y prueban predicciones, como los científicos.

La ((("resolución de problemas")))habilidad más importante para un informático es la resolución de problemas. Esto implica ser capaz de formular problemas, pensar soluciones de manera creativa y poder expresar una solución clara y precisa. Como resultado, el proceso de aprender a programar es una excelente oportunidad para practicar habilidades de resolución de problemas. Es por ello que este capítulo se llama "El camino de la programación".

Por una parte, aprenderás a programar, lo cual es beneficioso por sí solo. Por otra, la programación se constituirá como un medio para un fin. A medida que avancemos este fin será más claro.

=== ¿Qué es un programa?
Un _programa_ ((("programas")))es una secuencia de instrucciones que especifican cómo hacer un cálculo. El cálculo puede ser de naturaleza matemática; tal como resolver un sistema de ecuaciones, o encontrar las raíces de un polinomio, pero también puede ser un cálculo simbólico; como encontrar y reemplazar texto en un documento, o bien algo gráfico; tal como procesar una imagen o reproducir un video.

Los detalles ((("instrucciones", seealso="sentencias")))difieren para cada lenguaje, pero algunas instrucciones básicas aparecen en casi todos los lenguajes:

Input/Entrada::
Se obtienen datos a través del teclado, un archivo, una red, u otro dispositivo.

Salida/Output::
Los datos se muestran por pantalla, se guardan en un archivo, se envían a través de la red, etc.

Matemáticas::
Se realizan operaciones matemáticas básicas como la suma y la multiplicación.

Ejecución condicional ::
Se verifican ciertas condiciones y se ejecuta el código apropiado.

Repetición::
Se realiza ((("repetición", see="iteración")))alguna acción repetidamente, generalmente con alguna variación.

Aunque no lo creas, eso es todo lo que se debe hacer. Cada programa que has usado, sin importar su complejidad, está construido en base a instrucciones que se parecen bastante a estas. De esta manera, la programación puede entenderse como el proceso de dividir una tarea compleja y larga en pequeñas subtareas, lo suficientemente simples como para realizarse con una de estas instrucciones básicas.

=== Ejecutando Julia
Uno ((("Julia", "ejecutando")))de los desafíos para comenzar a utilizar Julia es su instalación, además del software relacionado. Si está familiarizado con su sistema operativo, y se siente cómodo con la interfaz de línea de comandos, no tendrá problemas. Pero para los principiantes puede ser difícil aprender sobre administración de sistema y programación al mismo tiempo.

Para evitar ese problema, recomiendo que comience ejecutando Julia en un navegador. Más tarde, cuando se sienta cómodo con Julia, se harán sugerencias para instalar Julia en su ordenador.

En ((("JuliaBox")))((("recursos en línea", "JuliaBox")))el navegador, puede ejecutar Julia en https://www.juliabox.com[JuliaBox]. No se requiere instalación: simplemente abra su navegador y entre a la página de JuliaBox, inicie sesión y comience a programar (consulte <<juliabox>>).

Julia _REPL_ (Read–Eval–Print Loop) ((("REPL (Read-Eval-Print Loop)")))es un programa que lee y ejecuta código de Julia. Puede iniciar REPL abriendo un terminal en JuliaBox y escribiendo *+julia+* en la línea de comando. Cuando comienza, debería ver una salida como esta:

[source,@julia-eval]
----
io = IOBuffer()
Base.banner(io)
banner = String(take!(io))
println("$(banner)julia>")
----

Las primeras líneas contienen información sobre el REPL, por lo que esto puede lucir diferente en su ordenador. Debe verificar que la versión sea al menos +1.0.0+.

La ((("prompt", "en REPL", secondary-sortas="REPL")))última línea es un _prompt_ que indica que el REPL está listo para que usted ingrese el código. Si escribe una línea de código y presiona Enter, REPL muestra el resultado:

[source,@julia-repl-test]
----
julia> 1 + 1
2
----

Los fragmentos de código se pueden copiar y pegar textualmente, incluido el prompt +julia>+ y cualquier salida.

Ahora estás listo para comenzar. De aquí en adelante, ya sabrás cómo iniciar Julia REPL y ejecutar el código.


=== El primer programa

Tradicionalmente, el primer programa que se escribe en un nuevo lenguaje se llama "¡Hola, mundo!" porque todo lo que hace es mostrar las palabras "¡Hola, mundo!". En Julia, se ve así:

[source,@julia-repl-test]
----
julia> println("¡Hola, mundo!")
¡Hola, mundo!
----

Este ((("sentencia de impresión", "función println")))((("output", "sentencia de impresión"))) es un ejemplo de una _sentencia de impresión_, aunque en realidad no imprime nada en papel. Muestra un resultado en la pantalla.

Las comillas en el programa marcan el principio y el final del texto que se mostrará; no aparecen en el resultado.

Los paréntesis indican que +println+ es una función. Se estudiarán funciones en <<chap03>>.


=== Operadores aritméticos

Después de ((("operadores", "aritméticos")))(((("operadores aritméticos")))((("matemáticas", "operadores aritméticos")))nuestro programa "¡Hola, Mundo!", el siguiente paso es la aritmética. Julia ((("operadores")))tiene _operadores_, los cuales son símbolos que representan cálculos como la suma y la multiplicación.

Los ((("$$+$$ (operador de suma)", primary-sortas="* suma")))((("operador de suma ($$+$$)")))(((($$-$$ (operador de resta)", primary-sortas="* subtraction")))((("operador de resta ($$-$$)")))((("$$*$$ (asterisco)", "operador de multiplicación", primary-sortas="* asterisco")))((("operador de multiplicación ($$*$$)")))((("asterisco ($$*$$)", "operador de multiplicación"))) operadores +pass:[+]+, +-+, y +*+ realizan sumas, restas y multiplicaciones respectivamente, como en los siguientes ejemplos:

[source,@julia-repl-test]
----
julia> 40 + 2
42
julia> 43 - 1
42
julia> 6 * 7
42
----

El ((("$$/$$ (operador de división)", primary-sortas="* division")))((("division", "operador de división ($$/$$)")))operador +/+ realiza la división:

[source,@julia-repl-test]
----
julia> 84/2
42.0
----

Quizás se pregunte por qué el resultado es +42.0+ en vez de +42+. Esto será explicado en la siguiente sección.

Finalmente, el ((("$$^$$ (circunflejo)", "operador de exponenciación", primary-sortas="* circunflejo")))((("operador de exponenciación ($$^$$)")))((("circunflejo ($$^$$)", "operador de exponenciación"))) operador +^+ realiza potencias; es decir, eleva un número a una potencia:

[source,@julia-repl-test]
----
julia> 6^2 + 6
42
----

=== Valores y tipos

Un _valor_ ((("valores"))) es uno de los elementos básicos con los que trabaja un programa, tal como una letra o un número. Algunos de los valores que hemos visto hasta ahora son +2+, +42.0+ y +"Hola, Mundo!"+.

Estos ((("tipos")))((("tipos de datos", see="tipos")))((("tipo entero (Int64)")))((("tipo de punto flotante (Float64)")))((("cadenas")))((("tipos","Int64", see="tipo entero")))((("tipos","Float64", see="tipo de punto flotante")))((("tipos", "String", see="cadenas")))valores pertenecen a diferentes _tipos_: +2+ es un _entero_ (_integer_ en inglés), +42.0+ es un _número de punto flotante_ (_floating-point number_ en inglés), y +"Hola, Mundo!"+ es una _cadena_ (_string_ en inglés), llamada así porque las letras que contiene están unidas.

Si ((("función typeof")))no está seguro del tipo de un valor, el REPL puede ayudarle:

[source,@julia-repl-test]
----
julia> typeof(2)
Int64
julia> typeof(42.0)
Float64
julia> typeof("¡Hola, mundo!")
String
----

Los enteros pertenecen al tipo +Int64+, las cadenas pertenecen a +String+ y los números de punto flotante pertenecen a +Float64+.

¿Qué ((("comillas (&quot;&#x2026;&quot;)", "enclosing strings"))) (((("&quot;&#x2026;&quot; (comillas)", "enclosing strings", primary-sortas="* comillas")))pasa con los valores "2" y "42.0"? Parecen números, pero están entre comillas como si fueran cadenas. Estos valores también son cadenas:

[source,@julia-repl-test]
----
julia> typeof("2")
String
julia> typeof("42.0")
String
----
Si ((("coma ($$,$$)", "no usar en enteros"))) ((("$$, $$(coma)", "no usar en enteros", primary-sortas="* coma"))) quisiéramos escribir un número de grandes dimensiones, podríamos caer en la costumbre de usar comas para separar sus cifras, como por ejemplo 1,000,000. Este no es un _entero_ válido en Julia, aunque sí es válido.

[source,@julia-repl-test]
----
julia> 1,000,000
(1, 0, 0)
----

¡Esto no es lo que esperábamos! Julia entiende +1,000,000+ como una secuencia de enteros separados por comas. Más adelante aprenderemos más sobre este tipo de secuencias.

Sin embargo, puedes ((("guión bajo ($$_$$)", "en enteros"))) ((("$$_$$ (guión bajo)", "en enteros", primary-sortas="* guión bajo"))) obtener el resultado esperado usando +1_000_000+.

=== Lenguajes formales y naturales
_Los lenguajes naturales_ ((("lenguaje natural", id="ch1nat", range="startofrange")))son los idiomas hablados, como el español, inglés y francés. No fueron diseñados por personas (aunque las personas intentan imponerles un orden); sino que evolucionaron naturalmente.

_Los lenguajes formales_ ((("lenguaje formal", id="ch1nat2", range="startofrange")))son idiomas diseñados por personas para propósitos específicos. Por ejemplo, la notación que usan los matemáticos es un lenguaje formal particularmente útil para denotar relaciones entre números y símbolos. Los químicos usan un lenguaje formal para representar su estructura química de las moléculas. Los ((("lenguaje de programación", id="ch1nat3", range="startofrange")))lenguajes de programación también son lenguajes formales, y han sido diseñados para expresar cálculos.

Los lenguajes formales ((("sintaxis", id="ch1nat4", range="startofrange")))tienden a tener reglas estrictas de sintaxis que gobiernan la estructura de las sentencias. Por ejemplo, en matemáticas, la sentencia latexmath:[3 + 3 = 6] tiene la sintaxis correcta, pero latexmath:[3 += 3 \$ 6] no. En química, latexmath:[\mathrm{H_2O}] es una fórmula sintácticamente correcta, pero latexmath:[\mathrm{_2Zz}] no lo es.

Las reglas de sintaxis ((("componentes léxicos", id="ch1nat5", range="startofrange"))) ((("estructura", id="ch1nat6", range= "startofrange")))  pueden ser de dos tipos, correspondientes a componentes léxicos y a la estructura. Los componentes léxicos son los elementos básicos del lenguaje, como palabras, números y elementos químicos. Uno de los problemas con latexmath:[3 += 3 \$ 6] es que latexmath:[\$] no es un componente léxico válido en matemáticas (al menos hasta donde conocemos). Del mismo modo, latexmath:[\mathrm{_2Zz}] no es válido porque no hay ningún elemento con la abreviatura latexmath:[\mathrm{Zz}].

El segundo tipo de regla de sintaxis se refiere a la forma en que se combinan los componentes léxicos. La ecuación latexmath:[3 += 3 ] no es válida porque aunque latexmath:[+] y latexmath:[=] son componentes léxicos válidos, no puedes tener uno justo después el otro. Del mismo modo, en una fórmula química, el subíndice viene después del nombre del elemento, no antes.

Esta es un@ oración en espa$ol bien estructurada con c*mponentes léxicos no válidos. Esta oración léxicos todos componentes los tiene, pero estructura una no válida con.

Cuando ((("análisis de sintaxis"))) lee una oración en español, o una sentencia en un idioma formal, tiene que descubrir la estructura (aunque en un lenguaje natural lo hace inconscientemente). Este proceso se llama _parsing_ o _análisis de sintaxis_.

Aunque los lenguajes formales y naturales tienen muchas características en común (componentes léxicos, estructura y sintaxis), existen algunas diferencias:

Ambigüedad::
Los lenguajes naturales están llenos de ambigüedad, esto es abordado mediante el uso del contexto y otro tipo de información. Los lenguajes formales están diseñados para ser casi o completamente inequívocos, lo que significa que cualquier declaración tiene exactamente un significado, independientemente del contexto.

Redundancia::
Para compensar la ambigüedad y reducir los malentendidos, los lenguajes naturales emplean mucha redundancia. Como resultado, a menudo tienen un uso excesivo de palabras. Los lenguajes formales son menos redundantes y más concisos.

Literalidad ::
Los lenguajes naturales están llenos de modismos y metáforas. Si digo: "Caí en la cuenta", probablemente no haya una cuenta y nada se caiga (este modismo significa que alguien entendió algo después de un período de confusión). Los idiomas formales significan exactamente lo que dicen.

Debido a que todos crecemos hablando lenguajes naturales, a veces es difícil adaptarse a los lenguajes formales. La diferencia entre lenguaje formal y natural es como la diferencia entre poesía y prosa:

Poesía::
Las palabras se usan por sus sonidos y significados. El poema en conjunto crea un efecto o una respuesta emocional. La ambigüedad no solo es común sino a menudo deliberada.

Prosa::
El significado literal de las palabras es más importante, y la estructura aporta significado. La prosa es más fácil de analizar que la poesía, pero a menudo sigue siendo ambigua.

Programas ::
El significado de un programa computacional es inequívoco y literal, y puede entenderse por completo mediante el análisis de los componentes léxicos y la estructura.

Los lenguajes formales son más densos que los naturales, por lo que lleva más tiempo leerlos. Además, la estructura es importante, por lo que no siempre es mejor leer de arriba a abajo, y de izquierda a derecha. En cambio, aprenderás a analizar el programa mentalmente, identificando los componentes léxicos e interpretando la estructura. Finalmente, los detalles importan. Pequeños errores de ortografía y puntuación, que pueden pasar desapercibidos en los lenguajes naturales, pueden hacer una gran diferencia en un lenguaje formal (((range="endofrange", startref="ch1nat")))((((range="endofrange", startref="ch1nat2")))((((range="endofrange", startref="ch1nat3")))(((range="endofrange", startref="ch1nat4")))((((range="endofrange", startref="ch1nat5")))(((range="endofrange", startref="ch1nat6"))).


=== Depuración

Los programadores ((("errores (bugs)")))((("depuración", "emociones de la, manejando las")))cometen errores. Los errores de programación se denominan _bugs_ y el proceso para rastrearlos se denomina _debugging_ o _depuración_.

La programación, y especialmente la depuración, pueden provocar emociones negativas. Frente a un error difícil de solucionar, puedes sentir enojo, vergüenza, y cansancio.

Existe evidencia de que las personas responden naturalmente a las computadoras como si fueran personas. Cuando trabajan bien, los consideramos compañeros de equipo, y cuando son obstinados o groseros, les respondemos de la misma manera que respondemos a personas groseras y obstinadas. footnote:[Reeves, Byron, and Clifford Ivar Nass. 1996. “The Media Equation: How People Treat Computers, Television, and New Media Like Real People and Places.” Chicago, IL: Center for the Study of Language and Information; New York: Cambridge University Press.]

Prepararse para estas reacciones puede ayudarlo a lidiar con ellas. Un enfoque es pensar en la computadora como un empleado con ciertas fortalezas, como la velocidad y la precisión, y debilidades particulares, como la falta de empatía y la incapacidad para comprender el panorama general.

Su trabajo es ser un buen gerente: debe encontrar formas de aprovechar las fortalezas y mitigar las debilidades. Y encontrar formas de usar sus emociones para involucrarse con el problema, sin dejar que sus reacciones interfieran con su capacidad para trabajar de manera efectiva.

Aprender a depurar puede ser frustrante, pero es una habilidad valiosa que es útil para muchas actividades más allá de la programación. Al final de cada capítulo hay una sección, como esta, con mis sugerencias para la depuración. ¡Espero que te ayuden!


=== Glosario

resolución de problemas ::
El proceso ((("resolución de problemas")))de formular un problema, encontrar una solución y expresarla.

programa::
Una secuencia de instrucciones ((("programas")))que especifica un cálculo.

REPL ::
Un programa ((("REPL (Read-Eval-Print Loop)")))que de manera reiterada lee una entrada, la ejecuta y genera resultados.

prompt::
Caracteres ((("prompt", "en REPL", secundary-sortas="REPL")))mostrados por el REPL para indicar que está listo para recibir información del usuario.

sentencia de impresión (print)::
Una instrucción ((("sentencia de impresión")))((("output", "sentencia de impresión")))que hace que Julia REPL muestre un valor en la pantalla.

operador::
Un símbolo ((("operadores")))que representa un cálculo simple como la suma, la multiplicación o la concatenación de cadenas.

valor::
Una ((("valores")))de las unidades básicas de datos, como un número o cadena, que manipula un programa.

tipo::
Una categoría de valores ((("tipos"))). Los tipos que hemos visto hasta ahora son enteros (+Int64+), números de punto flotante (+Float64+) y cadenas (+String+).

entero::
Un tipo ((("tipo entero (Int64)")))que representa números enteros.

punto flotante::
Un tipo ((("tipo de punto flotante (Float64)")))que representa números con un punto decimal.

cadena::
Un tipo ((("cadenas")))que representa secuencias de caracteres.

lenguaje natural::
Cualquier ((("lenguaje natural")))lenguaje hablado que evolucionó naturalmente.

lenguaje formal::
Cualquier ((("lenguaje formal")))lenguaje que se ha diseñado para fines específicos, como la representación de ideas matemáticas o programas de computadora. Todos los lenguajes de programación ((("lenguaje de programación")))son lenguajes formales.

sintaxis::
Las reglas ((("sintaxis")))que gobiernan la estructura de un programa.

componente léxico::
Uno ((("componentes léxicos")))de los elementos básicos de la estructura de un programa, análogo a una palabra en un lenguaje natural.

estructura::
La manera en que los componentes léxicos ((("estructura")))se combinan.

análisis de sintaxis::
Examinar ((("análisis de sintaxis")))un programa y analizar la estructura sintáctica.

bug::
Un error ((("errores (bugs)", seealso="depuración")))((("bugs", see="errores")))en un programa.

depuración/debugging ::
El proceso ((("depuración", seealso="errores (bugs); probando")))de búsqueda y corrección de errores.


=== Ejercicios

[Observación]
====
Es una buena idea leer este libro frente a un computador para que pueda hacer los ejemplos y ejercicios conforme avance.
====

[[ex01-1]]
==== Ejercicio 1-1
Siempre que esté experimentando con algo nuevo, debe intentar cometer errores. Por ejemplo, en el programa "¡Hola, Mundo!", ¿Qué sucede si omite una de las comillas? ¿Qué pasa si omite ambas? ¿Qué pasa si escribe +println+ mal?

Este tipo de ejercicios le ayuda a recordar lo que leyó; también le ayuda a programar, porque puede saber qué significan los mensajes de error. Es mejor cometer errores ahora y a propósito, en lugar de después y accidentalmente.

. En un comando print, ¿qué sucede si omite uno de los paréntesis, o ambos?

. Si está intentando imprimir un _string_, ¿qué sucede si omite una de las comillas, o ambas?

. Se puede usar un signo menos para escribir un número negativo, como +-2+. ¿Qué sucede si pone un signo + antes de un número? ¿Qué pasa con +pass:[2++2]+?

. En notación matemática, los ceros a la derecha no tienen implicancia, como 02. ¿Qué pasa si intenta esto en Julia?

. ¿Qué sucede si tiene dos valores sin operador entre ellos?


[[ex01-2]]
==== Ejercicio 1-2

Inicie el Julia REPL y úselo como una calculadora.

. ¿Cuántos segundos hay en 42 minutos y 42 segundos?

. ¿Cuántas millas hay en 10 kilómetros?
+
[Observación]
====
Hay 1,61 kilómetros en una milla.
====

. Si corres una carrera de 10 kilómetros en 37 minutos y 48 segundos, ¿cuál es tu ritmo promedio (tiempo por milla en minutos y segundos)? ¿Cuál es tu velocidad promedio en millas por hora?
