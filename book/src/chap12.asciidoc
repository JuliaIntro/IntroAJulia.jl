[[chap12]]
== Tuplas

Este capítulo presenta otro tipo integrado; las tuplas, y luego muestra cómo las matrices, los diccionarios y las tuplas funcionan en conjunto. También se presenta una característica útil para las matrices de longitud variable como argumento: los operadores de recopilación y dispersión.

=== Las Tuplas son Immutables

Una tupla es una secuencia de valores. Los valores pueden ser de cualquier tipo, y están indexados por enteros, por lo que las tuplas son muy parecidas a las matrices. La diferencia más importante es que las tuplas son inmutables y que cada elemento puede tener su propio tipo.
(((tuple)))(((immutable)))

Una tupla es una lista de valores separados por comas:

[source,@julia-repl-test]
----
julia> t = 'a', 'b', 'c', 'd', 'e'
('a', 'b', 'c', 'd', 'e')
----

Aunque no es necesario, es común encerrar las tuplas entre paréntesis:
(((parentheses)))

[source,@julia-repl-test]
----
julia> t = ('a', 'b', 'c', 'd', 'e')
('a', 'b', 'c', 'd', 'e')
----

Para crear una tupla con un solo elemento, se debe incluir una coma final:
(((final comma)))(((typeof)))(((Tuple)))((("type", "Base", "Tuple", see="Tuple")))

[source,@julia-repl-test]
----
julia> t1 = ('a',)
('a',)
julia> typeof(t1)
Tuple{Char}
----

[WARNING]
====
Un valor entre paréntesis sin coma no es una tupla:

[source,@julia-repl-test]
----
julia> t2 = ('a')
'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)
julia> typeof(t2)
Char
----

====

Otra forma de crear una tupla es la función de tupla integrada en Julia. Sin argumento, esta función crea una tupla vacía:
(((tuple)))((("function", "Base", "tuple", see="tuple")))

[source,@julia-repl-test]
----
julia> tuple()
()
----

Si se tienen múltiples argumentos, el resultado es una tupla con los argumentos dados:

[source,@julia-repl-test]
----
julia> t3 = tuple(1, 'a', pi)
(1, 'a', π)
----

Ya que tuple es el nombre de una función integrada, debe evitar usarla como nombre de variable.

La mayoría de los operadores de matriz también sirven en las tuplas. El operador corchete indexa un elemento:
(((bracket operator)))

[source,@julia-repl-test chap12]
----
julia> t = ('a', 'b', 'c', 'd', 'e');

julia> t[1]
'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)
----

Y el operador porción selecciona un rango de elementos:
(((slice operator)))

[source,@julia-repl-test chap12]
----
julia> t[2:4]
('b', 'c', 'd')
----

Pero si se intenta modificar uno de los elementos de la tupla, se obtendrá un error:
(((MethodError)))

[source,@julia-repl-test chap12]
----
julia> t[1] = 'A'
ERROR: MethodError: no method matching setindex!(::NTuple{5,Char}, ::Char, ::Int64)
----

Como las tuplas son inmutables, sus elementos no se pueden modificar.

Los operadores relacionales funcionan con las tuplas y otras secuencias; Julia comienza comparando el primer elemento de cada secuencia. Si son iguales, pasa a los siguientes elementos, y así sucesivamente, hasta que encuentra elementos que difieren. Los elementos posteriores no se consideran (incluso si son realmente grandes).
(((relational operator)))

[source,@julia-repl-test]
----
julia> (0, 1, 2) < (0, 3, 4)
true
julia> (0, 1, 2000000) < (0, 3, 4)
true
----


=== Asignación de tupla

De vez en cuando, es útil intercambiar los valores de dos variables. Para hacerlo con sentencias de asignación convencionales debemos usar una variable temporal. Por ejemplo, para intercambiar a y b:
(((assignment)))

[source,julia]
----
temp = a
a = b
b = temp
----

Esta solución resulta aparatosa. La asignación de tuplas soluciona este problema elegantemente:
(((tuple assignment)))

[source,julia]
----
a, b = b, a
----

El lado izquierdo es una tupla de variables; el lado derecho es una tupla de expresiones. Cada valor se asigna a su respectiva variable. Todas las expresiones del lado derecho se evalúan antes de las asignaciones.

El número de variables de la izquierda tiene que ser menor o igual que el número de valores a la derecha:
(((BoundsError)))

[source,@julia-repl-test]
----
julia> (a, b) = (1, 2, 3)
(1, 2, 3)
julia> a, b, c = 1, 2
ERROR: BoundsError: attempt to access (1, 2)
  at index [3]
----

El lado derecho puede ser cualquier tipo de secuencia (cadena, matriz o tupla). Por ejemplo, para dividir una dirección de correo electrónico en nombre de usuario y dominio, se puede escribir:
(((split)))

[source,@julia-repl-test chap12]
----
julia> addr = "julio.cesar@roma"
"julio.cesar@roma"
julia> unombre, dominio = split(addr, '@');

----

El valor de retorno de +split+ es una matriz con dos elementos; el primer elemento se asigna a +unombre+, y el segundo a +dominio+.

[source,@julia-repl-test chap12]
----
julia> unombre
"julio.cesar"
julia> dominio
"roma"
----


=== Tuplas como valor de retorno

Estrictamente hablando, una función solo puede devolver un valor, pero si el valor es una tupla, el efecto es el mismo que devolver múltiples valores. Por ejemplo, si desea dividir dos enteros y calcular el cociente y el resto, es ineficiente calcular +x ÷ y+ y luego +x % y+. Es mejor calcular ambos al mismo tiempo.
(((÷)))(((%)))

La función integrada +divrem+ toma dos argumentos y devuelve una tupla de dos valores: el cociente y el resto. El resultado puede ser almacenado como una tupla:
(((divrem)))((("function", "Base", "divrem", see="divrem")))

[source,@julia-repl-test]
----
julia> t = divrem(7, 3)
(2, 1)
----

También se puede utilizar asignación de tuplas para almacenar los elementos por separado:

[source,@julia-repl-test]
----
julia> q, r = divrem(7, 3);

julia> @show q r;
q = 2
r = 1
----

Aquí hay un ejemplo de una función que devuelve una tupla:
(((minmax)))((("function", "programmer-defined", "minmax", see="minmax")))

[source,@julia-setup]
----
function minmax(t)
    minimum(t), maximum(t)
end
----

+máximo+ y +mínimo+ son funciones integradas que encuentran los elementos más grandes y más pequeños de una secuencia, respectivamente. La función +minmax+ calcula ambos y devuelve una tupla de dos valores. Otra alternativa es utilizar la función integrada +extrema+, lo cual es más eficiente.
(((maximum)))(((minimum)))(((extrema)))((("function", "Base", "maximum", see="maximum")))((("function", "Base", "minimum", see="minimum")))((("function", "Base", "extrema", see="extrema")))

=== Tupla con Argumentos de Longitud Variable

Las funciones pueden tomar un número variable de argumentos. Un nombre de parámetro que termina con +pass:[...]+ _recopila_ argumentos en una tupla. Por ejemplo, +imprimirtodo+ toma cualquier número de argumentos y los imprime:
(((gather)))(((...)))(((printall)))((("function", "programmer-defined", "printall", see="printall")))

[source,@julia-setup chap12]
----
function imprimirtodo(args...)
    println(args)
end
----

El parámetro de recopilación puede tener cualquier nombre, pero la convención es llamarlo +args+. A continuación se muestra cómo funciona la función:

[source,@julia-repl-test chap12]
----
julia> imprimirtodo(1, 2.0, '3')
(1, 2.0, '3')
----

El opuesto de la recopilación es la _dispersión_. Si tiene una secuencia de valores y desea pasarla a una función como argumento múltiple, puede usar el operador +pass:[...]+ . Por ejemplo, +divrem+ toma exactamente dos argumentos; no funciona con tuplas:
(((scatter)))(((MethodError)))

[source,@julia-repl-test chap12]
----
julia> t = (7, 3);

julia> divrem(t)
ERROR: MethodError: no method matching divrem(::Tuple{Int64,Int64})
----

Pero si "dispersamos" la tupla, funciona:

[source,@julia-repl-test chap12]
----
julia> divrem(t...)
(2, 1)
----

Muchas de las funciones integradas usan tuplas con argumentos de longitud variable. Por ejemplo, +max+ y +min+ pueden tomar cualquier número de argumentos:
(((max)))(((min)))((("function", "Base", "max", see="max")))((("function", "Base", "min", see="min")))

[source,@julia-repl-test]
----
julia> max(1, 2, 3)
3
----

Pero +sum+ no:
(((sum)))

[source,@julia-repl-test]
----
julia> sum(1, 2, 3)
ERROR: MethodError: no method matching sum(::Int64, ::Int64, ::Int64)
----

==== Ejercicio 12-1

Escriba una función llamada +sumall+ que tome cualquier número de argumentos y devuelva su suma.
(((sumall)))((("function", "programmer-defined", "sumall", see="sumall")))

En el mundo de Julia, generalmente se le llama “slurp” ("sorber" en español) a reunir y "splat" ("plaf" en español, como el ruido cuando cae algo) a dispersar.

=== Matrices y tuplas

+zip+ es una función integrada que toma dos o más secuencias y devuelve una colección de tuplas donde cada tupla contiene un elemento de cada secuencia. El nombre de la función se refiere a una cremallera, que une e intercala dos filas de dientes.
(((zip)))((("function", "Base", "zip", see="zip")))

Este ejemplo une e intercala una cadena y una matriz:

[source,@julia-repl-test chap12]
----
julia> s = "abc";

julia> t = [1, 2, 3];

julia> zip(s, t)
Base.Iterators.Zip{Tuple{String,Array{Int64,1}}}(("abc", [1, 2, 3]))
----

El resultado es un _objeto zip_ que permite iterar a través de los pares. El uso más común de +zip+ es en un bucle +for+:
(((zip object)))(((for statement)))

[source,@julia-repl-test chap12]
----
julia> for par in zip(s, t)
           println(par)
       end
('a', 1)
('b', 2)
('c', 3)
----

Un objeto zip es un tipo de _iterador_, que es cualquier objeto que itera a través de una secuencia. Los iteradores son, de cierto modo, similares a las matrices, pero a diferencia de las matrices, no se puede usar un índice para seleccionar un elemento de un iterador.
(((iterator)))

Si desea usar operadores y funciones de matrices, puedes usar un objeto zip para hacer una matriz:
(((collect)))

[source,@julia-repl-test chap12]
----
julia> collect(zip(s, t))
3-element Array{Tuple{Char,Int64},1}:
 ('a', 1)
 ('b', 2)
 ('c', 3)
----

El resultado es una serie de tuplas; en este ejemplo, cada tupla contiene un carácter de la cadena y el elemento correspondiente de la matriz.

Si las secuencias no tienen el mismo largo, el resultado tiene el largo de la más corta.

[source,@julia-repl-test]
----
julia> collect(zip("Juan", "Gabriel"))
4-element Array{Tuple{Char,Char},1}:
 ('J', 'G')
 ('u', 'a')
 ('a', 'b')
 ('n', 'r')
----

Se puede usar asignación de tuplas en un bucle +for+ para recorrer una matriz de tuplas:
(((tuple assignment)))

[source,@julia-repl-test]
----
julia> t = [('a', 1), ('b', 2), ('c', 3)];

julia> for (letra, numero) in t
           println(numero, " ", letra)
       end
1 a
2 b
3 c
----

En cada iteración del ciclo, Julia selecciona la siguiente tupla en la matriz y asigna estos elementos a letra y número. Los paréntesis de +(letra, número)+ son obligatorios.
(((parentheses)))

Si combinamos +zip+, +for+ y asignación de tuplas, tendremos una forma para recorrer dos (o más) secuencias al mismo tiempo. Por ejemplo, la función +coinciden+ toma dos secuencias, +t1+ y +t2+, y devuelve +true+ si hay un índice +i+ tal que +t1[i] == t2[i]+:
(((hasmatch)))((("function", "Base", "hasmatch", see="hasmatch")))

[source,@julia-setup chap12]
----
function coinciden(t1, t2)
    for (x, y) in zip(t1, t2)
        if x == y
            return true
        end
    end
    false
end
----

Si se necesita recorrer los elementos de una secuencia y sus índices, se puede usar la función integrada +enumerate+:
(((enumerate)))((("function", "Base", "enumerate", see="enumerate")))

[source,@julia-repl-test chap12]
----
julia> for (indice, elemento) in enumerate("abc")
           println(indice, " ", elemento)
       end
1 a
2 b
3 c
----

El resultado de +enumerate+ es un objeto enumerate, el cual hace una iteración sobre una secuencia de pares, donde cada par contiene un índice (a partir de 1) y un elemento de la secuencia dada.


=== Diccionarios y Tuplas

Los diccionarios se pueden usar como iteradores que iteran sobre los pares clave-valor. Puede usarlos en un bucle +for+ como este:
(((key-value pair)))(((for statement)))

[source,@julia-repl-test]
----
julia> d = Dict('a'=>1, 'b'=>2, 'c'=>3);

julia> for (key, value) in d
           println(key, " ", value)
       end
a 1
c 3
b 2
----

Como es de esperar, en un diccionario los elementos no están en un orden particular.

Ahora, si queremos hacer lo contrario, podemos usar una serie de tuplas para inicializar un nuevo diccionario:

[source,@julia-repl-test]
----
julia> t = [('a', 1), ('c', 3), ('b', 2)];

julia> d = Dict(t)
Dict{Char,Int64} with 3 entries:
  'a' => 1
  'c' => 3
  'b' => 2
----

Al combinar +Dict+ con +zip+, podemos crear un diccionario de una manera muy simple:
(((zip)))

[source,@julia-repl-test]
----
julia> d = Dict(zip("abc", 1:3))
Dict{Char,Int64} with 3 entries:
  'a' => 1
  'c' => 3
  'b' => 2
----

Es común usar tuplas como claves en los diccionarios. Por ejemplo, un directorio telefónico puede asignar números de teléfono a una tupla con apellido y nombre. Suponiendo que hemos definido +apellido+, +nombre+ y +numero+, podríamos escribir:

[source,julia]
----
directorio[apellido, nombre] = numero
----

La expresión entre paréntesis es una tupla. Podríamos usar asignación de tuplas para recorrer este diccionario.

[source,julia]
----
for ((apellido, nombre), numero) in directorio
    println(nombre, " ", apellido, " ", numero)
end
----

Este bucle recorre los pares clave-valor en +directorio+, los cuales son tuplas. Asigna los elementos de la clave de cada tupla a +apellido+ y +nombre+, y el valor a +numero+, luego imprime el nombre y el número de teléfono correspondiente.

Hay dos formas de representar tuplas en un diagrama de estado. La versión más detallada muestra los índices y elementos tal como aparecen en una matriz. Por ejemplo, la tupla +("Cleese", "John")+ se vería como en <<fig12-1>>.
(((state diagram)))

[[fig12-1]]
.State diagram
image::images/fig121.svg[]

Pero en un diagrama más grande, es posible que desee omitir algunos detalles. Por ejemplo, un diagrama del directorio telefónico puede verse como en <<fig12-2>>.
(((state diagram)))

[[fig12-2]]
.State diagram
image::images/fig122.svg[]

Aquí las tuplas se muestran usando la sintaxis de Julia para tener un esquema más simple. El número de teléfono del diagrama es el número de reclamos de la BBC, así que no intentes llamar.


=== Secuencias de Secuencias

Nos hemos centrado en las matrices de tuplas, pero casi todos los ejemplos de este capítulo también funcionan con matrices de matrices, tuplas de tuplas y tuplas de matrices. Para evitar enumerar todas las posibles combinaciones, a veces es más fácil hablar sobre secuencias de secuencias.
(((sequence of sequences)))

En muchos contextos, los diferentes tipos de secuencias (cadenas, matrices y tuplas) se pueden usar indistintamente. Entonces, ¿cómo elegir uno u otro?
(((string)))(((array)))(((tuple)))

Para comenzar con lo mas obvio, las cadenas son más limitadas que las demás secuencias, porque los elementos deben ser caracteres. Además son inmutables. Si necesitas poder cambiar los caracteres en una cadena (en vez de crear una nueva), puede que lo mas adecuado sea elegir una matriz de caracteres.
(((immutable)))

Las matrices se usan con mas frecuencia que las tuplas, principalmente porque son mutables. Pero hay algunos casos donde es posible que prefieras usar tuplas:
(((mutable)))

* En algunos contextos, como en una sentencia return, resulta sintácticamente más simple crear una tupla que una matriz.

*  Si estas pasando una secuencia como argumento de una función, el uso de tuplas reduce los comportamientos potencialmente indeseados debido a la creacion de alias. 
(((aliasing)))

* Por rendimiento. El compilador puede especializarse en este tipo.

Dado que las tuplas son inmutables, no tienen funciones como +sort!+ y +reverse!+, que modifican matrices ya existentes. Sin embargo, Julia proporciona las funciones integradas +sort+, que toma una matriz y devuelve una secuencia nueva con los mismos elementos ordenados, y +reverse+, que toma cualquier secuencia y devuelve una secuencia nueva del mismo tipo con los mismos elementos en el orden contrario.
(((sort)))(((sort!)))(((reverse)))(((reverse!)))(((zip)))((("function", "Base", "reverse", see="reverse")))(((zip)))((("function", "Base", "reverse!", see="reverse!")))


=== Depuración

Las matrices, diccionarios y tuplas son ejemplos de _estructuras de datos_; en este capítulo estamos comenzando a ver estructuras de datos compuestas, como matrices o tuplas, y diccionarios que contienen tuplas como claves y matrices como valores. Las estructuras de datos compuestas son utiles, pero también resultan propensas a lo que yo llamo _errores de forma_; es decir, errores causados cuando una estructura de datos tiene el tipo, tamaño o estructura incorrecta. Por ejemplo, si estás esperando una lista con un entero y te paso simplemente un entero (no en una lista), no funcionará.
(((debugging)))(((data structures)))(((shape error)))

Julia permite añadir el tipo a elementos de una secuencia. Esto se detalla en <<chap17>>. Especificar el tipo elimina muchos errores de forma.


=== Glosario

tupla::
Una secuencia inmutable de elementos donde cada elemento puede tener su propio tipo.
(((tuple)))

asignación en tupla::
Una asignacion con una secuencia en el lado derecho y una tupla de variables en el izquierdo. Primero se evalua el lado derecho y luego sus elementos son asignados a las variables de la izquierda.
(((tuple assignment)))

reunir::
La operacion de armar una tupla con argumentos de longitud variable.
(((gather)))

dispersar::
La operacion de tratar una secuencia como una lista de argumentos. 
(((scatter)))

objeto zip::
El resultado de llamar a la función integrada +zip+; un objeto que itera a través de una secuencia de tuplas.
(((zip object)))

iterador::
Un objeto que puede iterar a través de una secuencia, pero que no tiene los operadores y funciones de matriz.
(((iterator)))

estructura de datos::
Una coleccion de valores relacionados, a menudo organizados en matrices, diccionarios, tuplas, etc.
(((data structure)))

error de forma::
Un error causado porque un valor tiene la forma incorrecta; es decir, el tipo o tamaño incorrecto.
(((shape error)))


=== Ejercicios

[[ex12-1]]
==== Ejercicio 12-2

Escriba una función llamada +masfrecuente+ que tome una cadena e imprima las letras en orden decreciente de frecuencia. Encuentre muestras de texto de varios idiomas diferentes y vea cómo la frecuencia de las letras varía entre idiomas. Compare sus resultados con las tablas en https://en.wikipedia.org/wiki/Letter_frequencies.
(((mostfrequent)))((("function", "programmer-defined", "mostfrequent", see="mostfrequent")))

[[ex12-2]]
==== Ejercicio 12-3

¡Más anagramas!

. Escriba un programa que lea una lista de palabras de un archivo (vea <<reading_word_lists>>) e imprima todos los conjuntos de palabras que son anagramas.
+
Aquí hay un ejemplo de cómo se vería la salida:
+
[source,julia]
----
["brazo", "zobra", "broza", "zarbo"]
["palabra", "parlaba"]
["vida", "diva"]
["gato", "toga", "gota"]
----
+
[TIP]
====
Es posible que desee crear un diccionario que asigne a una colección de letras una serie de palabras que se puedan deletrear con esas letras. La pregunta es, ¿cómo representar la colección de letras de una manera que pueda usarse como clave?
====

. Modifique el programa anterior para que imprima primero la matriz más larga de anagramas, seguida de la segunda más larga, y así sucesivamente.

. En Scrabble, un "bingo" es cuando juegas las siete fichas de tu atril, junto con una letra del tablero, para formar una palabra de ocho letras. ¿Qué colección de 8 letras forman parte del bingo más probable?

[[ex12-3]]
==== Ejercicio 12-4

Dos palabras metatizan si se puede transformar una en la otra intercambiando dos letras; por ejemplo, "conversar" y "conservar". Escriba un programa que encuentre todos los pares de metátesis en el diccionario.
(((metathesis pair)))

[TIP]
====
No pruebe con todos los pares de palabras, ni tampoco con todos los intercambios posibles.
====

Credit: This exercise is inspired by an example at http://puzzlers.org.

[[ex12-4]]
==== Ejercicio 12-5

Aquí hay otro Puzzle de Car Talk (https://www.cartalk.com/puzzler/browse):
(((Car Talk)))

[quote]
____
¿Cuál es la palabra en español más larga, que sigue siendo una palabra en español válida a medida que se eliminan sus letras una a una?

Las letras se pueden eliminar de cualquier extremo o del medio, pero no se puede reordenar ninguna de ellas. Cada vez que eliminas una letra, te quedas con otra palabra en español. Eventualmente terminarás con una letra, la cual también será una palabra en español que puedes encontrar en el diccionario. Se desea saber cuál es la palabra más larga y cuántas letras tiene.

A modo de ejemplo, pensemos en la palabra: Palote. ¿De acuerdo? Comienzas con palote, eliminas la letra p y queda alote, luego quitamos la t y nos quedamos con aloe, tomamos la e y tenemos alo, quitando la o tenemos al, y finalmente, eliminando la l nos queda a.
____

Escriba un programa que encuentre todas las palabras que se pueden reducir de esta manera, y luego encuentre la más larga.

[TIP]
====
Este ejercicio es un poco más desafiante que el resto, así que aquí hay algunas sugerencias:

. Es posible que quieras escribir una función que tome una palabra y calcule una matriz de todas las palabras que se pueden formar al eliminar una letra. Estos son los "hijos" de la palabra.

. De manera recursiva, una palabra es reducible si alguno de sus hijos es reducible. Como caso base, puede considerar la cadena vacía reducible. 
(((reducible)))

. La lista de palabras _palabras.txt_ no tiene la cadena vacía, por lo que tendrás que agregarla.

. Para mejorar el rendimiento de su programa, es posible que desee guardar las palabras que se sabe que son reducibles.
(((memo)))
====

