[[chap20]]
== Extra: Base y Librería Estándar

Julia tiene todo lo necesario. El módulo +Base+ contiene las funciones, tipos y macros más útiles, los cuales están disponibles directamente en Julia.
(((Base)))

Julia también posee una gran cantidad de módulos especializados en su Biblioteca Estándar (módulos para fechas, computación distribuida, álgebra lineal, perfiles, números aleatorios, entre otros). Las funciones, los tipos y las macros definidos en la Biblioteca Estándar deben importarse antes de poder usarse:

* +import _Module_+ importa el modulo, y +_Module.fn_(x)+ llama a la función +_fn_+
(((import)))((("keyword", "import", see="import")))
* +using _Module_+ importa todas las funciones, tipos y macros exportadas de +_Module_+.
(((using)))

Además, es posible agregar más funciones a una gran cantidad de paquetes (https://juliaobserver.com).

Este capítulo no es un reemplazo de la documentación oficial de Julia. Sólo se dan algunos ejemplos para ilustrar lo que es posible hacer, sin ser exhaustivo. Las funciones ya vistas no están incluidas. Se puede encontrar una explicación más completa en https://docs.julialang.org.


=== Midiendo el Rendimiento

Hemos visto que algunos algoritmos funcionan mejor que otros. +fibonnaci+ en <<memos>> es mucho más rápido que +fib+ en <<one_more_example>>. La macro +@time+ permite cuantificar la diferencia:
(((@time)))((("macro", "Base", "@time", see="@time")))

[source,jlcon]
----
julia> fib(1)
1
julia> fibonacci(1)
1
julia> @time fib(40)
  0.567546 seconds (5 allocations: 176 bytes)
102334155
julia> @time fibonacci(40)
  0.000012 seconds (8 allocations: 1.547 KiB)
102334155
----

+@time+ imprime el tiempo que tardó en ejecutarse la función, el número de asignaciones (allocations) y la memoria asignada antes de devolver el resultado. La función fibonacci, que guarda resultados previos, es mucho más rápida pero necesita más memoria.

[quote]
____
El teorema "No free lunch" dice que no existe un único modelo que funcione mejor en todos los casos.
____

[TIP]
====

Para comparar dos algoritmos, estos deben implementarse como funciones. Una función en Julia se compila la primera vez que se ejecuta, por lo tanto, se debe excluir la primera vez que se llama a estas funciones al medir el rendimiento. De lo contrario, también se mediría el tiempo de compilación.

El paquete +BenchmarkTools+ (https://github.com/JuliaCI/BenchmarkTools.jl) proporciona la macro +@btime+ que realiza una evaluación comparativa de la manera correcta. ¡Así que úsela!
====


[[collections_and_data_structures]]
=== Colecciones y Estructuras de Datos

En <<dictionary_subtraction>> se usan diccionarios para encontrar las palabras que aparecían en un documento y que no aparecían en un arreglo de palabras. La función que se escribió tomaba +d1+, que contenía las palabras del documento como claves, y +d2+, que contenía el arreglo de palabras. Y devolvía un diccionario que contenía las claves de +d1+ que no estaban en +d2+. 
(((resta)))

[source,@julia-setup]
----
function resta(d1, d2)
    res = Dict()
    for clave in keys(d1)
        if clave ∉ keys(d2)
            res[clave] = nothing
        end
    end
    res
end
----


En todos estos diccionarios, los valores son +nothing+ porque nunca son usados. Con esto se está desperdiciando espacio de almacenamiento.

Julia ofrece otro tipo integrado llamado _conjunto_, que se comporta como una colección de claves de diccionario sin valores. Agregar elementos a un conjunto es rápido y también lo es verificar si un elemento forma parte de él. Además, los conjuntos proporcionan funciones y operadores para calcular operaciones de conjuntos.
(((Set)))((("tipo", "Base", "Set", see="Set")))

Por ejemplo, la resta de conjuntos está disponible como una función llamada +setdiff+. Entonces reescribiendo +resta+:
(((setdiff)))((("función", "Base", "setdiff", see="setdiff")))

[source,@julia-setup]
----
function resta(d1, d2)
    setdiff(d1, d2)
end
----

El resultado es un conjunto en vez de un diccionario.

Algunos de los ejercicios en este libro se pueden hacer de manera eficiente y concisa con conjuntos. Por ejemplo, a continuación se muestra una solución para +repetido+, de <<ex10-7>>, que usa un diccionario:
(((repetido)))

[source,@julia-setup]
----
function repetido(t)
    d = Dict()
    for x in t
        if x ∈ d
            return true
        end
        d[x] = nothing
    end
    false
end
----

Cuando un elemento aparece por primera vez, se agrega al diccionario. Si el mismo elemento aparece nuevamente, la función devuelve +true+.

Usando conjuntos, podemos escribir la misma función:

[source,@julia-setup]
----
function repetido(t)
    length(Set(t)) < length(t)
end
----

Un elemento solo puede aparecer en un conjunto una vez, por lo que si un elemento en +t+ aparece más de una vez, el conjunto será más pequeño que +t+. Si no hay elementos repetidos, el conjunto tendrá el mismo tamaño que +t+.

También podemos usar conjuntos para hacer algunos de los ejercicios de <<chap09>>. Por ejemplo, aquí hay una versión de +usasolo+ con un bucle:
(((usasolo)))

[source,@julia-setup]
----
function usasolo(palabra, disponibles)
    for letra in palabra
        if letra ∉ disponibles
            return false
        end
    end
    true
end
----

+usasolo+ comprueba si todas las letras en +palabra+ están en +disponibles+. Podemos reescribir esta función:

[source,@julia-setup]
----
function usasolo(palabra, disponibles)
    Set(palabra) ⊆ Set(disponibles)
end
----

El operador +⊆+ (*+\subseteq TAB+*) verifica si un conjunto es un subconjunto de otro, incluida la posibilidad de que sean iguales, lo cual es cierto si todas las letras en +palabra+ aparecen en +disponibles+.
(((⊆)))((("operador", "Base", "⊆", see="⊆")))

==== Exercise 20-1

Reescriba la función +evita+ de <<chap09>> usando conjuntos.
(((evita)))


=== Matemáticas

También se pueden usar números complejos en Julia. La constante global +im+ está asociada al número complejo latexmath:[$\mathrm{i}$], que representa la raíz cuadrada principal de latexmath:[$-1$].
(((números complejos)))(((im)))

Ahora se puede verificar la identidad de Euler,
(((identidad de Euler)))

[source,@julia-repl-test]
----
julia> ℯ^(im*π)+1
0.0 + 1.2246467991473532e-16im
----

El símbolo +ℯ+ (*+\euler TAB+*) es la base de los logaritmos naturales.
(((ℯ))) 

Se puede analizar la naturaleza compleja de las funciones trigonométricas:

[latexmath]
++++
\begin{equation}
{\cos\left(x\right)=\frac{\mathrm{e}^{\mathrm{i}x}+\mathrm{e}^{-\mathrm{i}x}}{2}\,.}
\end{equation}
++++

Se puede probar esta fórmula para diferentes valores de latexmath:[x].

[source,@julia-repl-test]
----
julia> x = 0:0.1:2π
0.0:0.1:6.2
julia> cos.(x) == 0.5*(ℯ.^(im*x)+ℯ.^(-im*x))
true
----

Aquí se muestra otro ejemplo del operador punto. Julia también permite usar valores numéricos con identificadores (símbolos léxicos que nombran entidades, como +π+) como en +2π+.

=== Cadenas

En <<chap08>> y <<chap09>>, se realizan algunas búsquedas en cadenas. Además, Julia puede usar _expresiones regulares_ (o _regexes_) compatibles con Perl, lo que facilita la tarea de encontrar patrones complejos en cadenas.
(((regex)))

La función +usasolo+ se puede implementar como una expresión regular:
(((usasolo)))(((Regex)))((("tipo", "Base", "Regex", see="Regex")))(((occursin)))((("función", "Base", "occursin", see="occursin")))

[source,@julia-setup chap20]
----
function usasolo(palabra, disponibles)
  r = Regex("[^$(disponibles)]")
  !occursin(r, palabra)
end
----

La expresión regular busca un carácter que no está en la cadena +disponible+ y +occursin+ devuelve +true+ si el patrón se encuentra en +palabra+.

[source,@julia-repl-test chap20]
----
julia> usasolo("banana", "abn")
true
julia> usasolo("bananas", "abn")
false
----

Las expresiones regulares también se pueden construir como literales de cadena no estándar con el prefijo +r+:
(((string)))(((match)))((("función", "Base", "match", see="match")))

[source,@julia-repl-test chap20]
----
julia> match(r"[^abn]", "banana")

julia> m = match(r"[^abn]", "bananas")
RegexMatch("s")
----

En este caso, la interpolación de cadenas no está permitida. La función +match+ devuelve nothing si no se encuentra el patrón, de lo contrario, devuelve un objeto regexmatch.
(((interpolación de cadenas)))(((RegexMatch)))((("tipo", "Base", "RegexMatch", see="RegexMatch")))

Podemos extraer la siguiente información de un objeto regexmatch:

* La subcadena que coincide: +m.match+
* Las subcadenas que coinciden en forma de arreglo de cadenas: +m.captures+
* La primera posición en la que se encuentra el patrón: +m.offset+
* Las posiciones de las subcadenas que coinciden en forma de arreglo: +m.offsets+

[source,@julia-repl-test chap20]
----
julia> m.match
"s"
julia> m.offset
7
----

Las expresiones regulares son extremadamente poderosas y el manual de PERL http://perldoc.perl.org/perlre.html explica cómo realizar hasta las búsquedas más extrañas.

=== Arreglos

En el <<chap10>> se usa un objeto de arreglo unidimensional, con un índice para acceder a sus elementos. Sin embargo, en Julia las matrices son multidimensionales.

Se puede crear una _matriz_ de ceros de 2 por 3:
(((zeros)))((("función", "Base", "zeros", see="zeros")))(((matrix)))

[source,@julia-repl-test chap20]
----
julia> z = zeros(Float64, 2, 3)
2×3 Array{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0
julia> typeof(z)
Array{Float64,2}
----

El tipo de esta matriz es un arreglo que contiene números de punto flotante. Esta matriz es de 2 dimensiones.
(((dimensión)))

La función +size+ devuelve una tupla con el número de elementos en cada dimensión:
(((size)))((("función", "Base", "size", see="size")))

[source,@julia-repl-test chap20]
----
julia> size(z)
(2, 3)
----

La función +ones+ construye una matriz con elementos de valor unitario:
(((ones)))((("función", "Base", "ones", see="ones")))

[source,@julia-repl-test chap20]
----
julia> s = ones(String, 1, 3)
1×3 Array{String,2}:
 ""  ""  ""
----

El elemento de valor unitario de una cadena es una cadena vacía.

[WARNING]
====
+s+ no es un arreglo unidimensional:

[source,@julia-repl-test chap20]
----
julia> s ==  ["", "", ""]
false
----

+s+ es un vector fila y +["", "", ""]+ es un vector columna.
====

Se puede crear una matriz usando espacios para separar elementos en una fila, y punto y coma +;+ para separar filas:
(((;)))

[source,@julia-repl-test chap20]
----
julia> a = [1 2 3; 4 5 6]
2×3 Array{Int64,2}:
 1  2  3
 4  5  6
----

Se pueden usar corchetes para modificar elementos de una matriz:
(((corchetes)))

[source,@julia-repl-test chap20]
----
julia> z[1,2] = 1
1
julia> z[2,3] = 1
1
julia> z
2×3 Array{Float64,2}:
 0.0  1.0  0.0
 0.0  0.0  1.0
----

Se pueden usar porciones en cada dimensión para seleccionar un subgrupo de elementos:
(((porción)))

[source,@julia-repl-test chap20]
----
julia> u = z[:,2:end]
2×2 Array{Float64,2}:
 1.0  0.0
 0.0  1.0
----

El operador +.+ aplica una operación en todas las dimensiones:
(((.)))

[source,@julia-repl-test chap20]
----
julia> ℯ.^(im*u)
2×2 Array{Complex{Float64},2}:
 0.540302+0.841471im       1.0+0.0im
      1.0+0.0im       0.540302+0.841471im
----

=== Interfaces

Julia especifica algunas interfaces informales para definir comportamientos, es decir, métodos con un objetivo específico. Cuando se  extienden estos métodos para un tipo, los objetos de ese tipo se pueden usar para construir estos comportamientos.
(((interfaz)))

[quote]
____
Si parece un pato, nada como un pato y grazna como un pato, entonces probablemente _sea_ un pato.
____

En <<one_more_example>> implementamos la función +fib+ que devuelve el elemento latexmath:[n]-ésimo de la secuencia de Fibonnaci.

Recorrer los valores de una colección, lo cual recibe el nombre de iteración, es una interfaz de este tipo. Se puede crear un iterador que devuelva la secuencia de Fibonacci:
(((iterador)))(((Fibonacci)))((("tipo", "definida por el programador", "Fibonacci", see="Fibonacci")))(((iterate)))((("función", "Base", "iterate", see="iterate")))

[source,@julia-setup chap20]
----
struct Fibonacci{T<:Real} end
Fibonacci(d::DataType) = d<:Real ? Fibonacci{d}() : error("No Real type!")

Base.iterate(::Fibonacci{T}) where {T<:Real} = (zero(T), (one(T), one(T)))
Base.iterate(::Fibonacci{T}, state::Tuple{T, T}) where {T<:Real} = (state[1], (state[2], state[1] + state[2]))
----

Se implementa un tipo paramétrico +Fibonacci+ sin atributos, un constructor externo y dos métodos +iterate+. Se llama al primer método +iterate+ para inicializar el iterador, y este devuelve una tupla que consta de un primer valor: 0, y un estado. El estado en este caso es una tupla que contiene el segundo y el tercer valor: 1 y 1.

Se llama al segundo método +iterate+ para obtener el siguiente valor de la secuencia de Fibonacci, y devuelve una tupla que tiene como primer elemento el siguiente valor y como segundo elemento el estado que es una tupla con los dos valores siguientes.

Ahora se puede usar +Fibonacci+ en un bucle +for+:
(((sentencia for)))

[source,@julia-repl-test chap20]
----
julia> for e in Fibonacci(Int64)
           e > 100 && break
           print(e, " ")
       end
0 1 1 2 3 5 8 13 21 34 55 89
----

Parece sacado debajo de la manga, pero la explicación es simple. Un bucle +for+ en Julia

[source,julia]
----
for i in iter
    # body
end
----

se traduce en:

[source,julia]
----
next = iterate(iter)
while next !== nothing
    (i, state) = next
    # body
    next = iterate(iter, state)
end
----

Este es un ejemplo de cómo una interfaz bien definida permite que una implementación use todas las funciones disponibles en esta interfaz.

=== Módulo Interactive Utilities

Ya se ha visto el módulo +InteractiveUtils+ en <<interactive>>. La macro +@which+ es solo una de las tantas opciones.
(((InteractiveUtils)))(((@which)))

La biblioteca LLVM transforma el código de Julia en código de máquina, en varios pasos. Podemos visualizar la salida de cada etapa.

Aquí se muestra un ejemplo simple:
(((sumacuadrada)))((("función", "definida por el programador", "sumacuadrada", see="sumacuadrada")))

[source,@julia-setup chap20]
----
function sumacuadrada(a::Float64, b::Float64)
    a^2 + b^2
end
----

El primer paso es mirar el código de bajo nivel (lowered code):
(((@code_lowered)))((("macro", "InteractiveUtils", "@code_lowered", see="@code_lowered")))

[source,@julia-repl-test chap20]
----
julia> using InteractiveUtils

julia> @code_lowered sumacuadrada(3.0, 4.0)
CodeInfo(
1 ─ %1 = Core.apply_type(Base.Val, 2)
│   %2 = (%1)()
│   %3 = Base.literal_pow(:^, a, %2)
│   %4 = Core.apply_type(Base.Val, 2)
│   %5 = (%4)()
│   %6 = Base.literal_pow(:^, b, %5)
│   %7 = %3 + %6
└──      return %7
)
----

La macro +@code_lowered+ devuelve un arreglo de una _representación intermedia_ del código que utiliza el compilador para generar código optimizado.
(((representación intermedia)))

El siguiente paso añade información del tipo:
(((@code_typed)))((("macro", "InteractiveUtils", "@code_typed", see="@code_typed")))

[source,@julia-repl-test chap20]
----
julia> @code_typed sumacuadrada(3.0, 4.0)
CodeInfo(
1 ─ %1 = Base.mul_float(a, a)::Float64
│   %2 = Base.mul_float(b, b)::Float64
│   %3 = Base.add_float(%1, %2)::Float64
└──      return %3
) => Float64
----

El tipo de resultados intermedios y el valor de retorno se infiere correctamente.

Esta representación del código se transforma en código LLVM:
(((LLVM code)))(((@code_llvm)))((("macro", "InteractiveUtils", "@code_llvm", see="@code_llvm")))

[source,@julia-repl chap20]
----
@code_llvm sumacuadrada(3.0, 4.0)
----

Y finalmente se genera el _código de máquina_:
(((código de máquina)))(((@code_native)))((("macro", "InteractiveUtils", "@code_native", see="@code_native")))

[source,@julia-repl-test chap20]
----
julia> @code_native sumacuadrada(3.0, 4.0)
	.section	__TEXT,__text,regular,pure_instructions
; ┌ @ none:2 within `sumacuadrada'
; │┌ @ intfuncs.jl:261 within `literal_pow'
; ││┌ @ none:2 within `*'
	vmulsd	%xmm0, %xmm0, %xmm0
	vmulsd	%xmm1, %xmm1, %xmm1
; │└└
; │┌ @ float.jl:401 within `+'
	vaddsd	%xmm1, %xmm0, %xmm0
; │└
	retq
	nopl	(%rax)
; └
----

=== Depuración

Las macros +Logging+ son una alternativa al andamiaje con sentencias de impresión:
(((@warn)))((("macro", "Base", "@warn", see="@warn")))(((depuración)))

[source,jlcon]
----
julia> @warn "¡Oh vosotros los que entráis, abandonad la depuración con printf!"
┌ Warning: ¡Oh vosotros los que entráis, abandonad la depuración con printf!
└ @ Main REPL[1]:1
----

Las sentencias de depuración (debug) no tienen que eliminarse del código. Por ejemplo, en contraste con el +@warn+ anterior,
(((sentencia de depuración)))(((@debug)))((("macro", "Base", "@debug", see="@debug")))

[source,jlcon]
----
julia> @debug "La suma de algunos valores $(sum(rand(100)))"

----

_debug_ por defecto no produce salida. En este caso, +sum(rand(100))+ nunca se evaluará a menos que _debug logging_ esté habilitado.
(((debug logging)))

El nivel de logging puede seleccionarse mediante la variable de entorno +JULIA_DEBUG+:
(((variable de entorno)))

[source]
----
$ JULIA_DEBUG=all julia -e '@debug "La suma de algunos valores $(sum(rand(100)))"'
┌ Debug: La suma de algunos valores 47.116520814555024
└ @ Main none:1
----

Aquí, hemos utilizado +all+ para obtener toda la información de depuración, pero también se puede optar por generar salida solo para un archivo o módulo específico.


=== Glosario

regex::
Expresión regular, una secuencia de caracteres que definen un patrón de búsqueda.
(((regex)))

matriz::
Arreglo bidimensional.
(((matrix)))

representación intermedia::
Estructura de datos utilizada internamente por un compilador para representar el código fuente.
(((intermediate representation)))

código de máquina::
Instrucciones que pueden ser ejecutadas directamente por la unidad central de procesamiento de una computadora.
(((machine code)))

debug logging::
Almacenar mensajes de depuración en un registro (log).
(((debug logging)))
