[[chap17]]
== Dispatch Múltiple 

Julia permite escribir código que puede funcionar con diferentes tipos. Esto se llama programación genérica.

En este capítulo se discutirá sobre las declaraciones de tipo en Julia. Además, se presentan los métodos, que son formas de implementar diferentes comportamientos en una función dependiendo del tipo de sus argumentos. Esto es conocido como dispatch múltiple.


=== Declaraciones de Tipo

El operador +::+ asocia _anotaciones de tipo_ con expresiones y variables:
(((TypeError)))((("error", "Core", "TypeError", see="TypeError")))

[source,@julia-repl-test]
----
julia> (1 + 2) :: Float64
ERROR: TypeError: in typeassert, expected Float64, got Int64
julia> (1 + 2) :: Int64
3
----

Esto ayuda a verificar que el programa funciona de la manera esperada.

El operador +::+ también se puede agregar al lado izquierdo de una asignación o como parte de una declaración.
(((devolverfloat)))((("función", "definida por el programador", "devolverfloat", see="devolverfloat")))

[source,@julia-repl-test]
----
julia> function devolverfloat()
           x::Float64 = 100
           x
       end
devolverfloat (generic function with 1 method)
julia> x = devolverfloat()
100.0
julia> typeof(x)
Float64
----

La variable +x+ siempre es de tipo +Float64+, y su valor se convierte en un punto flotante si es necesario.

También se puede añadir una anotación de tipo al encabezado de una definición de función:
(((sinc)))((("función", "definida por el programador", "sinc", see="sinc")))

[source,@julia-setup]
----
function sinc(x)::Float64
    if x == 0
        return 1
    end
    sin(x)/(x)
end
----

El valor de retorno de +sinc+ siempre se convierte al tipo +Float64+.

En Julia, cuando se omiten los tipos, los valores pueden ser de cualquier tipo (+Any+).
(((Any)))


=== Métodos

En <<chap16>>, definimos una estructura llamada +Hora+ y en <<time>>, escribimos una función llamada +imprimirhora+:
(((Hora)))(((imprimirhora)))

[source,@julia-setup chap17a]
----
using Printf

struct Hora
    hora :: Int64
    minuto :: Int64
    segundo :: Int64
end

function imprimirhora(tiempo)
    @printf("%02d:%02d:%02d", tiempo.hora, tiempo.minuto, tiempo.segundo)
end
----

Para mejorar el rendimiento, se pueden (y deben) agregar las declaraciones de tipo a los atributos en una definición de estructura.

Para llamar a esta función, debe pasarle un objeto +Hora+ como argumento:

[source,@julia-repl-test chap17a]
----
julia> inicio = Hora(9, 45, 0)
Hora(9, 45, 0)
julia> imprimirhora(inicio)
09:45:00
----

Para agregar un _método_ a la función +imprimirhora+; con el fin de que esta solo acepte como argumento un objeto +Hora+, todo lo que hay que hacer es agregar +::+ seguido de +Hora+ al argumento +tiempo+ en la definición de función:
(((método)))

[source,@julia-setup chap17a]
----
function imprimirhora(tiempo::Hora)
    @printf("%02d:%02d:%02d", tiempo.hora, tiempo.minuto, tiempo.segundo)
end
----

Un método es una definición de función con una _especificación_: +imprimirhora+ tiene un argumento de tipo +Hora+.
(((especificación)))

Llamar a la función +imprimirhora+ con un objeto +Hora+ produce el mismo resultado que antes:

[source,@julia-repl-test chap17a]
----
julia> imprimirhora(inicio)
09:45:00
----

Se redefine el primer método sin la anotación de tipo +::+, lo cual permite un argumento de cualquier tipo:

[source,@julia-setup chap17a]
----
function imprimirhora(tiempo)
    println("No sé cómo imprimir el tiempo del argumento.")
end
----

Si se llama a la función +imprimirhora+ con un objeto diferente de +Hora+, se obtendrá:

[source,@julia-repl-test chap17a]
----
julia> imprimirhora(150)
No sé cómo imprimir el tiempo del argumento.
----

==== Ejercicio 17-1

Reescriba +horaaentero+ y +enteroahora+ (de <<prototyping_versus_planning>>) especificando el tipo de los argumentos.
(((horaaentero)))(((enteroahora)))


[source,@julia-eval chap17a]
----
function horaaentero(tiempo)
    minutos = tiempo.hora * 60 + tiempo.minuto
    segundos = minutos * 60 + tiempo.segundo
end;

function enteroahora(segundos)
    (minutos, segundo) = divrem(segundos, 60)
    hora, minuto = divrem(minutos, 60)
    Hora(hora, minuto, segundo)
end;
----

=== Ejemplos Adicionales

Aquí hay una versión de la función +incrementar+ (Ejercicio 16-5 de <<modificadores>>) reescrita especificando el tipo de los argumentos:
(((incrementar)))

[source,@julia-setup chap17a]
----
function incrementar(tiempo::Hora, segundos::Int64)
    segundos += horaaentero(tiempo)
    enteroahora(segundos)
end
----

Tenga en cuenta que ahora +incrementar+ es una función pura, no un modificador.

Así es como se llama a la función incrementar:

[source,@julia-repl-test chap17a]
----
julia> inicio = Hora(9, 45, 0)
Hora(9, 45, 0)
julia> incrementar(inicio, 1337)
Hora(10, 7, 17)
----

Si se colocan los argumentos en el orden incorrecto, se obtiene un error:
(((MethodError)))

[source,@julia-repl-test chap17a]
----
julia> incrementar(1337, inicio)
ERROR: MethodError: no method matching incrementar(::Int64, ::Hora)
----

La especificación del método es +incrementar(tiempo::Hora, segundos::Int64)+, no +incrementar(segundos::Int64, tiempo::Hora)+.

Al reescribir +estadespues+ (Ejercicio 16-2 de <<modificadores>>) para que solo acepte objetos +Hora+ se tiene:
(((estadespues)))

[source,@julia-setup chap17a]
----
function estadespues(t1::Hora, t2::Hora)
    (t1.hora, t1.minuto, t1.segundo) > (t2.hora, t2.minuto, t2.segundo)
end
----

Hace falta destacar que los argumentos opcionales permiten definir múltiples métodos. Por ejemplo, esta definición:

[source,@julia-setup]
----
function f(a=1, b=2)
    a + 2b
end
----

se traduce en los siguientes tres métodos:

[source,@julia-setup]
----
f(a, b) = a + 2b
f(a) = f(a, 2)
f() = f(1, 2)
----

Estas expresiones son definiciones válidas de métodos de Julia. Esta es una notación abreviada para definir funciones/métodos.

[[constructor]]
=== Constructores

Un _constructor_ es una función especial que se llama para crear un objeto. Los métodos por defecto del constructor +Hora+ tienen las siguientes especificaciones:
(((constructor)))

[source,julia]
----
Hora(hora, minuto, segundo)
Hora(hora::Int64, minuto::Int64, segundo::Int64)
----

También se pueden agregar métodos propios de _constructores externos_:
(((constructor externo)))((("constructor", "externo", see="constructor externo")))

[source,@julia-setup chap17a]
----
function Hora(tiempo::Hora)
    Hora(tiempo.hora, tiempo.minuto, tiempo.segundo)
end
----

Este método se llama _constructor de copia_ porque el nuevo objeto +Hora+ es una copia de su argumento.
(((constructor de copia)))((("constructor", "copia", see="constructor de copia")))

Para imponer invariantes se necesitan métodos de _constructor interno_:
(((constructor interno)))((("constructor", "interno", see="constructor interno")))

[source,@julia-setup chap17b]
----
struct Hora
    hora :: Int64
    minuto :: Int64
    segundo :: Int64
    function Hora(hora::Int64=0, minuto::Int64=0, segundo::Int64=0)
        @assert(0 ≤ minuto < 60, "Minuto no está entre 0 y 60.")
        @assert(0 ≤ segundo < 60, "Segundo no está entre 0 y 60.")
        new(hora, minuto, segundo)
    end
end
----

La estructura +Hora+ tiene ahora 4 métodos de constructor interno:

[source,julia]
----
Hora()
Hora(hora::Int64)
Hora(hora::Int64, minuto::Int64)
Hora(hora::Int64, minuto::Int64, segundo::Int64)
----

Un método de constructor interno siempre se define dentro del bloque de una declaración de tipo y tiene acceso a una función especial llamada +new+ que crea objetos del tipo recién declarado.

[WARNING]
====
Si se define algún constructor interno, el constructor por defecto ya no está disponible. Se tienen que escribir explícitamente todos los constructores internos necesarios.
====

También existe un método sin argumentos de la función local +new+:
(((new)))((("función", "Base", "new", see="new")))

[source,@julia-setup chap17c]
----
mutable struct Hora
    hora :: Int64
    minuto :: Int64
    segundo :: Int64
    function Hora(hora::Int64=0, minuto::Int64=0, segundo::Int64=0)
        @assert(0 ≤ minuto < 60, "Minuto está entre 0 y 60.")
        @assert(0 ≤ segundo < 60, "Segundo está entre 0 y 60.")
        tiempo = new()
        tiempo.hora = hora
        tiempo.minuto = minuto
        tiempo.segundo = segundo
        tiempo
    end
end
----

Esto permite construir estructuras de datos recursivas, es decir, una estructura donde uno de los atributos es la estructura misma. En este caso, la estructura debe ser mutable ya que sus atributos se modifican después de la creación de instancias.
(((estructuras de datos recursivas)))


=== +show+

+show+ es una función especial que devuelve la representación de cadena de un objeto. A continuación se muestra el método +show+ para objetos +Hora+:
(((show)))

[source,@julia-setup chap17b]
----
using Printf

function Base.show(io::IO, tiempo::Hora)
    @printf(io, "%02d:%02d:%02d", tiempo.hora, tiempo.minuto, tiempo.segundo)
end
----

Esta función guarda como cadena de texto una hora dada en el archivo al que io hace referencia.

El prefijo +Base+ es necesario si se quiere agregar un nuevo método a la función +Base.show+.

Cuando se imprime un objeto, Julia llama a la función +show+ (esto ocurre siempre, y como agregamos un nuevo método a la función +Base.show+, entonces se muestra Hora con el formato que queremos):

[source,@julia-repl-test chap17b]
----
julia> tiempo = Hora(9, 45, 0)
09:45:00
----

Al escribir un nuevo tipo compuesto, casi siempre es preferible empezar escribiendo un constructor externo, puesto que facilita la creación de instancias de objetos y +show+, que es útil para la depuración.

==== Ejercicio 17-2

Escriba un método de constructor externo para la clase +Punto+ que tome +x+ e +y+ como parámetros opcionales y los asigne a los atributos correspondientes.
(((Punto)))


[source,@julia-eval chap17b]
----
function horaaentero(tiempo::Hora)
    minutos = tiempo.hora * 60 + tiempo.minuto
    segundos = minutos * 60 + tiempo.segundo
end;

function enteroahora(segundos::Int64)
    (minutos, segundo) = divrem(segundos, 60)
    hora, minuto = divrem(minutos, 60)
    Hora(hora, minuto, segundo)
end;

function incrementar(tiempo::Hora, segundos::Int64)
    segundos += horaaentero(tiempo)
    enteroahora(segundos)
end;
----

=== Sobrecarga de Operadores

Es posible cambiar la definición de los operadores cuando se aplican a tipos definidos por el usuario. Esto se hace definiendo métodos del operador. Por ejemplo, si se define un método llamado +pass:[+]+ con dos argumentos +Hora+, se puede usar el operador +pass:[+]+ en los objetos +Hora+.

Así es como se vería la definición:

[source,@julia-setup chap17b]
----
import Base.+

function +(t1::Hora, t2::Hora)
    segundos = horaaentero(t1) + horaaentero(t2)
    enteroahora(segundos)
end
----

La sentencia import agrega el operador +pass:[+]+ al ámbito local (local scope) para que se puedan agregar métodos.

A continuación se muestra cómo usar este operador para objetos Hora:

[source,@julia-repl-test chap17b]
----
julia> inicio = Hora(9, 45)
09:45:00
julia> duracion = Hora(1, 35, 0)
01:35:00
julia> inicio + duracion
11:20:00
----

Al aplicar el operador +pass:[+]+ a objetos +Hora+, Julia invoca el método recién agregado. Cuando REPL muestra el resultado, Julia invoca a +show+. ¡Hay muchas cosas teniendo lugar pero que no se observan!

Ampliar el comportamiento de los operadores de modo que funcionen con tipos definidos por el usuario/programador se denomina _sobrecarga del operador_.
(((sobrecarga del operador)))


=== Dispatch Múltiple 

En la sección anterior se sumaron dos objetos +Hora+. Imagine que ahora se quiere sumar un número entero a un objeto +Hora+:

[source,@julia-setup chap17b]
----
function +(tiempo::Hora, segundos::Int64)
    incrementar(tiempo, segundos)
end
----

He aquí un ejemplo que usa el operador +pass:[+]+ con un objeto +Hora+ y un entero:

[source,@julia-repl-test chap17b]
----
julia> inicio = Hora(9, 45)
09:45:00
julia> inicio + 1337
10:07:17
----

La suma es un operador conmutativo, por lo que se debe agregar otro método.

[source,@julia-setup chap17b]
----
function +(segundos::Int64, tiempo::Hora)
  tiempo + segundos
end
----

Y se obtiene el mismo resultado:

[source,@julia-repl-test chap17b]
----
julia> 1337 + inicio
10:07:17
----

La elección del método a ejecutar cuando se aplica una función se llama _dispatch_. Julia permite que el proceso de dispatch elija a cuál de los métodos de una función llamar en función del número y tipo de los argumentos dados. El uso de todos los argumentos de una función para elegir el método que se debe invocar se conoce como _dispatch múltiple_.
(((dispatch)))(((dispatch múltiple)))

==== Ejercicio 17-3

Escriba los siguientes métodos +pass:[+]+ para objetos Punto:

* Si ambos operandos son objetos Punto, el método debería devolver un nuevo objeto Punto cuya coordenada +x+ sea la suma de las coordenadas +x+ de los operandos. De manera análoga, haga lo mismo para la coordenada +y+.

* Si el primer o el segundo operando es una tupla, el método debe agregar el primer elemento de la tupla a la coordenada +x+ y el segundo elemento a la coordenada +y+, y devolver un nuevo objeto Punto con el resultado.


=== Programación Genérica

El dispatch múltiple es útil cuando es necesario, pero (afortunadamente) no siempre lo es. A menudo puede evitarse escribiendo funciones que funcionen correctamente para argumentos de diferentes tipos.

Muchas de las funciones que se han visto para cadenas también funcionan para otros tipos de secuencia. Por ejemplo, en <<dictionary_collection_counters>> se usa +histograma+ para contar la cantidad de veces que cada letra aparece en una palabra.
(((histograma)))

[source,@julia-setup chap17]
----
function histograma(s)
    d = Dict()
    for c in s
        if c ∉ keys(d)
            d[c] = 1
        else
            d[c] += 1
        end
    end
    d
end
----

Esta función también funciona para listas, tuplas e incluso diccionarios, siempre y cuando los elementos de +s+ sean hashables, ya que así pueden usarse como claves de +d+.

[source,@julia-repl-test chap17]
----
julia> t = ("spam", "huevo", "spam", "spam", "tocino", "spam")
("spam", "huevo", "spam", "spam", "tocino", "spam")
julia> histograma(t)
Dict{Any,Any} with 3 entries:
  "spam"   => 4
  "huevo"  => 1
  "tocino" => 1
----

Las funciones que pueden tomar parámetros de diferentes tipos se llaman _polimórficas_. El polimorfismo puede facilitar la reutilización del código.
(((polimórfica)))

Por ejemplo, la función integrada +sum+, que suma los elementos de una secuencia, funciona siempre que los elementos de la secuencia permitan la suma.
(((sum)))

Como se añadió el método +pass:[+]+ para los objetos +Hora+, entonces se puede usar +sum+ para +Hora+:

[source,@julia-repl-test chap17b]
----
julia> t1 = Hora(1, 7, 2)
01:07:02
julia> t2 = Hora(1, 5, 8)
01:05:08
julia> t3 = Hora(1, 5, 0)
01:05:00
julia> sum((t1, t2, t3))
03:17:10
----

Si todas las operaciones realizadas dentro de la función se pueden aplicar al tipo, la función se puede aplicar al tipo.

El mejor tipo de polimorfismo es el que no se busca: cuando usted descubre que una función que había escrito se puede aplicar a un tipo para el que nunca la había planeado.
(((polimorfismo)))


=== Interfaz e implementación

Uno de los objetivos del dispatch múltiple es hacer que el software sea más fácil de mantener, lo que significa poder mantener el programa funcionando cuando otras partes del sistema cambian y modificar el programa para cumplir con los nuevos requisitos.

Una técnica de diseño que ayuda a lograr ese objetivo es mantener las interfaces separadas de las implementaciones. Esto significa que los métodos que tienen un argumento con anotación de tipo no deberían depender de cómo se representan los atributos de ese tipo.
(((interfaz)))(((implementación)))

Por ejemplo, en este capítulo se desarrolla una estructura que representa una hora del día. Los métodos que tienen un argumento con anotación de este tipo incluyen +horaaentero+, +estadespues+ y +pass:[+]+.

Se pueden implementar esos métodos de varias maneras. Los detalles de la implementación dependen de cómo se represente +Hora+. En este capítulo, los atributos de un objeto +Hora+ son +hora+, +minuto+ y +segundo+.

Otra opción sería reemplazar estos atributos con un solo entero que represente el número de segundos desde la medianoche. Esta implementación haría que algunas funciones, como +estadespues+, sean más fáciles de escribir, pero hace que otras sean más difíciles.

Después de implementar un tipo, puede descubrir una mejor implementación. Si otras partes del programa están usando su tipo, cambiar la interfaz puede llevar mucho tiempo y ser propenso a errores. No obstante, si hizo un buen diseñó de interfaz, puede cambiar la implementación sin cambiar la interfaz, lo que significa que otras partes del programa no tienen que cambiar.


=== Depuración

Llamar a una función con los argumentos correctos puede ser difícil cuando se especifica más de un método para la función. Julia permite examinar las especificaciones de los métodos de una función.

Para saber qué métodos están disponibles para una función determinada, puede usar la función +methods+:
(((métodos)))(((depuración)))

[source,jlcon]
----
julia> methods(imprimirhora)
# 2 methods for generic function "imprimirhora":
[1] printtime(time::MyTime) in Main at REPL[3]:2
[2] printtime(time) in Main at REPL[4]:2
----

En este ejemplo, la función +imprimirhora+ tiene 2 métodos: uno con un argumento +Hora+ y otro con un argumento +Any+.


=== Glosario

anotación de tipo::
El operador +::+ seguido de un tipo que indica que una expresión o una variable es de ese tipo.
(((anotación de tipo)))

método::
Una definición de un posible comportamiento de una función.
(((método)))

dispatch::
La elección de qué método ejecutar cuando se ejecuta una función.
(((dispatch)))

especificación::
El número y tipo de argumentos de un método que permite al dispatch seleccionar el método más específico de una función durante la llamada a función.
(((especificación)))

constructor externo::
Constructor definido fuera de la definición de tipo para definir métodos útiles para crear un objeto.
(((constructor externo)))

constructor interno::
Constructor definido dentro de la definición de tipo para imponer invariantes o para construir objetos recursivos.
(((constructor interno)))

constructor por defecto::
Constructor interno que está disponible cuando el usuario no define constructores internos.
(((constructor por defecto)))

constructor de copia::
Método de constructor externo de un tipo, que tiene como único argumento un objeto del tipo. Crea un nuevo objeto que es una copia del argumento.
(((constructor de copia)))

sobrecarga de operadores::
Ampliar el comportamiento de los operadores como pass:[+]+ de modo que trabajen con tipos definidos por el usuario.
(((sobrecarga de operadores)))

dispatch múltiple::
Dispatch basado en todos los argumentos de una función.
(((dispatch múltiple)))

programación genérica::
Escribir código que pueda funcionar con más de un tipo.
(((programación genérica)))


=== Ejercicios

[[ex17-1]]
==== Ejercicio 17-4

Cambie los atributos de +Hora+ para que sea un solo número entero que represente los segundos desde la medianoche. Luego modifique los métodos definidos en este capítulo para que funcionen con la nueva implementación.

[[ex17-2]]
==== Ejercicio 17-5

Escriba una definición para un tipo llamado +Canguro+, con un atributo llamado +contenidodemarsupio+ de tipo +Arreglo+ y los siguientes métodos:
(((Canguro)))((("tipo", "definida por el programador", "Canguro", see="Canguro")))

* Un constructor que inicialice +contenidodemarsupio+ a un arreglo vacío.

* Un método llamado +ponerenmarsupio+ que tome un objeto +Canguro+ y un objeto de cualquier tipo y lo agregue a +contenidodemarsupio+.
(((ponerenmarsupio)))((("función", "definida por el programador", "ponerenmarsupio", see="ponerenmarsupio")))

* Un método +show+ que devuelva una representación de cadena del objeto +Canguro+ y el contenido del marsupio.
(((show)))

Pruebe su código creando dos objetos +Canguro+, asignándolos a variables llamadas +cangu+ y +ro+, y luego agregando +ro+ al contenido del marsupio de +cangu+.
