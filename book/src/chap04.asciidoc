[[chap04]]
== Estudio de Caso: Diseño de Interfaz

Este capítulo presenta un segundo estudio de caso, que muestra el proceso de diseñar funciones que trabajen en conjunto.

Se presentan gráficos turtle, que es una forma de crear dibujos a través de la programación. Los gráficos turtle no están incluidos en la Biblioteca Estándar, por lo que se debe agregar el módulo IntroAJulia a su configuración de Julia.

Los ejemplos de este capítulo se pueden ejecutar en un notebook gráfico en JuliaBox, el cual combina código, texto formateado, matemáticas y multimedia en un solo documento (vea <<juliabox>>).
(((JuliaBox, notebook gráfico)))


=== Turtles

Un _modulo_ es un archivo que contiene una colección de funciones relacionadas. Julia proporciona algunos módulos en su Biblioteca Estándar. Además, es posible agregar más funciones a una gran cantidad de _paquetes_ (https://juliaobserver.com).
(((modulo)))(((paquete)))

Los paquetes se pueden instalar en REPL ingresando al modo Pkg REPL con la tecla +]+.
(((pass:[&#93;])))(((IntroAJulia)))((("modulo", "IntroAJulia", see="IntroAJulia")))

[source,jlcon]
----
(v1.2) pkg> add https://github.com/JuliaIntro/IntroAJulia.jl
----

Esto puede demorar un poco.

Antes de que podamos usar las funciones de un módulo, tenemos que importarlo con una sentencia +using+:
(((using)))((("palabra reservada", "using", see="using")))(((sentencia using)))((("sentencia", "using", see="sentencia using")))

[source,@julia-repl-test]
----
julia> using IntroAJulia

julia> 🐢 = Turtle()
Luxor.Turtle(0.0, 0.0, true, 0.0, (0.0, 0.0, 0.0))
----

El módulo +IntroAJulia+ proporciona una función llamada +Turtle+ (tortuga en español) que crea un objeto +Luxor.Turtle+, el cual es asignado a una variable llamada +🐢+ (*+\:turtle: TAB+*).
(((Turtle)))((("tipo", "Luxor", "Turtle", see="Turtle")))

Una vez que crea una tortuga, puede llamar a una función para "moverla", y así hacer un dibujo con ella. Por ejemplo, para mover la tortuga hacia adelante (forward en inglés):
(((forward)))((("función", "IntroAJulia", "forward", see="forward")))

[source,julia]
----
@svg begin
    forward(🐢, 100)
end
----

[[fig04-1]]
.Haciendo avanzar a la tortuga
image::images/fig41.svg[]


La palabra reservada +@svg+ ejecuta una macro que dibuja una imagen SVG. Las macros son una característica importante pero avanzada de Julia.
(((@svg)))((("macro", "Luxor", "@svg", see="@svg")))(((macro)))(((SVG picture)))

Los argumentos de +forward+ son la tortuga y una distancia en píxeles, por lo que el tamaño real depende de su pantalla.

También es posible hacer girar a la tortuga con la función +turn+. Los argumentos de esta función son la tortuga y un ángulo en grados.
(((turn)))((("function", "IntroAJulia", "turn", see="turn")))

Además, cada tortuga está sosteniendo un lápiz, que puede estar hacia arriba o hacia abajo; si el lápiz está hacia abajo, la tortuga deja un rastro cuando se mueve. <<fig04-1>> muestra el rastro dejado por la tortuga. Las funciones +penup+ y +pendown+ significan "lápiz hacia arriba" y "lápiz hacia abajo".
(((penup)))((("función", "IntroAJulia", "penup", see="penup")))(((pendown)))((("función", "IntroAJulia", "pendown", see="pendown")))

Para dibujar un ángulo recto, modifique la llamada a la macro:

[source,julia]
----
🐢 = Turtle()
@svg begin
    forward(🐢, 100)
    turn(🐢, -90)
    forward(🐢, 100)
end
----

==== Ejercicio 4-1

Ahora modifique la macro para que dibuje un cuadrado. ¡No sigas hasta haberlo terminado!


[[simple_repetition]]
=== Repetición Simple

Es probable que haya escrito algo como esto:
(((repetition)))

[source,julia]
----
🐢 = Turtle()
@svg begin
    forward(🐢, 100)
    turn(🐢, -90)
    forward(🐢, 100)
    turn(🐢, -90)
    forward(🐢, 100)
    turn(🐢, -90)
    forward(🐢, 100)
end
----

Se puede hacer lo mismo de manera más concisa con una sentencia +for+:
(((sentencia for)))((("sentencia", "for", see="sentencia for")))(((for)))((("palabra reservada", "for", see="for")))(((in)))((("palabra reservada", "in", see="in")))

[source,@julia-repl-test]
----
julia> for i in 1:4
          println("¡Hola!")
       end
¡Hola!
¡Hola!
¡Hola!
¡Hola!
----

Este es el uso más simple de la sentencia +for+, aunque se verán más usos después. Ésto debería ser suficiente para reescribir su programa que dibuja un cuadrado. No continúe hasta que lo haga.

Aquí hay una sentencia +for+ que dibuja un cuadrado:

[source,julia]
----
🐢 = Turtle()
@svg begin
    for i in 1:4
        forward(🐢, 100)
        turn(🐢, -90)
    end
end
----

La sintaxis de una sentencia +for+ es similar a la definición de una función. Tiene un encabezado y un cuerpo que termina con la palabra reservada +end+. El cuerpo puede contener el número de sentencias que desee.
(((end)))

Una sentencia +for+ también es llamada _bucle_ porque el flujo de ejecución recorre el cuerpo y luego vuelve a la parte superior. En este caso, ejecuta el cuerpo cuatro veces.
(((bucle)))

Esta versión es en realidad un poco diferente del código anterior que dibujaba un cuadrado porque hace otro giro después de dibujar el último lado del cuadrado. El giro adicional lleva más tiempo, pero simplifica el código si se hace lo mismo en cada iteración del ciclo. Esta versión también tiene el efecto de dejar a la tortuga nuevamente en la posición inicial, mirando hacia la dirección inicial.

=== Ejercicios

Los siguientes ejercicios usan tortugas. Son divertidos, pero también tienen un trasfondo. Mientras trabaja en ellos, piense cuál es ese trasfondo.

[TIP]
====
Las siguientes secciones muestran las soluciones para estos ejercicios, así que no mire hasta que haya terminado (o al menos lo haya intentado).
====

[[ex04-1]]
==== Ejercicio 4-2

Escriba una función llamada +cuadrado+ que tome como parámetro a un turtle +t+. Debería usar este turtle para dibujar un cuadrado.

[[ex04-2]]
==== Ejercicio 4-3

Escriba una llamada a función que pase +t+ como argumento a +cuadrado+, y luego vuelva a ejecutar la macro.

[[ex04-3]]
==== Ejercicio 4-4

Agregue otro parámetro, llamado +lon+, a cuadrado. Modifique el cuerpo para que la longitud de los lados sea +lon+, y luego modifique la llamada a función agregando este segundo argumento. Ejecute la macro nuevamente. Pruebe con un rango de valores para +lon+.

[[ex04-4]]
==== Ejercicio 4-5

Haga una copia de +cuadrado+ y cambie su nombre a +polígono+. Agregue otro parámetro llamado +n+ y modifique el cuerpo para que dibuje un polígono regular de latexmath:[n]-lados.

[TIP]
====
Los ángulos exteriores de un polígono regular de latexmath:[n]-lados son latexmath:[\frac{360}{n}] grados.
====

[[ex04-5]]
==== Ejercicio 4-6

Escriba una función llamada +círculo+ que tome un turtle +t+ y un radio +r+ como parámetros, y que dibuje un círculo aproximado llamando a +polígono+ con una longitud y número de lados apropiados. Pruebe su función con un rango de valores de +r+.

[TIP]
====
Calcule la circunferencia del círculo y asegúrese de que +len * n == circunferencia+.
====

[[ex04-6]]
==== Ejercicio 4-7

Haga una versión más general de +circulo+ llamada +arco+ que tome un parámetro adicional +angulo+ y que determine qué fracción de un círculo dibujar. +angulo+ está en grados, entonces cuando +angulo= 360+, +arco+ debería dibujar un círculo completo.


=== Encapsulación

El primer ejercicio le pide que coloque el código que permite dibujar un cuadrado en una definición de función, y que luego llame a la función, pasando a turtle como parámetro. Aquí hay una solución:
(((cuadrado)))((("función", "definida por el programador", "cuadrado", see="cuadrado")))

[source,julia]
----
function cuadrado(t)
    for i in 1:4
        forward(t, 100)
        turn(t, -90)
    end
end
🐢 = Turtle()
@svg begin
    cuadrado(🐢)
end
----

Las sentencias más internas, +forward+ y +turn+ tienen doble sangría para mostrar que están dentro del bucle +for+, que a su vez está dentro de la definición de función.
(((indentación)))

Dentro de la función, +t+ se refiere a la misma tortuga +🐢+, entonces +turn(t, -90)+ tiene el mismo efecto que +turn(🐢, -90)+. En ese caso, ¿por qué no llamar al parámetro +🐢+? La razón es que +t+ puede ser cualquier tortuga, no solo +🐢+, por lo que podríamos crear una segunda tortuga y pasarla como argumento a +cuadrado+:

[source,julia]
----
🐫 = Turtle()
@svg begin
    cuadrado(🐫)
end
----

Colocar una porción de código en una función se denomina _encapsulación_. Uno de los beneficios de la encapsulación es que al ponerle un nombre al código, esto sirve como una especie de documentación. Otra ventaja es que si reutiliza el código, ¡es más conciso llamar a una función dos veces que copiar y pegar el cuerpo!
(((encapsulación)))

=== Generalización

El siguiente paso es agregar un parámetro +lon+ a +cuadrado+. Aquí hay una solución:
(((square)))

[source,julia]
----
function cuadrado(t, lon)
    for i in 1:4
        forward(t, lon)
        turn(t, -90)
    end
end
🐢 = Turtle()
@svg begin
    cuadrado(🐢, 100)
end
----

Agregar un parámetro a una función se llama _generalización_ porque hace que la función sea más general: en la versión anterior, el cuadrado siempre tenía el mismo tamaño; en esta versión puede ser de cualquier tamaño.
(((generalización)))

El siguiente paso también es una generalización. En vez de dibujar cuadrados, +poligono+ dibuja polígonos regulares con cualquier número de lados. Aquí hay una solución:
(((polígono)))((("función", "definida por el programador", "polígono", see="polígono")))

[source,julia]
----
function poligono(t, n, lon)
    angulo = 360 / n
    for i in 1:n
        forward(t, lon)
        turn(t, -angulo)
    end
end
🐢 = Turtle()
@svg begin
    poligono(🐢, 7, 70)
end
----

Este ejemplo dibuja un polígono de 7 lados, con una longitud de 70 por lado.


=== Diseño de Interfaz

El siguiente paso es escribir +circulo+, que toma un radio +r+ como parámetro. Aquí hay una solución simple que usa +poligono+ para dibujar un polígono de 50 lados:
(((círculo)))((("función", "definida por el programador", "círculo", see="círculo")))

[source,julia]
----
function circulo(t, r)
    circunferencia = 2 * π * r
    n = 50
    lon = circunferencia / n
    poligono(t, n, lon)
end
----

La primera línea calcula la circunferencia de un círculo con radio latexmath:[r] usando la fórmula latexmath:[2 \pi r]. +n+ es el número de segmentos de línea de nuestra aproximación a un círculo, y +lon+ es la longitud de cada segmento. Por lo tanto, +polígono+ dibuja un polígono de 50 lados que se aproxima a un círculo de radio +r+.

Una limitante de esta solución es que +n+ es constante, lo que significa que para círculos muy grandes, los segmentos de línea son demasiado largos, y para círculos pequeños, perdemos tiempo dibujando segmentos muy pequeños. Una solución sería generalizar la función tomando +n+ como parámetro. Esto le daría al usuario (quien llama a círculo) más control pero la interfaz sería menos pulcra.

La _interfaz_ de una función es un resumen de cómo se usa: ¿cuáles son los parámetros? ¿Qué hace la función? ¿Y cuál es el valor de retorno? Una interfaz es "pulcra" si le permite al usuario que la llama hacer lo que quiera sin tener que lidiar con detalles innecesarios.
(((interfaz)))

En este ejemplo, +r+ pertenece a la interfaz porque especifica el círculo a dibujar. +n+ es menos apropiado porque se refiere a los detalles de cómo se debe representar el círculo.

En lugar de saturar la interfaz, es mejor elegir un valor apropiado de +n+ dependiendo de la +circunferencia+:

[source,julia]
----
function circulo(t, r)
    circunferencia = 2 * π * r
    n = trunc(circunferencia / 3) + 3
    len = circunferencia / n
    poligono(t, n, len)
end
----

Ahora, el número de segmentos es un número entero cercano a +circunferencia/3+, por lo que la longitud de cada segmento es aproximadamente 3, que es lo suficientemente pequeño como para que los círculos se vean bien, pero lo suficientemente grandes como para ser eficientes y aceptables para cualquier círculo.

Agregar 3 a +n+ garantiza que el polígono tenga al menos 3 lados.


[[refactoring]]
=== Refactorización

Cuando se escribió +circulo+, se pudo reutilizar +poligono+ ya que un polígono de muchos lados es una buena aproximación de un círculo. Pero +arco+ no es tan versátil; no se puede usar +poligono+ o +circulo+ para dibujar un arco.

Una alternativa es comenzar con una copia de +poligono+ y transformarla en +arco+. El resultado podría verse así:
(((arco)))((("función", "programmer-defined", "arco", see="arco")))

[source,julia]
----
function arco(t, r, angulo)
    arco_lon = 2 * π * r * angulo / 360
    n = trunc(arco_lon / 3) + 1
    paso_lon = arco_lon / n
    paso_angulo = angulo / n
    for i in 1:n
        forward(t, paso_lon)
        turn(t, -paso_angulo)
    end
end
----

La segunda mitad de esta función se parece a +poligono+, pero no se puede reutilizar +poligono+ sin cambiar la interfaz. Se podría generalizar +poligono+ para tomar un +angulo+ como tercer argumento, ¡pero entonces +poligono+ ya no sería un nombre apropiado! En su lugar, se puede llamar a esta función más general +polilinea+:
(((polyline)))((("function", "definida por el programador", "polyline", see="polyline")))

[source,julia]
----
function polilinea(t, n, lon, angulo)
    for i in 1:n
        forward(t, lon)
        turn(t, -angulo)
    end
end
----

Ahora se puede reescribir +poligono+ y +arco+ usando +polilinea+:
(((polygon)))(((arc)))

[source,julia]
----
function poligono(t, n, lon)
    angulo = 360 / n
    polilinea(t, n, lon, angulo)
end

function arco(t, r, angulo)
    arco_lon = 2 * π * r * angulo / 360
    n = trunc(arco_lon / 3) + 1
    paso_lon = arco_lon / n
    paso_angulo = angulo / n
    polilinea(t, n, paso_lon, paso_angulo)
end
----

Finalmente, se puede reescribir +circulo+ usando +arco+:
(((circle)))

[source,julia]
----
function circle(t, r)
    arc(t, r, 360)
end
----

Este proceso, que reorganiza un programa para mejorar las interfaces y facilitar la reutilización del código, se denomina _refactorización_. En este caso, se observa que había un código similar en +arco+ y +poligono+, por lo que lo "factorizamos" en +polilinea+.
(((refactorización))

Si se hubiese planeado con anticipación, se podría haber escrito +polilinea+ primero y haber evitado la refactorización, pero a menudo no se sabe lo suficiente al comienzo de un proyecto para diseñar todas las interfaces. Una vez que se comienza a programar, se comprende mejor el problema. A veces, refactorizar es una señal de que se ha aprendido algo.


=== Un Plan de Desarrollo

Un _plan de desarrollo de programa_ es un proceso para escribir programas. El proceso que se utiliza en este estudio de caso es "encapsulado y generalización". Los pasos de este proceso son:
(((plan de desarrollo de programa)))

. Comience escribiendo un pequeño programa sin definiciones de funciones.

. Una vez que el programa funcione, identifique una porción de código que tenga un objetivo específico, encapsule esta porción en una función y asígnele un nombre.

. Generalice la función agregando los parámetros apropiados.

. Repita los pasos 1–3 hasta que tenga un conjunto de funciones. De ser posible, copie y pegue código para evitar volver a escribir (y volver a depurar).

. Busque oportunidades para mejorar el programa refactorizando. Por ejemplo, si tiene un código similar en varios lugares, considere factorizarlo en una función general apropiada.

Este proceso tiene algunos inconvenientes, se explorarán alternativas más adelante, pero puede ser útil si no sabe de antemano cómo dividir el programa en funciones. Este enfoque permite diseñar conforme se avanza.


=== Docstring

Un _docstring_ es una cadena que va antes de una función y que explica la interfaz ("doc" es la abreviatura de "documentación"). Aquí hay un ejemplo:
(((docstring)))(((comillas triples)))((("pass:[&quot;&quot;&quot;]", see="comillas triples")))

[source,julia]
----
"""
polilinea(t, n, lon, angulo)

Dibuja n segmentos de línea de la longitud dada y con
ángulo entre ellos (en grados) dado. t es una tortuga.
"""
function polilinea(t, n, lon, angulo)
    for i in 1:n
        forward(t, lon)
        turn(t, -angulo)
    end
end
----

Se puede acceder a la documentación en REPL o en un notebook escribiendo ? seguido del nombre de una función o macro, y presionando +ENTER+:
(((help)))((("?", see="help")))

----
help?> polilinea
search:

  polilinea(t, n, lon, angulo)

  Dibuja n segmentos de línea de la longitud dada y con ángulo entre ellos (en grados) dado. t es una tortuga.
----

Los docstring generalmente son cadenas de comillas triples, también conocidas como cadenas de líneas múltiples ya que las comillas triples permiten que la cadena abarque más de una línea.

Un docstring contiene la información esencial que alguien necesitaría para usar esta función. Explica de manera concisa lo que hace la función (sin entrar en detalles sobre cómo lo hace). Explica qué efecto tiene cada parámetro en el comportamiento de la función y de qué tipo debe ser cada parámetro (si no es obvio).

[TIP]
====
Escribir este tipo de documentación es una parte importante del diseño de la interfaz. Una interfaz bien diseñada debe ser simple de explicar; si tiene dificultades para explicar una de sus funciones, tal vez la interfaz podría mejorarse.
====


=== Depuración

Una interfaz es como un contrato entre una función y el usuario. El usuario acepta proporcionar ciertos parámetros y la función acepta hacer cierto trabajo.
(((depuración)))

Por ejemplo, +polilinea+ requiere cuatro argumentos: +t+ tiene que ser una tortuga; +n+ tiene que ser un número entero; +lon+ debería ser un número positivo; y +angulo+ tiene que ser un número, en grados.

Estos requisitos se llaman _precondiciones_ porque se supone que son verdaderos antes de que la función comience a ejecutarse. Por el contrario, las condiciones al final de la función son _postcondiciones_. Las postcondiciones incluyen el efecto deseado de la función (como dibujar segmentos de línea) y cualquier efecto secundario (como mover la tortuga o hacer otros cambios).
(((precondición)))(((postcondición)))

Las condiciones previas son responsabilidad del usuario. Si el usuario viola una precondición (¡debidamente documentada!) y la función no funciona correctamente, el error está en el usuario, no en la función.

Si se cumplen las precondiciones pero no las postcondiciones, el error está en la función. Si sus pre y postcondiciones son claras, pueden ayudar con la depuración.


=== Glosario

modulo::
Un archivo que contiene una colección de funciones relacionadas y otras definiciones.
(((modulo)))

paquete::
Una biblioteca externa con más funcionalidades.
(((paquete)))

sentencia using::
Una sentencia que lee un archivo de módulo y crea un objeto de módulo.
(((sentencia using)))

bucle::
Una parte de un programa que puede ejecutarse repetidamente.
(((bucle)))

encapsulado::
El proceso de transformar una secuencia de sentencias en una definición de función.
(((encapsulado)))

generalización::
El proceso de reemplazar algo innecesariamente específico (como un número) con algo más general (como una variable o parámetro).
(((generalización)))

interfaz::
Una descripción de cómo usar una función, incluido el nombre y las descripciones de los argumentos y el valor de retorno.
(((interfaz)))

refactorización::
El proceso de modificar un programa para mejorar las interfaces de las funciones y otras cualidades del código.
(((refactorización)))

plan de desarrollo de programa::
Un proceso para escribir programas.
(((plan de desarrollo de programa)))

docstring::
Una cadena que aparece en la parte superior de una definición de función para documentar la interfaz de la función.
(((docstring)))

precondición::
Un requisito que debe cumplir el usuario antes de que comience una función.
(((precondición)))

postcondición::
Un requisito que debe cumplir la función antes de que finalice.
(((postcondición)))


=== Ejercicios

[[ex04-7]]
==== Ejercicio 4-8

Copie y pegue el código de este capítulo en un notebook.

. Dibuje un diagrama de pila que muestre el estado del programa mientras ejecuta +circulo(🐢,radio)+. Puede hacer la aritmética a mano o agregar sentencias de impresión al código.

. La versión de +arco+ en <<refactoring>> no es muy precisa ya que la aproximación lineal del círculo siempre queda por afuera del círculo verdadero. Como resultado, la tortuga termina a unos pocos píxeles del destino correcto. La siguiente solución muestra una forma de reducir el efecto de este error. Lea el código y vea si tiene sentido. Si dibuja un diagrama, es posible que entienda mejor cómo funciona.
(((arco)))

[source,julia]
----
"""
arco(t, r, angulo)

Dibuja un arco con el radio y el ángulo dados:

    t: tortuga
    r: radio
    angulo: ángulo subtendido por el arco, en grados
"""
function arco(t, r, angulo)
    arco_lon = 2 * π * r * abs(angulo) / 360
    n = trunc(arco_lon / 4) + 3
    paso_lon = arco_lon / n
    paso_angulo = angulo / n

    # haciendo un ligero giro a la izquierda antes de comenzar se reduce
    # el error causado por la aproximación lineal del arco
    turn(t, -paso_angulo/2)
    polilinea(t, n, paso_lon, paso_angulo)
    turn(t, paso_angulo/2)
end
----

[[ex04-8]]
==== Ejercicio 4-9

Escriba un conjunto de funciones generales que permitan dibujar flores como en <<fig04-2>>.

[[fig04-2]]
.Flores con Turtle
image::images/fig42.svg[]

[[ex04-9]]
==== Ejercicio 4-10

Escriba un conjunto de funciones generales que puedan dibujar formas como en <<fig04-3>>.

[[fig04-3]]
.Polígonos con Turtle
image::images/fig43.svg[]

[[ex04-10]]
==== Ejercicio 4-11

Las letras del alfabeto se pueden construir a partir de un número pequeño de elementos básicos, como líneas verticales y horizontales, y algunas curvas. Diseñe un alfabeto que se pueda dibujar con un número mínimo de elementos básicos y luego escriba funciones que dibujen las letras.

Debería escribir una función para cada letra, con nombres +dibujar_a+, +dibujar_b+, etc., y colocar sus funciones en un archivo llamado _letras.jl_.

[[ex04-11]]
==== Ejercicio 4-12

Lea sobre espirales en https://es.wikipedia.org/wiki/Espiral; luego escriba un programa que dibuje una espiral de Arquímedes como en <<fig04-4>>.

[[fig04-4]]
.Espiral de Arquímedes
image::images/fig44.svg[]
