[[chap10]]
== Arreglos

Este capítulo presenta uno de los tipos más útiles de Julia: los arreglos. También se tratarán objetos y lo que puede suceder cuando se tiene más de un nombre para el mismo objeto.

=== Un arreglo es una secuencia

Al igual que una cadena de texto, un _arreglo_ es una secuencia de valores. En una cadena los valores son caracteres, en un arreglo pueden ser de cualquier tipo. Los valores en un arreglo se denominan _elementos_ o, a veces, _items_.
(((arreglo)))(((elemento)))(((item)))

Hay varias formas de crear un nuevo arreglo, la más sencilla es encerrar los elementos entre corchetes (+[ ]+):
(((operador corchete)))

[source,julia]
----
[10, 20, 30, 40]
["abadejo", "falsía", "estrambote"]
----

El primer ejemplo es un arreglo de cuatro enteros. El segundo es un arreglo de tres cadenas de texto. Los elementos de un arreglo no tienen por qué ser del mismo tipo. El siguiente arreglo contiene una cadena, un número de punto flotante, un entero y otro arreglo:

[source,julia]
----
["spam", 2.0, 5, [10, 20]]
----

Se dice que un arreglo dentro de otro arreglo está _anidado_.
(((anidado)))

Un arreglo que no contiene elementos se llama arreglo vacío y se puede crear uno con corchetes vacíos, +[]+.
(((arreglo vacío)))

Como es de esperar, se pueden asignar valores de arreglos a variables:

[source,@julia-repl-test chap10]
----
julia> quesos = ["Cheddar", "Edam", "Gouda"];

julia> numeros = [42, 123];

julia> vacio = [];

julia> print(quesos, " ", numeros, " ", vacio)
["Cheddar", "Edam", "Gouda"] [42, 123] Any[]
----

La función +typeof+ se puede usar para conocer el tipo del arreglo:
(((typeof)))

[source,@julia-repl-test chap10]
----
julia> typeof(quesos)
Array{String,1}
julia> typeof(numeros)
Array{Int64,1}
julia> typeof(vacio)
Array{Any,1}
----

El tipo del arreglo se especifica entre llaves, y se compone de un tipo y un número. El número indica las dimensiones. El conjunto +vacío+ contiene valores de tipo +Any+, es decir, puede contener valores de todos los tipos.
(((Arreglo)))((("tipo", "Base", "Array", véase "Array")))(((Any)))((("tipo", "Base", "Any", véase "Any")))


=== Los arreglos son mutables

La sintaxis para acceder a los elementos de un arreglo es el mismo que para acceder a los caracteres de una cadena: el operador corchete. La expresión dentro de los corchetes especifica el índice. Recuerde que los índices comienzan en 1:
(((operador corchete)))(((índice)))

[source,@julia-repl-test chap10]
----
julia> quesos[1]
"Cheddar"
----

A diferencia de las cadenas, los arreglos son _mutables_, lo que significa que podemos cambiar sus elementos. Se puede modificar uno de sus elementos usando el operador corchetes en el lado izquierdo de una asignación:
(((mutable)))(((sentencia de asignación)))

[source,@julia-repl-test chap10]
----
julia> numeros[2] = 5
5
julia> print(numeros)
[42, 5]
----

El segundo elemento de +numeros+, que era 123, ahora es 5.

<<fig10-1>> muestra los diagramas de estado para +quesos+, +numeros+ y +vacio+.
(((diaframa de estado)))

[[fig10-1]]
.Diagrama de estado
image::images/fig101.svg[]

Los arreglos son representados mediante cuadros con elementos del arreglo en su interior. El arreglo +quesos+ hace referencia a un arreglo con tres elementos indexados +1+, +2+ y +3+. El arreglo +numeros+ contiene dos elementos. El diagrama muestra que el valor del segundo elemento de +numeros+ se ha reasignado de +123+ a +5+. Finalmente, +vacio+ hace referencia a un arreglo sin elementos.

Los índices de un arreglo funcionan de la misma manera que los índices de una cadena (pero sin los problemas generados por la codificación UTF-8):

* Cualquier expresión entera se puede usar como índice.

* Si se intenta leer o escribir un elemento que no existe, se obtiene un +BoundsError+.

* La palabra reservada +end+ indica el último índice del arreglo.
(((end)))

El operador +∈+ también funciona en arreglos:
(((in)))

[source,@julia-repl-test chap10]
----
julia> "Edam" ∈ quesos
true
julia> "Brie" in quesos
false
----


=== Recorriendo un Arreglo

La forma más común de recorrer los elementos de un arreglo es con un ciclo +for+. La sintaxis es la misma que para las cadenas:
(((recorrido)))(((sentencia for)))

[source,@julia-setup chap10]
----
for queso in quesos
    println(queso)
end
----

Esto funciona bien si solo se necesita leer los elementos del arreglo, pero si se desea escribir o actualizar los elementos es necesario utilizar índices. Una forma común de hacerlo es usando la función integrada +eachindex+:
(((eachindex)))((("función", "Base", "eachindex", véase "eachindex")))

[source,@julia-setup chap10]
----
for i in eachindex(numeros)
    numeros[i] = numeros[i] * 2
end
----

Este bucle recorre el arreglo y actualiza cada elemento. En cada iteración del ciclo, +i+ representa el índice del elemento actual. La sentencia de asignación usa +numeros[i]+ para leer el valor original del elemento y asignar el nuevo valor.

Por otra parte, +length+ devuelve el número de elementos en el arreglo.

Un ciclo +for+ sobre un arreglo vacío nunca ejecuta el cuerpo del bucle:
(((arreglo vacío)))

[source,@julia-setup]
----
for x in []
    println("Esto nunca pasa.")
end
----

Aunque un arreglo puede contener otro arreglo, este arreglo anidado cuenta como un elemento único. Por ejemplo, la longitud de este arreglo es cuatro:

[source,@julia-setup]
----
["spam", 1, ["Brie", "Roquefort", "Camembert"], [1, 2, 3]]
----


=== Porciones de arreglos

El operador porción también funciona en arreglos:
(((operador porción)))((("operador", "Base", "[:]", véase "slice operator")))((("[:]", véase "slice operator")))

[source,@julia-repl-test chap10]
----
julia> t = ['a', 'b', 'c', 'd', 'e', 'f'];

julia> print(t[1:3])
['a', 'b', 'c']
julia> print(t[3:end])
['c', 'd', 'e', 'f']
----

El operador porción +[:]+ hace una copia de todo el arreglo:
(((copia)))

[source,@julia-repl-test chap10]
----
julia> print(t[:])
['a', 'b', 'c', 'd', 'e', 'f']
----

Como los arreglos son mutables, es útil hacer una copia antes de realizar operaciones que las modifiquen.

Un operador porción en el lado izquierdo de una asignación puede actualizar varios elementos:

[source,@julia-repl-test chap10]
----
julia> t[2:3] = ['x', 'y'];

julia> print(t)
['a', 'x', 'y', 'd', 'e', 'f']
----


=== Librería de Arreglos

Julia tiene funciones integradas que operan en arreglos. Por ejemplo, +push!+ agrega un nuevo elemento al final de un arreglo:
(((push!)))((("función", "Base", "push!", véase "push!")))

[source,@julia-repl-test chap10]
----
julia> t = ['a', 'b', 'c'];

julia> push!(t, 'd');

julia> print(t)
['a', 'b', 'c', 'd']
----

+append!+ agrega elementos de un arreglo al final de otro:
(((append!)))((("función", "Base", "append!", véase "append!")))

[source,@julia-repl-test chap10]
----
julia> t1 = ['a', 'b', 'c'];

julia> t2 = ['d', 'e'];

julia> append!(t1, t2);

julia> print(t1)
['a', 'b', 'c', 'd', 'e']
----

En este ejemplo +t2+ no es modificado.

+sort!+ ordena los elementos de un arreglo de menor a mayor:
(((sort!)))((("función", "Base", "sort!", véase "sort!")))

[source,@julia-repl-test chap10]
----
julia> t = ['d', 'c', 'e', 'b', 'a'];

julia> sort!(t);

julia> print(t)
['a', 'b', 'c', 'd', 'e']
----

+sort+ devuelve una copia ordenada de los elementos de un arreglo:
(((sort)))((("función", "Base", "sort", véase "sort")))

[source,@julia-repl-test chap10]
----
julia> t1 = ['d', 'c', 'e', 'b', 'a'];

julia> t2 = sort(t1);

julia> print(t1)
['d', 'c', 'e', 'b', 'a']
julia> print(t2)
['a', 'b', 'c', 'd', 'e']
----

[NOTE]
====
Como convención en Julia, se agrega +!+ a los nombres de las funciones que modifican sus argumentos.
(((!)))
====


=== Mapear, Filtrar y Reducir

Para sumar todos los números en un arreglo se puede usar un ciclo como este:

[source,@julia-setup]
----
function sumartodo(t)
    total = 0
    for x in t
        total += x
    end
    total
end
----

+total+ se inicializa en 0. En cada iteración, con +pass:[+=]+ se añade un elemento del arreglo a la suma total. El operador +pass:[+=]+ es una forma simple de actualizar esta variable. Esta _sentencia de asignación aumentada_,
(((sentencia de asignación aumentada)))((("&#43;&#61;")))((("operador", "Base", "&#43;&#61;", véase "&#43;&#61;")))

[source,julia]
----
total += x
----

es equivalente a 

[source,julia]
----
total = total + x
----

A medida que se ejecuta el ciclo, +total+ acumula la suma de los elementos. A veces se denomina _acumulador_ a una variable utilizada de esta manera.
(((acumulador)))

Sumar los elementos de un arreglo es una operación tan común que Julia tiene una función integrada para ello, +sum+:
(((sum)))((("función", "Base", "sum", véase "sum")))

[source,@julia-repl-test]
----
julia> t = [1, 2, 3, 4];

julia> sum(t)
10
----

Una operación como esta, que combina una secuencia de elementos en un solo valor, a veces se denomina _operación de reducción_.
(((operación de reducción)))

Es común querer recorrer un arreglo mientras se construye otro. Por ejemplo, la siguiente función toma un arreglo de cadenas y devuelve un nuevo arreglo que contiene las mismas cadenas pero en mayúsculas:
(((todoenmayusculas)))((("función", "definida por el programador", "todoenmayusculas", véase "todoenmayusculas")))(((mayúscula)))

[source,@julia-setup]
----
function todoenmayusculas(t)
    res = []
    for s in t
        push!(res, uppercase(s))
    end
    res
end
----

+res+ se inicializa con un arreglo vacío, y en cada iteración se le agrega un nuevo elemento. De esta manera, +res+ es otro tipo de acumulador.

Una operación como +todoenmayusculas+ a veces se denomina _mapeo_ porque "asigna" una función (en este caso +uppercase+) a cada uno de los elementos de una secuencia.
(((map)))

Otra operación común es seleccionar solo algunos de los elementos de un arreglo y devolver una sub-arreglo. Por ejemplo, la siguiente función toma un arreglo de cadenas y devuelve un arreglo que contiene solamente las cadenas en mayúsculas:
(((solomayusculas)))((("función", "definida por el programador", "solomayusculas", véase "solomayusculas")))

[source,@julia-setup]
----
function solomayusculas(t)
    res = []
    for s in t
        if s == uppercase(s)
            push!(res, s)
        end
    end
    res
end
----

Operaciones como +solomayusculas+ se llaman _filtro_ porque seleccionan solo algunos elementos, filtrando otros.
(((filtro)))

Las operaciones de arreglos más comunes son una combinación de mapeo, filtro y reducción.


=== Sintaxis de punto

Para cada operador binario, como por ejemplo +pass:[^]+, existe un _operador punto_ correspondiente pass:[<code>.^</code>] que automáticamente define la operación +pass:[^]+ para cada elemento de un arreglo. Por ejemplo, pass:[<code>&#91;1, 2, 3&#93; ^ 3</code>] no está definido, pero pass:[<code>&#91;1, 2, 3&#93; .^ 3</code>] se define como el resultado de realizar la operación +pass:[^]+ en cada elemento pass:[<code>&#91;1^3, 2^3, 3^3&#93;</code>]:
(((operador punto)))((("operador", "Base", ".", véase "operador punto")))(((".", véase "operador punto")))

[source,@julia-repl-test]
----
julia> print([1, 2, 3] .^ 3)
[1, 8, 27]
----

Cualquier función +f+ de Julia puede ser aplicada a cada elemento de cualquier arreglo con la _sintaxis de punto_. Por ejemplo, para poner en mayúsculas un arreglo de cadenas, no es necesario un bucle explícito:
(((sintaxis de punto)))

[source,@julia-repl-test]
----
julia> t = uppercase.(["abc", "def", "ghi"]);

julia> print(t)
["ABC", "DEF", "GHI"]
----

Esta es una forma elegante de crear un mapeo. Siguiendo esta lógica, la función +todoenmayusculas+ puede implementarse con una línea:
(((todoenmayusculas)))

[source,@julia-setup]
----
function todoenmayusculas(t)
    uppercase.(t)
end
----


=== Borrando (Insertando) Elementos

Hay varias formas de eliminar elementos de un arreglo. Si se conoce el índice del elemento que se desea eliminar, se puede usar +splice!+:
(((splice!)))((("función", "Base", "splice!", véase "splice!")))

[source,@julia-repl-test]
----
julia> t = ['a', 'b', 'c'];

julia> splice!(t, 2)
'b': ASCII/Unicode U+0062 (category Ll: Letter, lowercase)
julia> print(t)
['a', 'c']
----

+splice!+ modifica el arreglo y devuelve el elemento que se eliminó.

+pop!+ elimina y devuelve el último elemento:
(((pop!)))((("función", "Base", "pop!", véase "pop!")))

[source,@julia-repl-test]
----
julia> t = ['a', 'b', 'c'];

julia> pop!(t)
'c': ASCII/Unicode U+0063 (category Ll: Letter, lowercase)
julia> print(t)
['a', 'b']
----

+popfirst!+ elimina y devuelve el primer elemento:
(((popfirst!)))((("función", "Base", "popfirst!", véase "popfirst!")))

[source,@julia-repl-test]
----
julia> t = ['a', 'b', 'c'];

julia> popfirst!(t)
'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)
julia> print(t)
['b', 'c']
----

Las funciones +pushfirst!+ y +push!+ insertan un elemento al principio y al final del arreglo, respectivamente.
(((pushfirst!)))((("función", "Base", "pushfirst!", véase "pushfirst!")))(((push!)))

Si no se necesita el valor eliminado, se puede usar la función +deleteat!+:
(((deleteat!)))((("función", "Base", "deleteat!", véase "deleteat!")))

[source,@julia-repl-test]
----
julia> t = ['a', 'b', 'c'];

julia> print(deleteat!(t, 2))
['a', 'c']
----

La función +insert!+ inserta un elemento en un índice dado:
(((insert!)))((("función", "Base", "insert!", véase "insert!")))

[source,@julia-repl-test]
----
julia> t = ['a', 'b', 'c'];

julia> print(insert!(t, 2, 'x'))
['a', 'x', 'b', 'c']
----


=== Arreglos y Cadenas

Una cadena es una secuencia de caracteres y un arreglo es una secuencia de valores, pero un arreglo de caracteres no es lo mismo que una cadena. Para convertir una cadena a un arreglo de caracteres, se puede usar la función +collect+:
(((collect)))((("función", "Base", "collect", véase "collect")))

[source,@julia-repl-test]
----
julia> t = collect("spam");

julia> print(t)
['s', 'p', 'a', 'm']
----

La función +collect+ divide una cadena u otra secuencia en elementos individuales.

Si desea dividir una cadena en palabras, puede usar la función +split+:
(((split)))((("función", "Base", "split", véase "split")))

[source,@julia-repl-test]
----
julia> t = split("En un lugar de la Mancha");

julia> print(t)
SubString{String}["En", "un", "lugar", "de", "la", "Mancha"]
----

Un _argumento opcional_ llamado _delimitador_ especifica qué caracteres usar como límites de palabra. El siguiente ejemplo usa un guión como delimitador:
(((argumento opcional)))(((delimitador)))

[source,@julia-repl-test]
----
julia> t = split("hola-hola-hola", '-');

julia> print(t)
SubString{String}["hola", "hola", "hola"]
----

+join+ es el inverso de +split+. Toma un arreglo de cadenas y concatena los elementos:
(((join)))((("función", "Base", "join", véase "join")))

[source,@julia-repl-test]
----
julia> t = ["En", "un", "lugar", "de", "la", "Mancha"];

julia> s = join(t, ' ')
"En un lugar de la Mancha"
----

En este caso, el delimitador es un carácter de espacio en blanco. Para concatenar cadenas sin espacios, no especifique un delimitador.

=== Objeto y Valores 

Un _objeto_ es algo a lo que una variable puede referirse. Hasta ahora, podría usar "objeto" y "valor" indistintamente.
(((objeto)))(((variable)))(((valor)))

Si ejecutamos estas sentencias de asignación:

[source,julia]
----
a = "banana"
b = "banana"
----

Se sabe que +a+ y +b+ apuntan a una cadena, pero no se sabe si están apuntando a la _misma_ cadena. Hay dos estados posibles, los cuales se muestran en la Figura 10-2.
(((diagrama de estado)))

.Diagramas de estado.
image::images/fig102.svg[]


En un caso, +a+ y +b+ se refieren a dos objetos diferentes que tienen el mismo valor. En el segundo caso, se refieren al mismo objeto. 

Para verificar si dos variables se refieren al mismo objeto, se puede usar el operador +≡+ (*+\equiv TAB+*)) o +===+.
(((≡)))((("operador", "Base", "≡", véase "≡")))((("===", véase "≡")))

[source,@julia-repl-test]
----
julia> a = "banana"
"banana"
julia> b = "banana"
"banana"
julia> a ≡ b
true
----

En este ejemplo, Julia solo creó un objeto de cadena, y ambas variables +a+ y +b+ apuntan a ella. Pero cuando se crean dos arreglos, se obtienen dos objetos:

[source,@julia-repl-test]
----
julia> a = [1, 2, 3];

julia> b = [1, 2, 3];

julia> a ≡ b
false
----

Entonces el diagrama de estado se ve así <<fig10-3>>.
(((diagrama de estado)))

[[fig10-3]]
.Diagrama de estado
image::images/fig103.svg[]


En este caso, se podría decir que los dos arreglos son _equivalentes_, porque tienen los mismos elementos, pero no _idénticos_, ya que no son el mismo objeto. Si dos objetos son idénticos, también son equivalentes, pero si son equivalentes, no son necesariamente idénticos.
(((equivalente)))(((idéntico)))

Para ser precisos, un objeto tiene un valor. Si se evalúa +[1, 2, 3]+, se obtendrá un objeto arreglo cuyo valor es una secuencia de enteros. Si otro arreglo tiene los mismos elementos, se dice que tiene el mismo valor, pero no es el mismo objeto.


=== Alias (poner sobrenombres)

Si +a+ apunta a un objeto, y se asigna +b = a+, entonces ambas variables se refieren al mismo objeto:

[source,@julia-repl-test chap10]
----
julia> a = [1, 2, 3];

julia> b = a;

julia> b ≡ a
true
----

El diagrama de estado sería como este <<fig10-4>>.

[[fig10-4]]
.Diagrama de estado
image::images/fig104.svg[]


La asociación de una variable con un objeto se llama _referencia_. En este ejemplo, hay dos referencias al mismo objeto.
(((referencia)))

Un objeto con más de una referencia tiene más de un nombre, por lo que decimos que el objeto tiene un _alias_.
(((alias)))

Si el objeto con alias es mutable, los cambios hechos a un alias afectan al otro:
(((mutable)))

[source,@julia-repl-test chap10]
----
julia> b[1] = 42
42
julia> print(a)
[42, 2, 3]
----

[WARNING]

Aunque este comportamiento puede ser útil, a veces puede inducir a errores. En general, es más seguro evitar los alias cuando se trabaje con objetos mutables.


No hay problema con los alias al trabajar con objetos inmutables, tales como cadenas de texto. En este ejemplo: 

[source,@julia-setup]
----
a = "banana"
b = "banana"
----

Casi nunca es relevante que +a+ y +b+ se refieran a la misma cadena o no.


=== Arreglos como argumentos

Cuando se pasa un arreglo como argumento de una función, en realidad se pasa una referencia a ella. Si la función modifica el arreglo, el que hizo la llamada verá el cambio. Por ejemplo, la función +borrarprimero+ elimina el primer elemento de un arreglo:
(((borrarprimero!)))((("función", "definida por el programador", "borrarprimero!", véase "borrarprimero!")))(((popfirst!)))

[source,@julia-setup chap10]
----
function borrarprimero!(t)
    popfirst!(t)
end
----

Aquí se aprecia el uso de borrarprimero!:

[source,@julia-repl-test chap10]
----
julia> letras = ['a', 'b', 'c'];

julia> borrarprimero!(letras);

julia> print(letras)
['b', 'c']
----

El parámetro +t+ y la variable +letras+ son alias de un mismo objeto. El diagrama de estado es así <<fig10-5>>.
(((diagrama de pila)))

[[fig10-5]]
.Diagrama de estado
image::images/fig105.svg[]

Como el arreglo está compartido por dos marcos, se dibuja entre ambos.

Es importante distinguir entre operaciones que modifiquen arreglos y operaciones que creen nuevas arreglos. Por ejemplo, +push!+ modifica un arreglo, pero +vcat+ crea un nuevo arreglo.
(((push!)))(((vcat)))((("función", "Base", "vcat", véase "vcat")))

Aquí hay un ejemplo de +push!+:

[source,@julia-repl-test chap10]
----
julia> t1 = [1, 2];

julia> t2 = push!(t1, 3);

julia> print(t1)
[1, 2, 3]
----

+t2+ es un alias de +t1+.

Aquí hay un ejemplo de +vcat+:

[source,@julia-repl-test chap10]
----
julia> t3 = vcat(t1, [4]);

julia> print(t1)
[1, 2, 3]
julia> print(t3)
[1, 2, 3, 4]
----

El resultado de +vcat+ es un nuevo arreglo. El arreglo original no ha sufrido cambios.

Esta diferencia es importante al momento de escribir funciones que modifican arreglos.

Por ejemplo, esta función _no_ elimina el primer elemento de un arrreglo:
(((noborrarprimero)))((("función", "definida por el programador", "noborrarprimero", véase "noborrarprimero")))

[source,@julia-setup chap10]
----
function noborrarprimero(t)
    t = t[2:end]                # MALO!
end
----

El operador porción crea un nuevo arreglo y la asignación hace que +t+ se refiera a ella, pero eso no afecta al arreglo +t+ fuera de la función.
(((operador porción)))

[source,@julia-repl-test chap10]
----
julia> t4 = noborrarprimero(t3);

julia> print(t3)
[1, 2, 3, 4]
julia> print(t4)
[2, 3, 4]
----

Al comienzo de +noborrarprimero+, +t+ y +t3+ se refieren al mismo arreglo. Al final, +t+ se refiere a un nuevo arreglo, pero +t3+ todavía se refiere al arreglo original no modificado.

Una alternativa es escribir una función que cree y devuelva un nuevo arreglo. Por ejemplo, la función +cola+ devuelve todos menos el primer elemento de un arreglo:
(((cola)))((("función", "definida por el programador", "cola", véase "cola")))

[source,@julia-setup chap10]
----
function cola(t)
    t[2:end]
end
----

Esta función no modifica el arreglo original, y se usa de la siguiente manera:

[source,@julia-repl-test chap10]
----
julia> letras = ['a', 'b', 'c'];

julia> demas = cola(letras);

julia> print(demas)
['b', 'c']
----


=== Depuración

Un uso inadecuado de los arreglos (y otros objetos mutables) puede llevar a largas horas de depuración. A continuación se muestran algunos errores comunes y cómo evitarlos:
(((depuración)))

* La mayoría de las funciones que operan en arreglos modifican el argumento. Esto es lo opuesto a lo que ocurre en las funciones que operan en cadenas de texto, que devuelven una nueva cadena y dejan la original sin modificaciones.
+
Si está acostumbrado a escribir código con cadenas de texto como este:
(((strip)))(((sort!)))
+
[source,julia]
----
nueva_palabra = strip(palabra)
----
+
Puede parecer tentador escribir código con arreglos como este:
+
[source,julia]
----
t2 = sort!(t1)
----
+
Pero como +sort!+ devuelve el arreglo original +t1+ modificado, +t2+ es un alias de +t1+.
+
[TIP]
====
Antes de utilizar funciones y operadores de arreglos, debe leer la documentación detenidamente y luego probarla en modo interactivo.
====

* Escoja una expresión y quédese con ella.
+
Parte del problema con los arreglos es que hay demasiadas formas de hacer las cosas. Por ejemplo, para eliminar un elemento de un arreglo se puede usar +pop!+, +popfirst!+, +delete_at+, o incluso una asignación de porción. Para agregar un elemento se puede usar +push!+, +pushfirst!+, +insert!+ or +vcat+. Suponiendo que +t+ es un arreglo y +x+, es un elemento, estas formas son correctas: 
(((push!)))(((pushfirst!)))(((insert!)))(((vcat)))
+
[source,julia]
----
insert!(t, 4, x)
push!(t, x)
append!(t, [x])
----
+
Y estas incorrectas:
+
[source,julia]
----
insert!(t, 4, [x])         # MALO!
push!(t, [x])              # MALO!
vcat(t, [x])               # MALO!
----

* Haga copias para evitar usar alias.
+
Si se desea utilizar una función como +sort!+ que modifica el argumento pero también se necesita mantener el arreglo original, es posible hacer una copia:
(((sort!)))
+
[source,@julia-repl-test chap10]
----
julia> t = [3, 1, 2];

julia> t2 = t[:]; # t2 = copy(t)

julia> sort!(t2);

julia> print(t)
[3, 1, 2]
julia> print(t2)
[1, 2, 3]
----
+
En este ejemplo, también podría usar la función incorporada +sort+, que devuelve un nuevo arreglo ordenado y no modifica el original:
(((sort)))
+
[source,@julia-repl-test chap10]
----
julia> t2 = sort(t);

julia> println(t)
[3, 1, 2]
julia> println(t2)
[1, 2, 3]
----


=== Glosario

arreglo::
Una secuencia de valores.
(((arreglo)))

elemento::
Uno de los valores de un arreglo (u otra secuencia), también llamado ítem.
(((elemento)))

lista anidada::
Un arreglo que es elemento de otro arreglo.
(((lista anidada)))

acumulador::
Una variable utilizada en un ciclo para sumar o acumular un resultado.
(((acumulador)))

asignación aumentada::
Una sentencia que actualiza el valor de una variable usando un operador como ++=+.
(((asignación aumentada)))

operador punto::
Operador binario que se aplica a cada elemento de un arreglo.
(((operador punto)))

sintaxis de punto::
Sintaxis utilizada para aplicar una función a todos los elementos de cualquier arreglo.
(((sintaxis de punto)))

operación de reducción::
Un patrón de procesamiento que recorre una secuencia y acumula los elementos en un solo resultado.
(((operación de reducción)))

mapeo::
Un patrón de procesamiento que recorre una secuencia y realiza una operación en cada elemento.
(((mapeo)))

filtro::
Un patrón de procesamiento que recorre una secuencia y selecciona los elementos que satisfacen algún criterio.
(((filtro)))

objeto::
Una cosa a la que se puede referir una variable. Un objeto tiene tipo y valor.
(((objeto)))

equivalente::
Tener el mismo valor.
(((equivalente)))

idéntico::
Ser el mismo objeto (lo que implica equivalencia).
(((idéntico)))

referencia::
La asociación entre una variable y su valor.
(((referencia)))

alias::
Múltiples variables que contienen referencias al mismo objeto.
(((alias)))

argumentos opcionales::
Argumentos que no son necesarios.
(((argumentos opcionales)))

delimitador::
Un carácter o cadena utilizado para indicar donde debe cortarse una cadena.
(((delimitador)))


=== Ejercicios

[source,@julia-eval chap10]
----
function sumaanidada(t)
  total = 0
  for nested in t
    total += sum(nested)
  end
  total
end;

function sumaacumulada(t)
  total = 0
  res = []
  for x in t
    total += x
    push!(res, total)
  end
  res
end;

function interior(t)
  t[2:end-1]
end;

function interior!(t)
  popfirst!(t)
  pop!(t)
  nothing
end;

function estaordenada(t)
  t == sort(t)
end;
----

[[ex10-1]]
==== Ejercicio 10-1

Escriba una función llamada +sumaanidada+ que tome un arreglo de arreglos de enteros y sume los elementos de todos los arreglos anidados. Por ejemplo:
(((sumaanidada)))((("función", "definida por el programador", "sumaanidada", véase "sumaanidada")))

[source,@julia-repl-test chap10]
----
julia> t = [[1, 2], [3], [4, 5, 6]];

julia> sumaanidada(t)
21
----

[[ex10-2]]
==== Ejercicio 10-2

Escriba una función llamada +sumaacumulada+ que tome un arreglo de números y devuelva la suma acumulativa, es decir, un nuevo arreglo donde el latexmath:[i]ésimo elemento es la suma de los primeros latexmath:[i] elementos del arreglo original. Por ejemplo:
(((sumaacumulada)))((("función", "definida por el programador", "sumaacumulada", véase "sumaacumulada")))

[source,@julia-repl-test chap10]
----
julia> t = [1, 2, 3];

julia> print(sumaacumulada(t))
Any[1, 3, 6]
----

[[ex10-3]]
==== Ejercicio 10-3

Escriba una función llamada +interior+ que tome un arreglo y devuelva un nuevo arreglo que contenga todos los elementos excepto el primero y el último. Por ejemplo:
(((interior)))((("función", "definida por el programador", "interior", véase "interior")))

[source,@julia-repl-test chap10]
----
julia> t = [1, 2, 3, 4];

julia> print(interior(t))
[2, 3]
----

[[ex10-4]]
==== Ejercicio 10-4

Escriba una función llamada +interior!+ que tome un arreglo, lo modifique eliminando el primer y el último elemento, y que no devuelva un valor. Por ejemplo:
(((interior!)))((("función", "definida por el programador", "interior!", véase "interior!")))

[source,@julia-repl-test chap10]
----
julia> t = [1, 2, 3, 4];

julia> interior!(t)

julia> print(t)
[2, 3]
----

[[ex10-5]]
==== Ejercicio 10-5

Escriba una función llamada +estaordenada+ que tome un arreglo como parámetro y devuelva +true+ si el arreglo se ordena en orden ascendente y +false+ de lo contrario. Por ejemplo:
(((estaordenada)))((("función", "definida por el programador", "estaordenada", véase "estaordenada")))

[source,@julia-repl-test chap10]
----
julia> estaordenada([1, 2, 2])
true
julia> estaordenada(['b', 'a'])
false
----

[[ex10-6]]
==== Ejercicio 10-6

Dos palabras son anagramas si se pueden ordenar las letras de una para escribir la otra. Escriba una función llamada +esanagrama+ que tome dos cadenas y devuelva +true+ si son anagramas.
(((esanagrama)))((("función", "definida por el programador", "esanagrama", véase "esanagrama")))

[[ex10-7]]
==== Ejercicio 10-7

Escriba una función llamada +repetido+ que tome un arreglo y devuelva +true+ si hay algún elemento que aparece más de una vez. No debe modificar el arreglo original.
(((repetido)))((("función", "definida por el programador", "repetido", véase "repetido")))

[[ex10-8]]
==== Ejercicio 10-8

Este ejercicio se relaciona con la llamada paradoja del cumpleaños, sobre la cual puede leer en https://es.wikipedia.org/wiki/Paradoja_del_cumplea%C3%B1os
(((Paradoja del cumpleaños)))

Si hay 23 estudiantes en su clase, ¿Cuáles son las posibilidades de que dos de ustedes tengan el mismo cumpleaños? Puede estimar esta probabilidad generando muestras aleatorias de 23 cumpleaños y buscando coincidencias.
(((rand)))((("función", "Base", "rand", see="rand")))

[TIP]
====
Puede generar cumpleaños aleatorios con +rand(1:365)+.
====

[[ex10-9]]
==== Ejercicio 10-9

Escriba una función que lea el archivo +palabras.txt+ y construya un arreglo con un elemento por palabra. Escriba dos versiones de esta función, una con +push!+ y la otra con la expresión +t = [pass:[t...], x]+. ¿Cuál tarda más en ejecutarse? ¿Por qué?
(((push!)))

[[ex10-10]]
==== Ejercicio 10-10

Para verificar si una palabra está en el arreglo de palabras se puede usar el operador +∈+. Esto sería lento pues este operador busca las palabras en orden.

Debido a que las palabras están en orden alfabético, se puede acelerar la verificación con una búsqueda de bisección (también conocida como búsqueda binaria), que es similar a lo que se hace cuando se busca una palabra en el diccionario. Se comienza en el medio y se verifica si la palabra que se está buscando va antes que la palabra localizada en el medio. Si es así, se busca en la primera mitad de la matriz de la misma manera. De lo contrario, se busca en la segunda mitad.

En ambos casos se reduce el espacio de búsqueda restante a la mitad. Si el arreglo de palabras tiene 113,809 palabras, se necesitarán unos 17 pasos para encontrar la palabra o concluir que no está allí.

Escriba una función llamada +enbiseccion+ que tome un arreglo ordenado y un valor objetivo, y devuelva +true+ si la palabra está en el arreglo y +false+ si no lo está.
(((enbiseccion)))((("función", "definida por el programador", "enbiseccion", véase "enbiseccion")))

[[ex10-11]]
==== Ejercicio 10-11

Dos palabras son un "par inverso" si cada una es la inversa de la otra. Escriba un programa llamado +parinverso+ que encuentre todos los pares inversos en el arreglo de palabras.
(((par inverso)))((("función", "definida por el programador", "par inverso", véase "par inverso")))

[[ex10-12]]
==== Ejercicio 10-12

Dos palabras se "entrelazan" si al tomar letras alternando entre cada palabra se forma una nueva palabra. Por ejemplo, "pi" y "as" se entrelazan para formar "pais".
(((entrelazan)))

Crédito: Este ejercicio está inspirado en un ejemplo de http://puzzlers.org.

. Escriba un programa que encuentre todos los pares de palabras que se entrelazan.

+
[TIP]
====
¡No enumere todos los pares!
====

. ¿Puede encontrar tres palabras que se entrelacen, es decir, cada tercera letra forma una palabra, empezando de la primera, segunda o tercera letra de la palabra?

