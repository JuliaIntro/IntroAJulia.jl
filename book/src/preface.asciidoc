[preface]
== Prefacio

En enero de 2018 comencé a preparar un curso de programación pensado en estudiantes que no tuvieran experiencia previa en programación. Quería usar Julia como lenguaje de programación, y descubrí que no existía ningún libro para aprender a programar que usara Julia como primer lenguaje de programación. Hay tutoriales maravillosos que explican los conceptos clave de Julia, pero ninguno de ellos se dedicaba lo suficiente a enseñar a pensar como un programador.

Conocía el libro Think Python de Allen Downey que contiene todos los elementos clave para aprender a programar correctamente. Sin embargo, este libro se basa en el lenguaje de programación Python. Mi primer borrador del curso fue una mezcla de muchas referencias, pero a medida que trabajaba en él, el contenido comenzó a parecerse cada vez más a los capítulos de Think Python. La idea de desarrollar mi curso como base para traspasar ese libro a Julia se hizo realidad.

Todo el material estaba disponible en notebooks de Jupyter, en un repositorio de GitHub. Después de publicar un mensaje en el sitio Discourse de Julia sobre el progreso de mi curso, los comentarios fueron abrumadores. Aparentemente, un libro sobre conceptos básicos de programación con Julia como primer lenguaje de programación era algo que faltaba en el universo de Julia. Contacté a Allen para ver si podía iniciar oficialmente la versión de Think Python para Julia y su respuesta fue inmediata: "¡adelante!", me puso en contacto con su editor de O'Reilly Media y ahora, un año después, estoy haciendo los retoques finales a este libro.

Fue un camino difícil. En agosto de 2018 se lanzó Julia v1.0 y, como todos mis colegas programadores de Julia, tuve que hacer una migración del código. Todos los ejemplos en el libro se prueban durante la conversión de los archivos fuente a archivos ASCIIDoc compatibles con O'Reilly. Tanto la cadena de herramientas como el código de los ejemplos tenían que ser compatibles con Julia v1.0. Afortunadamente no hay conferencias en agosto...

Espero que disfrutes al trabajar con este libro, y que te ayude a aprender a programar y pensar como un informático, al menos un poquito.

_Ben Lauwens_

=== ¿A quién está dirigido este libro?

Julia fue lanzado originalmente en 2012 por Alan Edelman, Stefan Karpinski, Jeff Bezanson y Viral Shah. Es un lenguaje de programación gratuito y de código abierto.

La elección de un lenguaje de programación es siempre subjetiva. Para mí, las siguientes características de Julia son decisivas:

- Julia está desarrollado como un lenguaje de programación de alto rendimiento.
- Julia usa dispatch múltiple que le permite al programador elegir entre diferentes patrones de programación de acuerdo a la aplicación.
- Julia es un lenguaje de tipo dinámico que se puede usar fácilmente de forma interactiva.
- Julia tiene una sintaxis de alto nivel que es fácil de aprender.
- Julia es un lenguaje de programación con tipos opcionales, cuyos tipos de datos (definidos por el usuario) hacen que el código sea más claro y robusto.
- Julia tiene una biblioteca estándar extendida y numerosos paquetes de terceros están disponibles.

Julia es un lenguaje de programación único, ya que resuelve el problema de los dos idiomas. No se necesita de ningún otro lenguaje de programación para escribir código de alto rendimiento. Esto no significa que ocurra automáticamente. Es responsabilidad del programador optimizar el código que produzca cuellos de botella, pero esto puede hacerse en Julia.

=== ¿Para quién es este libro?

Este libro es para cualquier persona que quiera aprender a programar. No se requieren conocimientos previos formales.

Los nuevos conceptos se introducen gradualmente y los temas más avanzados se describen en capítulos posteriores.

"Intro a Julia" puede ser usado como un curso de un semestre de nivel secundario o universitario.

=== Convenciones utilizadas en este libro

En este libro se utilizan las siguientes convenciones tipográficas:

_Cursiva_:: Indica nuevos términos, URL, direcciones de correo electrónico, nombres de archivo y extensiones de archivo.

+Ancho constante+:: Se utiliza para mostrar código de programas, así como dentro de los párrafos para referirse a elementos del programa como nombres de variables o funciones, bases de datos, tipos de datos, variables de entorno, sentencias y palabras reservadas.

**`Ancho constante en negrita`**:: Muestra comandos u otro texto que el usuario debe escribir.

_++Ancho constante en cursiva++_:: Muestra el texto que debe reemplazarse con valores proporcionados por el usuario o por valores determinados por el contexto.

[TIP]
====
Esto indica consejo o sugerencia.
====

[NOTE]
====
Esto es una nota general.
====

[WARNING]
====
Esto indica una advertencia o precaución.
====

=== Usando los códigos de ejemplo

Todo el código utilizado en este libro está disponible en un repositorio de Git en GitHub: https://github.com/JuliaIntro/IntroAJulia.jl. Si no está familiarizado con Git, es un sistema de control de versiones que le permite realizar seguimiento a los archivos que componen un proyecto. Una colección de archivos controlados por Git se denomina "repositorio". GitHub es un servicio de hosting que proporciona almacenamiento para repositorios de Git y una interfaz web conveniente.

El siguiente paquete puede ser de utilidad, y se puede agregar directamente a Julia. Simplemente escriba *+pass:[add https://github.com/JuliaIntro/IntroAJulia.jl]+* en el REPL, en modo Pkg.

La forma más fácil de ejecutar un código de Julia es en https://juliabox.com, iniciando una sesión de prueba gratuita. Es posible utilizar la interfaz REPL y notebooks. Si desea que Julia esté instalada localmente en su computadora, puede descargar JuliaPro de Julia Computing gratuitamente desde https://juliacomputing.com/products/juliapro.html. Consiste en una versión reciente de Julia, el IDE de Juno basado en Atom y varios paquetes de Julia preinstalados. Si eres más aventurero, puedes descargar Julia desde https://julialang.org, instalar el editor que te gusta, por ejemplo Atom o Visual Studio Code, y activar los complementos para su integración de Julia. Para una instalación local, también puedes agregar el paquete +IJulia+ y ejecutar un notebook Jupyter en su computadora.

=== Agradecimientos

Realmente quiero agradecer a Allen por escribir Think Python y permitirme traspasar este libro a Julia. ¡Tu entusiasmo es contagioso!

También me gustaría agradecer a los revisores técnicos de este libro, que hicieron muchas sugerencias útiles: Tim Besard, Bart Janssens y David P. Sanders.

Gracias a Melissa Potter de O'Reilly Media por hacer de este un libro mejor. Me obligaste a hacer las cosas bien y hacer que este libro sea lo más original posible.

Gracias a Matt Hacker de O'Reilly Media que me ayudó con la cadena de herramientas Atlas y algunos problemas al destacar la sintaxis.

Gracias a todos los estudiantes que trabajaron con una versión temprana de este libro y a todos los colaboradores (enumerados a continuación) que enviaron correcciones y sugerencias.

=== Lista de Colaboradores

Si tiene una sugerencia o corrección, abra un https://github.com/JuliaIntro/IntroAJulia.jl/issues[issue] en GitHub. Si se realiza un cambio basado en sus comentarios, será agregado a la lista de contribuyentes (a menos que solicite ser omitido).

Avísenos con qué versión del libro está trabajando y en qué formato. Si incluye al menos parte de la oración en la que aparece el error, eso facilita la búsqueda. Los números de página y sección también son útiles, pero no es tan fácil trabajar con ellos. ¡Gracias!

[small]
--
- Scott Jones señaló el cambio de nombre de +Void+ a +Nothing+ y con esto se comenzó la migración a Julia v1.0
- Robin Deits encontró algunos errores tipográficos en el Capítulo 2.
- Mark Schmitz sugirió destacar la sintaxis.
- Zigu Zhao encontró algunos errores en el Capítulo 8.
- Oleg Soloviev detectó un error en la url al agregar el paquete +ThinkJulia+.
- Aaron Ang encontró algunos problemas de representación y nomenclatura.
- Sergey Volkov encontró un enlace caido en el Capítulo 7.
- Sean McAllister sugirió mencionar el excelente paquete +BenchmarkTools+.
- Carlos Bolech envió una larga lista de correcciones y sugerencias.
- Krishna Kumar corrigió el ejemplo de Markov en el Capítulo 18.
--
